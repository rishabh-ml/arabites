<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AugmentWebviewStateStore">
    <option name="stateMap">
      <map>
        <entry key="CHAT_STATE" value="eyJjdXJyZW50Q29udmVyc2F0aW9uSWQiOiIxMjRhYjYzMC00OGYwLTQxNjEtOTRjZS1mYzIzNDNiZWRiYzEiLCJjb252ZXJzYXRpb25zIjp7ImY0ZmQ1YjM2LTg0NTItNGJiMy04YjZjLTlmMzlhMDY5M2Y5MiI6eyJpZCI6ImY0ZmQ1YjM2LTg0NTItNGJiMy04YjZjLTlmMzlhMDY5M2Y5MiIsImNyZWF0ZWRBdElzbyI6IjIwMjUtMDUtMjdUMjE6Mjg6NDIuNTgzWiIsImxhc3RJbnRlcmFjdGVkQXRJc28iOiIyMDI1LTA1LTI3VDIxOjI4OjUzLjUxNVoiLCJjaGF0SGlzdG9yeSI6W10sImZlZWRiYWNrU3RhdGVzIjp7fSwidG9vbFVzZVN0YXRlcyI6e30sImRyYWZ0RXhjaGFuZ2UiOnsicmVxdWVzdF9tZXNzYWdlIjoiIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCJ9XX0sIm1lbnRpb25lZF9pdGVtcyI6W10sInN0YXR1cyI6ImRyYWZ0In0sInJlcXVlc3RJZHMiOltdLCJpc1Bpbm5lZCI6ZmFsc2UsImlzU2hhcmVhYmxlIjpmYWxzZSwiZXh0cmFEYXRhIjp7Imhhc0RpcnR5RWRpdHMiOmZhbHNlfSwicGVyc29uYVR5cGUiOjAsInJvb3RUYXNrVXVpZCI6IjM0MGUxMzk0LWZjODQtNGM4MC05ZGMxLTQ3ZTU1NDM4YTI5OSJ9LCJmODc5ODFmZS1hMTVmLTQxMWYtOWFmYS02MTRiNzI5OGEzZTEiOnsiaWQiOiJmODc5ODFmZS1hMTVmLTQxMWYtOWFmYS02MTRiNzI5OGEzZTEiLCJjcmVhdGVkQXRJc28iOiIyMDI1LTA1LTI3VDIxOjI4OjQzLjEyMVoiLCJsYXN0SW50ZXJhY3RlZEF0SXNvIjoiMjAyNS0wNS0yN1QyMToyODo0My4xMjFaIiwiY2hhdEhpc3RvcnkiOltdLCJmZWVkYmFja1N0YXRlcyI6e30sInRvb2xVc2VTdGF0ZXMiOnt9LCJkcmFmdEV4Y2hhbmdlIjp7InJlcXVlc3RfbWVzc2FnZSI6IiIsInJpY2hfdGV4dF9qc29uX3JlcHIiOnsidHlwZSI6ImRvYyIsImNvbnRlbnQiOlt7InR5cGUiOiJwYXJhZ3JhcGgifV19LCJtZW50aW9uZWRfaXRlbXMiOltdLCJzdGF0dXMiOiJkcmFmdCJ9LCJyZXF1ZXN0SWRzIjpbXSwiaXNQaW5uZWQiOmZhbHNlLCJpc1NoYXJlYWJsZSI6ZmFsc2UsImV4dHJhRGF0YSI6eyJoYXNEaXJ0eUVkaXRzIjpmYWxzZX0sInBlcnNvbmFUeXBlIjowLCJyb290VGFza1V1aWQiOiJkOGY5OTA3My1hMjYzLTQzZjctOGE2YS1lM2NhYjIwMWVhZDQifSwiMTI0YWI2MzAtNDhmMC00MTYxLTk0Y2UtZmMyMzQzYmVkYmMxIjp7ImlkIjoiMTI0YWI2MzAtNDhmMC00MTYxLTk0Y2UtZmMyMzQzYmVkYmMxIiwiY3JlYXRlZEF0SXNvIjoiMjAyNS0wNS0yN1QyMToyOTowNS44MDJaIiwibGFzdEludGVyYWN0ZWRBdElzbyI6IjIwMjUtMDUtMjdUMjE6MzY6NTYuOTgxWiIsImNoYXRIaXN0b3J5IjpbeyJyZXF1ZXN0X2lkIjoiZTc4Njc5Y2EtZDlkYS00MGM1LTk3MDctZmM3NGYzMmMyN2FkIiwidXVpZCI6IjE0NTEyYTdhLTJmZTEtNDY4Ny05MTgyLWZjMTlkNDJkMmI3ZiIsImNoYXRJdGVtVHlwZSI6ImFnZW50aWMtY2hlY2twb2ludC1kZWxpbWl0ZXIiLCJzdGF0dXMiOiJzdWNjZXNzIiwiZnJvbVRpbWVzdGFtcCI6MCwidG9UaW1lc3RhbXAiOjE3NDgzODEzNDU4MDUsInNlZW5fc3RhdGUiOiJzZWVuIn0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjdiNjNiYzQwLWJiZWYtNGI2YS05ZjNiLWUyOTczZjNhMWYzOSIsInJlcXVlc3RfbWVzc2FnZSI6IkZvbGxvdy1VcCBQcm9tcHQgZm9yIEF1Z21lbnQg4oCUIEFib3V0IFBhZ2UgKFBhZ2UgMiBvZiBBZ2VuY3kgV2Vic2l0ZSlcbvCflKcgUHJvamVjdCBEZXRhaWwgQ29udGV4dCAoSW5oZXJpdGVkKTpcblRoaXMgaXMgcGFydCBvZiBhIG11bHRpLXBhZ2UgYWdlbmN5IHdlYnNpdGUgZm9yIGEgbmV3IER1YmFpLWJhc2VkIGRpZ2l0YWwgYWdlbmN5IG9mZmVyaW5nIGN1c3RvbSB3ZWJzaXRlcywgbGFuZGluZyBwYWdlcywgYW5kIHNvZnR3YXJlIHNvbHV0aW9ucyBhY3Jvc3MgYm9vbWluZyBzZWN0b3JzIGxpa2UgUmVhbCBFc3RhdGUsIEUtY29tbWVyY2UsIEhlYWx0aCAmIFdlbGxuZXNzLCBUb3VyaXNtLCBhbmQgRmludGVjaC5cbkJ1aWx0IHVzaW5nIE5leHQuanMgKEFwcCBSb3V0ZXIpLCBUYWlsd2luZENTUywgRnJhbWVyIE1vdGlvbiwgVHlwZVNjcmlwdCwgYW5kIGRlcGxveWVkIG9uIFZlcmNlbC4gVGhlIHRvbmUgaXMgcHJvZmVzc2lvbmFsIHlldCBtb2Rlcm4sIHdpdGggc21vb3RoIGFuaW1hdGlvbnMgYW5kIHBlcmZvcm1hbmNlIGluIG1pbmQuXG5cblRoaXMgaXMgUGFnZSAyOiBBYm91dCBVcy4gVGhlIExhbmRpbmcgUGFnZSBpcyBhbHJlYWR5IGltcGxlbWVudGVkLlxuXG7wn5OEIFBhZ2UgRGVzaWduIChBYm91dCBVcyBQYWdlKTpcblxuQ3JlYXRlIGEgaGlnaGx5IHZpc3VhbCwgZW5nYWdpbmcsIGFuZCBpbmZvcm1hdGlvbi1yaWNoIEFib3V0IFBhZ2UgdGhhdCB0ZWxscyB0aGUgc3Rvcnkgb2YgdGhlIGFnZW5jeSB3aGlsZSBidWlsZGluZyB0cnVzdC4gU3RydWN0dXJlIHRoZSBwYWdlIGFzIGZvbGxvd3M6XG5cbkhlcm8gLyBJbnRybyBTZWN0aW9uXG5cbkJvbGQgdGl0bGUgbGlrZTog4oCcVGhlIFRlYW0gQmVoaW5kIFlvdXIgRGlnaXRhbCBCcmVha3Rocm91Z2jigJ1cblxuU3ViaGVhZGluZzog4oCcV2XigJlyZSBhIER1YmFpLXJvb3RlZCBkaWdpdGFsIGFnZW5jeSBjcmFmdGluZyBmdXR1cmUtcmVhZHkgc29sdXRpb25zIHdpdGggcGFzc2lvbiwgcHJlY2lzaW9uLCBhbmQgcHVycG9zZS7igJ1cblxuSW5jbHVkZSBhbiBpbWFnZSBvciBhbmltYXRlZCBTVkcgdG8gaHVtYW5pemUgdGhlIHNlY3Rpb25cblxuT3VyIFN0b3J5XG5cbkEgc2hvcnQgbmFycmF0aXZlIGFib3V0IGhvdyBhbmQgd2h5IHRoaXMgYWdlbmN5IHdhcyBjcmVhdGVkXG5cbkVtcGhhc2l6ZSB0aGUgbWlzc2lvbjogaGVscGluZyBEdWJhaS1iYXNlZCBidXNpbmVzc2VzIHRocml2ZSBvbmxpbmVcblxuT3VyIFZhbHVlcyAvIFBoaWxvc29waHlcblxuU2hvd2Nhc2UgMy01IGNvcmUgdmFsdWVzIChlLmcuLCBJbm5vdmF0aW9uLCBJbnRlZ3JpdHksIEV4Y2VsbGVuY2UsIFJlbGlhYmlsaXR5LCBFbXBhdGh5KVxuXG5Vc2UgaWNvbiArIHRpdGxlICsgc2hvcnQgZGVzY3JpcHRpb24gZm9ybWF0LCBpZGVhbGx5IGluIGEgcmVzcG9uc2l2ZSBncmlkXG5cblN0YXRzIC8gTWlsZXN0b25lcyBTZWN0aW9uXG5cblVzZSBhbmltYXRlZCBjb3VudGVycyAoRnJhbWVyIE1vdGlvbikgb3Igc3RhdCBjYXJkc1xuXG5FeGFtcGxlIHN0YXRzOlxuXG41KyBQcm9qZWN0cyBTaGlwcGVkXG5cbjEwMCUgU2F0aXNmYWN0aW9uXG5cbjI0LzcgU3VwcG9ydFxuXG41IFRhcmdldGVkIEluZHVzdHJpZXNcblxuTWVldCB0aGUgRm91bmRlcnMgLyBUZWFtIChPcHRpb25hbCBidXQgdXNlZnVsIGV2ZW4gaWYgc29sbylcblxuQWRkIHBsYWNlaG9sZGVyIHByb2ZpbGUocykgd2l0aCBuYW1lLCByb2xlLCBMaW5rZWRJbiBsaW5rXG5cbkVtcGhhc2l6ZSB5b3VyIHN0b3J5IGFzIGEgZGV2ZWxvcGVyLXR1cm5lZC1lbnRyZXByZW5ldXIgKGlmIHNvbG8gZm91bmRlcilcblxuV2h5IFdvcmsgV2l0aCBVcyAoQ1RBIFNlY3Rpb24pXG5cblVzZSBhIHRlc3RpbW9uaWFsLXN0eWxlIGFwcHJvYWNoICh0ZXh0ICsgc3RhcnMpIGlmIG5vIHJlYWwgdGVzdGltb25pYWxzIGV4aXN0IHlldFxuXG5JbmNsdWRlIGJ1dHRvbiB0byBCb29rIGEgQ2FsbCBvciBWaXNpdCBTZXJ2aWNlcyBwYWdlXG5cbvCfk6YgUGFnZSBEYXRhIC8gQ29uc3RyYWludHM6XG5cblVzZSBwbGFjZWhvbGRlciBwcm9maWxlIGltYWdlcyAod2XigJlsbCByZXBsYWNlIGxhdGVyKVxuXG5FbnN1cmUgdGhpcyBBYm91dCBwYWdlIGxpbmtzIGJhY2sgdG8gb3RoZXIgc2VjdGlvbnMgKExhbmRpbmcsIENvbnRhY3QsIFNlcnZpY2VzKVxuXG5BbmltYXRlIHRoZSBzdGF0cyBvciBpbnRybyBlbGVtZW50cyBzdWJ0bHkgdXNpbmcgRnJhbWVyIE1vdGlvblxuXG5Vc2Ugc2VtYW50aWMgaGVhZGluZ3MsIGdvb2QgY29udGVudCBzdHJ1Y3R1cmUsIGFuZCBTRU8tZnJpZW5kbHkgbWV0YWRhdGFcblxuTWFpbnRhaW4gdGhlIHNhbWUgY29sb3IgcGFsZXR0ZSwgZm9udCBwYWlyaW5nLCBhbmQgbGF5b3V0IGNvbnNpc3RlbmN5IGFzIHRoZSBMYW5kaW5nIFBhZ2VcblxuRG9u4oCZdCBkdXBsaWNhdGUgY29udGVudCBmcm9tIHRoZSBMYW5kaW5nIFBhZ2Ug4oCUIHRoaXMgcGFnZSBzaG91bGQgZGVlcGVuIHRoZSBicmFuZOKAmXMgc3Rvcnlcblxu8J+OryBTcGVjaWFsIE5vdGVzIGZvciBBdWdtZW50OlxuXG5Zb3XigJlyZSBhbGxvd2VkIHRvIGluZmVyIHRob3VnaHRmdWwgY29weSBmb3Igbm93IChtaXNzaW9uLCB2YWx1ZXMsIGV0Yy4pXG5cbkZvY3VzIG9uIHJlYWRhYmlsaXR5LCBoaWVyYXJjaHksIGFuZCBzY3JvbGwgZmxvd1xuXG5Nb2R1bGFyaXplIGNvbXBvbmVudHMgbGlrZSBPdXJTdG9yeS50c3gsIFZhbHVlcy50c3gsIFN0YXRzLnRzeCwgZXRjLlxuXG5BZGQgU0VPIG1ldGFkYXRhIGFuZCBPcGVuIEdyYXBoIHRhZ3MgZm9yIEFib3V0IFBhZ2UgYXMgd2VsbFxuXG5DcmVhdGUgL2Fib3V0IHJvdXRlIHVzaW5nIE5leHQuanMgQXBwIFJvdXRlciB3aXRoIGEgcGFnZSBmaWxlIGF0IHNyYy9hcHAvYWJvdXQvcGFnZS50c3hcblxuRG9u4oCZdCB1c2UgbG9yZW0gaXBzdW0g4oCUIHVzZSByZWFsaXN0aWMgYnV0IGVkaXRhYmxlIHBsYWNlaG9sZGVyIHRleHRcblxuIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCIsImNvbnRlbnQiOlt7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IkZvbGxvdy1VcCBQcm9tcHQgZm9yIEF1Z21lbnQg4oCUIEFib3V0IFBhZ2UgKFBhZ2UgMiBvZiBBZ2VuY3kgV2Vic2l0ZSkifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IvCflKcgUHJvamVjdCBEZXRhaWwgQ29udGV4dCAoSW5oZXJpdGVkKToifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IlRoaXMgaXMgcGFydCBvZiBhIG11bHRpLXBhZ2UgYWdlbmN5IHdlYnNpdGUgZm9yIGEgbmV3IER1YmFpLWJhc2VkIGRpZ2l0YWwgYWdlbmN5IG9mZmVyaW5nIGN1c3RvbSB3ZWJzaXRlcywgbGFuZGluZyBwYWdlcywgYW5kIHNvZnR3YXJlIHNvbHV0aW9ucyBhY3Jvc3MgYm9vbWluZyBzZWN0b3JzIGxpa2UgUmVhbCBFc3RhdGUsIEUtY29tbWVyY2UsIEhlYWx0aCAmIFdlbGxuZXNzLCBUb3VyaXNtLCBhbmQgRmludGVjaC4ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IkJ1aWx0IHVzaW5nIE5leHQuanMgKEFwcCBSb3V0ZXIpLCBUYWlsd2luZENTUywgRnJhbWVyIE1vdGlvbiwgVHlwZVNjcmlwdCwgYW5kIGRlcGxveWVkIG9uIFZlcmNlbC4gVGhlIHRvbmUgaXMgcHJvZmVzc2lvbmFsIHlldCBtb2Rlcm4sIHdpdGggc21vb3RoIGFuaW1hdGlvbnMgYW5kIHBlcmZvcm1hbmNlIGluIG1pbmQuIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJUaGlzIGlzIFBhZ2UgMjogQWJvdXQgVXMuIFRoZSBMYW5kaW5nIFBhZ2UgaXMgYWxyZWFkeSBpbXBsZW1lbnRlZC4ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IvCfk4QgUGFnZSBEZXNpZ24gKEFib3V0IFVzIFBhZ2UpOiJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiQ3JlYXRlIGEgaGlnaGx5IHZpc3VhbCwgZW5nYWdpbmcsIGFuZCBpbmZvcm1hdGlvbi1yaWNoIEFib3V0IFBhZ2UgdGhhdCB0ZWxscyB0aGUgc3Rvcnkgb2YgdGhlIGFnZW5jeSB3aGlsZSBidWlsZGluZyB0cnVzdC4gU3RydWN0dXJlIHRoZSBwYWdlIGFzIGZvbGxvd3M6In0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJIZXJvIC8gSW50cm8gU2VjdGlvbiJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiQm9sZCB0aXRsZSBsaWtlOiDigJxUaGUgVGVhbSBCZWhpbmQgWW91ciBEaWdpdGFsIEJyZWFrdGhyb3VnaOKAnSJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiU3ViaGVhZGluZzog4oCcV2XigJlyZSBhIER1YmFpLXJvb3RlZCBkaWdpdGFsIGFnZW5jeSBjcmFmdGluZyBmdXR1cmUtcmVhZHkgc29sdXRpb25zIHdpdGggcGFzc2lvbiwgcHJlY2lzaW9uLCBhbmQgcHVycG9zZS7igJ0ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IkluY2x1ZGUgYW4gaW1hZ2Ugb3IgYW5pbWF0ZWQgU1ZHIHRvIGh1bWFuaXplIHRoZSBzZWN0aW9uIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJPdXIgU3RvcnkifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IkEgc2hvcnQgbmFycmF0aXZlIGFib3V0IGhvdyBhbmQgd2h5IHRoaXMgYWdlbmN5IHdhcyBjcmVhdGVkIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJFbXBoYXNpemUgdGhlIG1pc3Npb246IGhlbHBpbmcgRHViYWktYmFzZWQgYnVzaW5lc3NlcyB0aHJpdmUgb25saW5lIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJPdXIgVmFsdWVzIC8gUGhpbG9zb3BoeSJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiU2hvd2Nhc2UgMy01IGNvcmUgdmFsdWVzIChlLmcuLCBJbm5vdmF0aW9uLCBJbnRlZ3JpdHksIEV4Y2VsbGVuY2UsIFJlbGlhYmlsaXR5LCBFbXBhdGh5KSJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiVXNlIGljb24gKyB0aXRsZSArIHNob3J0IGRlc2NyaXB0aW9uIGZvcm1hdCwgaWRlYWxseSBpbiBhIHJlc3BvbnNpdmUgZ3JpZCJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiU3RhdHMgLyBNaWxlc3RvbmVzIFNlY3Rpb24ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IlVzZSBhbmltYXRlZCBjb3VudGVycyAoRnJhbWVyIE1vdGlvbikgb3Igc3RhdCBjYXJkcyJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiRXhhbXBsZSBzdGF0czoifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IjUrIFByb2plY3RzIFNoaXBwZWQifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IjEwMCUgU2F0aXNmYWN0aW9uIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIyNC83IFN1cHBvcnQifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IjUgVGFyZ2V0ZWQgSW5kdXN0cmllcyJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiTWVldCB0aGUgRm91bmRlcnMgLyBUZWFtIChPcHRpb25hbCBidXQgdXNlZnVsIGV2ZW4gaWYgc29sbykifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IkFkZCBwbGFjZWhvbGRlciBwcm9maWxlKHMpIHdpdGggbmFtZSwgcm9sZSwgTGlua2VkSW4gbGluayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiRW1waGFzaXplIHlvdXIgc3RvcnkgYXMgYSBkZXZlbG9wZXItdHVybmVkLWVudHJlcHJlbmV1ciAoaWYgc29sbyBmb3VuZGVyKSJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiV2h5IFdvcmsgV2l0aCBVcyAoQ1RBIFNlY3Rpb24pIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJVc2UgYSB0ZXN0aW1vbmlhbC1zdHlsZSBhcHByb2FjaCAodGV4dCArIHN0YXJzKSBpZiBubyByZWFsIHRlc3RpbW9uaWFscyBleGlzdCB5ZXQifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IkluY2x1ZGUgYnV0dG9uIHRvIEJvb2sgYSBDYWxsIG9yIFZpc2l0IFNlcnZpY2VzIHBhZ2UifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IvCfk6YgUGFnZSBEYXRhIC8gQ29uc3RyYWludHM6In0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJVc2UgcGxhY2Vob2xkZXIgcHJvZmlsZSBpbWFnZXMgKHdl4oCZbGwgcmVwbGFjZSBsYXRlcikifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IkVuc3VyZSB0aGlzIEFib3V0IHBhZ2UgbGlua3MgYmFjayB0byBvdGhlciBzZWN0aW9ucyAoTGFuZGluZywgQ29udGFjdCwgU2VydmljZXMpIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJBbmltYXRlIHRoZSBzdGF0cyBvciBpbnRybyBlbGVtZW50cyBzdWJ0bHkgdXNpbmcgRnJhbWVyIE1vdGlvbiJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiVXNlIHNlbWFudGljIGhlYWRpbmdzLCBnb29kIGNvbnRlbnQgc3RydWN0dXJlLCBhbmQgU0VPLWZyaWVuZGx5IG1ldGFkYXRhIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJNYWludGFpbiB0aGUgc2FtZSBjb2xvciBwYWxldHRlLCBmb250IHBhaXJpbmcsIGFuZCBsYXlvdXQgY29uc2lzdGVuY3kgYXMgdGhlIExhbmRpbmcgUGFnZSJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiRG9u4oCZdCBkdXBsaWNhdGUgY29udGVudCBmcm9tIHRoZSBMYW5kaW5nIFBhZ2Ug4oCUIHRoaXMgcGFnZSBzaG91bGQgZGVlcGVuIHRoZSBicmFuZOKAmXMgc3RvcnkifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IvCfjq8gU3BlY2lhbCBOb3RlcyBmb3IgQXVnbWVudDoifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IllvdeKAmXJlIGFsbG93ZWQgdG8gaW5mZXIgdGhvdWdodGZ1bCBjb3B5IGZvciBub3cgKG1pc3Npb24sIHZhbHVlcywgZXRjLikifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IkZvY3VzIG9uIHJlYWRhYmlsaXR5LCBoaWVyYXJjaHksIGFuZCBzY3JvbGwgZmxvdyJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiTW9kdWxhcml6ZSBjb21wb25lbnRzIGxpa2UgT3VyU3RvcnkudHN4LCBWYWx1ZXMudHN4LCBTdGF0cy50c3gsIGV0Yy4ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IkFkZCBTRU8gbWV0YWRhdGEgYW5kIE9wZW4gR3JhcGggdGFncyBmb3IgQWJvdXQgUGFnZSBhcyB3ZWxsIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJDcmVhdGUgL2Fib3V0IHJvdXRlIHVzaW5nIE5leHQuanMgQXBwIFJvdXRlciB3aXRoIGEgcGFnZSBmaWxlIGF0IHNyYy9hcHAvYWJvdXQvcGFnZS50c3gifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IkRvbuKAmXQgdXNlIGxvcmVtIGlwc3VtIOKAlCB1c2UgcmVhbGlzdGljIGJ1dCBlZGl0YWJsZSBwbGFjZWhvbGRlciB0ZXh0In0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn1dfV19LCJtZW50aW9uZWRfaXRlbXMiOltdLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxOUpDRzh2UGlKQlJxYk01akFiWVU3cyIsInRvb2xfbmFtZSI6ImNvZGViYXNlLXJldHJpZXZhbCIsImlucHV0X2pzb24iOiJ7XCJpbmZvcm1hdGlvbl9yZXF1ZXN0XCI6IFwiU2hvdyBtZSB0aGUgY3VycmVudCBwcm9qZWN0IHN0cnVjdHVyZSwgZXhpc3RpbmcgY29tcG9uZW50cywgbGF5b3V0IGZpbGVzLCBhbmQgc3R5bGluZyBwYXR0ZXJucyB1c2VkIGluIHRoZSBsYW5kaW5nIHBhZ2UuIEkgbmVlZCB0byB1bmRlcnN0YW5kIHRoZSBjb2xvciBwYWxldHRlLCB0eXBvZ3JhcGh5LCBjb21wb25lbnQgb3JnYW5pemF0aW9uLCBhbmQgYW55IGV4aXN0aW5nIHNoYXJlZCBjb21wb25lbnRzIG9yIHV0aWxpdGllcy5cIn0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJJJ2xsIGhlbHAgeW91IGNyZWF0ZSBhIGNvbXByZWhlbnNpdmUgQWJvdXQgVXMgcGFnZSBmb3IgeW91ciBEdWJhaS1iYXNlZCBkaWdpdGFsIGFnZW5jeS4gTGV0IG1lIHN0YXJ0IGJ5IGdhdGhlcmluZyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY3VycmVudCBjb2RlYmFzZSBzdHJ1Y3R1cmUgYW5kIGV4aXN0aW5nIGNvbXBvbmVudHMgdG8gbWFpbnRhaW4gY29uc2lzdGVuY3kuXG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjowLCJ0eXBlIjowLCJ0ZXh0X25vZGUiOnsiY29udGVudCI6IkZvbGxvdy1VcCBQcm9tcHQgZm9yIEF1Z21lbnQg4oCUIEFib3V0IFBhZ2UgKFBhZ2UgMiBvZiBBZ2VuY3kgV2Vic2l0ZSlcbvCflKcgUHJvamVjdCBEZXRhaWwgQ29udGV4dCAoSW5oZXJpdGVkKTpcblRoaXMgaXMgcGFydCBvZiBhIG11bHRpLXBhZ2UgYWdlbmN5IHdlYnNpdGUgZm9yIGEgbmV3IER1YmFpLWJhc2VkIGRpZ2l0YWwgYWdlbmN5IG9mZmVyaW5nIGN1c3RvbSB3ZWJzaXRlcywgbGFuZGluZyBwYWdlcywgYW5kIHNvZnR3YXJlIHNvbHV0aW9ucyBhY3Jvc3MgYm9vbWluZyBzZWN0b3JzIGxpa2UgUmVhbCBFc3RhdGUsIEUtY29tbWVyY2UsIEhlYWx0aCAmIFdlbGxuZXNzLCBUb3VyaXNtLCBhbmQgRmludGVjaC5cbkJ1aWx0IHVzaW5nIE5leHQuanMgKEFwcCBSb3V0ZXIpLCBUYWlsd2luZENTUywgRnJhbWVyIE1vdGlvbiwgVHlwZVNjcmlwdCwgYW5kIGRlcGxveWVkIG9uIFZlcmNlbC4gVGhlIHRvbmUgaXMgcHJvZmVzc2lvbmFsIHlldCBtb2Rlcm4sIHdpdGggc21vb3RoIGFuaW1hdGlvbnMgYW5kIHBlcmZvcm1hbmNlIGluIG1pbmQuXG5cblRoaXMgaXMgUGFnZSAyOiBBYm91dCBVcy4gVGhlIExhbmRpbmcgUGFnZSBpcyBhbHJlYWR5IGltcGxlbWVudGVkLlxuXG7wn5OEIFBhZ2UgRGVzaWduIChBYm91dCBVcyBQYWdlKTpcblxuQ3JlYXRlIGEgaGlnaGx5IHZpc3VhbCwgZW5nYWdpbmcsIGFuZCBpbmZvcm1hdGlvbi1yaWNoIEFib3V0IFBhZ2UgdGhhdCB0ZWxscyB0aGUgc3Rvcnkgb2YgdGhlIGFnZW5jeSB3aGlsZSBidWlsZGluZyB0cnVzdC4gU3RydWN0dXJlIHRoZSBwYWdlIGFzIGZvbGxvd3M6XG5cbkhlcm8gLyBJbnRybyBTZWN0aW9uXG5cbkJvbGQgdGl0bGUgbGlrZTog4oCcVGhlIFRlYW0gQmVoaW5kIFlvdXIgRGlnaXRhbCBCcmVha3Rocm91Z2jigJ1cblxuU3ViaGVhZGluZzog4oCcV2XigJlyZSBhIER1YmFpLXJvb3RlZCBkaWdpdGFsIGFnZW5jeSBjcmFmdGluZyBmdXR1cmUtcmVhZHkgc29sdXRpb25zIHdpdGggcGFzc2lvbiwgcHJlY2lzaW9uLCBhbmQgcHVycG9zZS7igJ1cblxuSW5jbHVkZSBhbiBpbWFnZSBvciBhbmltYXRlZCBTVkcgdG8gaHVtYW5pemUgdGhlIHNlY3Rpb25cblxuT3VyIFN0b3J5XG5cbkEgc2hvcnQgbmFycmF0aXZlIGFib3V0IGhvdyBhbmQgd2h5IHRoaXMgYWdlbmN5IHdhcyBjcmVhdGVkXG5cbkVtcGhhc2l6ZSB0aGUgbWlzc2lvbjogaGVscGluZyBEdWJhaS1iYXNlZCBidXNpbmVzc2VzIHRocml2ZSBvbmxpbmVcblxuT3VyIFZhbHVlcyAvIFBoaWxvc29waHlcblxuU2hvd2Nhc2UgMy01IGNvcmUgdmFsdWVzIChlLmcuLCBJbm5vdmF0aW9uLCBJbnRlZ3JpdHksIEV4Y2VsbGVuY2UsIFJlbGlhYmlsaXR5LCBFbXBhdGh5KVxuXG5Vc2UgaWNvbiArIHRpdGxlICsgc2hvcnQgZGVzY3JpcHRpb24gZm9ybWF0LCBpZGVhbGx5IGluIGEgcmVzcG9uc2l2ZSBncmlkXG5cblN0YXRzIC8gTWlsZXN0b25lcyBTZWN0aW9uXG5cblVzZSBhbmltYXRlZCBjb3VudGVycyAoRnJhbWVyIE1vdGlvbikgb3Igc3RhdCBjYXJkc1xuXG5FeGFtcGxlIHN0YXRzOlxuXG41KyBQcm9qZWN0cyBTaGlwcGVkXG5cbjEwMCUgU2F0aXNmYWN0aW9uXG5cbjI0LzcgU3VwcG9ydFxuXG41IFRhcmdldGVkIEluZHVzdHJpZXNcblxuTWVldCB0aGUgRm91bmRlcnMgLyBUZWFtIChPcHRpb25hbCBidXQgdXNlZnVsIGV2ZW4gaWYgc29sbylcblxuQWRkIHBsYWNlaG9sZGVyIHByb2ZpbGUocykgd2l0aCBuYW1lLCByb2xlLCBMaW5rZWRJbiBsaW5rXG5cbkVtcGhhc2l6ZSB5b3VyIHN0b3J5IGFzIGEgZGV2ZWxvcGVyLXR1cm5lZC1lbnRyZXByZW5ldXIgKGlmIHNvbG8gZm91bmRlcilcblxuV2h5IFdvcmsgV2l0aCBVcyAoQ1RBIFNlY3Rpb24pXG5cblVzZSBhIHRlc3RpbW9uaWFsLXN0eWxlIGFwcHJvYWNoICh0ZXh0ICsgc3RhcnMpIGlmIG5vIHJlYWwgdGVzdGltb25pYWxzIGV4aXN0IHlldFxuXG5JbmNsdWRlIGJ1dHRvbiB0byBCb29rIGEgQ2FsbCBvciBWaXNpdCBTZXJ2aWNlcyBwYWdlXG5cbvCfk6YgUGFnZSBEYXRhIC8gQ29uc3RyYWludHM6XG5cblVzZSBwbGFjZWhvbGRlciBwcm9maWxlIGltYWdlcyAod2XigJlsbCByZXBsYWNlIGxhdGVyKVxuXG5FbnN1cmUgdGhpcyBBYm91dCBwYWdlIGxpbmtzIGJhY2sgdG8gb3RoZXIgc2VjdGlvbnMgKExhbmRpbmcsIENvbnRhY3QsIFNlcnZpY2VzKVxuXG5BbmltYXRlIHRoZSBzdGF0cyBvciBpbnRybyBlbGVtZW50cyBzdWJ0bHkgdXNpbmcgRnJhbWVyIE1vdGlvblxuXG5Vc2Ugc2VtYW50aWMgaGVhZGluZ3MsIGdvb2QgY29udGVudCBzdHJ1Y3R1cmUsIGFuZCBTRU8tZnJpZW5kbHkgbWV0YWRhdGFcblxuTWFpbnRhaW4gdGhlIHNhbWUgY29sb3IgcGFsZXR0ZSwgZm9udCBwYWlyaW5nLCBhbmQgbGF5b3V0IGNvbnNpc3RlbmN5IGFzIHRoZSBMYW5kaW5nIFBhZ2VcblxuRG9u4oCZdCBkdXBsaWNhdGUgY29udGVudCBmcm9tIHRoZSBMYW5kaW5nIFBhZ2Ug4oCUIHRoaXMgcGFnZSBzaG91bGQgZGVlcGVuIHRoZSBicmFuZOKAmXMgc3Rvcnlcblxu8J+OryBTcGVjaWFsIE5vdGVzIGZvciBBdWdtZW50OlxuXG5Zb3XigJlyZSBhbGxvd2VkIHRvIGluZmVyIHRob3VnaHRmdWwgY29weSBmb3Igbm93IChtaXNzaW9uLCB2YWx1ZXMsIGV0Yy4pXG5cbkZvY3VzIG9uIHJlYWRhYmlsaXR5LCBoaWVyYXJjaHksIGFuZCBzY3JvbGwgZmxvd1xuXG5Nb2R1bGFyaXplIGNvbXBvbmVudHMgbGlrZSBPdXJTdG9yeS50c3gsIFZhbHVlcy50c3gsIFN0YXRzLnRzeCwgZXRjLlxuXG5BZGQgU0VPIG1ldGFkYXRhIGFuZCBPcGVuIEdyYXBoIHRhZ3MgZm9yIEFib3V0IFBhZ2UgYXMgd2VsbFxuXG5DcmVhdGUgL2Fib3V0IHJvdXRlIHVzaW5nIE5leHQuanMgQXBwIFJvdXRlciB3aXRoIGEgcGFnZSBmaWxlIGF0IHNyYy9hcHAvYWJvdXQvcGFnZS50c3hcblxuRG9u4oCZdCB1c2UgbG9yZW0gaXBzdW0g4oCUIHVzZSByZWFsaXN0aWMgYnV0IGVkaXRhYmxlIHBsYWNlaG9sZGVyIHRleHRcblxuIn19LHsiaWQiOjEsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiQzovVXNlcnMvZGF0YW0vRGVza3RvcC9hcmFiaXRlcyIsImZvbGRlclJvb3QiOiJDOi9Vc2Vycy9kYXRhbS9EZXNrdG9wL2FyYWJpdGVzIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0yN1QyMTozMTo0OC4yNTNaIiwicmVzcG9uc2VfdGV4dCI6IkknbGwgaGVscCB5b3UgY3JlYXRlIGEgY29tcHJlaGVuc2l2ZSBBYm91dCBVcyBwYWdlIGZvciB5b3VyIER1YmFpLWJhc2VkIGRpZ2l0YWwgYWdlbmN5LiBMZXQgbWUgc3RhcnQgYnkgZ2F0aGVyaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50IGNvZGViYXNlIHN0cnVjdHVyZSBhbmQgZXhpc3RpbmcgY29tcG9uZW50cyB0byBtYWludGFpbiBjb25zaXN0ZW5jeS5cbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJhMzQwNzUwZC01Zjg1LTQ1MDEtODIxOC03ZmExNmYxYjg2ZDEiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxU0Y3cXZlakN4RUZ3Wjc5aXQ3Tkg4eiIsInRvb2xfbmFtZSI6ImNvZGViYXNlLXJldHJpZXZhbCIsImlucHV0X2pzb24iOiJ7XCJpbmZvcm1hdGlvbl9yZXF1ZXN0XCI6IFwiU2hvdyBtZSB0aGUgZXhpc3RpbmcgQWJvdXQgc2VjdGlvbiBjb21wb25lbnQsIG5hdmlnYXRpb24gY29tcG9uZW50cywgYW5kIGFueSBzaGFyZWQgbGF5b3V0IGNvbXBvbmVudHMuIEFsc28gc2hvdyBtZSB0aGUgY3VycmVudCBmb2xkZXIgc3RydWN0dXJlIGZvciBjb21wb25lbnRzIGFuZCBhbnkgZXhpc3RpbmcgdXRpbGl0eSBmdW5jdGlvbnMgZm9yIGFuaW1hdGlvbnMgb3IgaWNvbnMuXCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTm93IGxldCBtZSBjaGVjayBmb3IgYW55IGV4aXN0aW5nIG5hdmlnYXRpb24gY29tcG9uZW50cyBhbmQgdGhlIGN1cnJlbnQgQWJvdXQgc2VjdGlvbiB0byB1bmRlcnN0YW5kIHdoYXQncyBhbHJlYWR5IGltcGxlbWVudGVkOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogc3JjL2FwcC9sYXlvdXQudHN4XG4gICAgIDFcdGltcG9ydCB0eXBlIHsgTWV0YWRhdGEgfSBmcm9tIFwibmV4dFwiO1xuICAgICAyXHRpbXBvcnQgeyBJbnRlciwgUGxheWZhaXJfRGlzcGxheSB9IGZyb20gXCJuZXh0L2ZvbnQvZ29vZ2xlXCI7XG4gICAgIDNcdGltcG9ydCB7IEFuYWx5dGljcyB9IGZyb20gXCJAdmVyY2VsL2FuYWx5dGljcy9yZWFjdFwiO1xuICAgICA0XHRpbXBvcnQgXCIuL2dsb2JhbHMuY3NzXCI7XG4gICAgIDVcdFxuICAgICA2XHRjb25zdCBpbnRlciA9IEludGVyKHtcbiAgICAgN1x0ICB2YXJpYWJsZTogXCItLWZvbnQtaW50ZXJcIixcbiAgICAgOFx0ICBzdWJzZXRzOiBbXCJsYXRpblwiXSxcbiAgICAgOVx0ICBkaXNwbGF5OiBcInN3YXBcIixcbiAgICAxMFx0fSk7XG4gICAgMTFcdFxuICAgIDEyXHRjb25zdCBwbGF5ZmFpciA9IFBsYXlmYWlyX0Rpc3BsYXkoe1xuICAgIDEzXHQgIHZhcmlhYmxlOiBcIi0tZm9udC1wbGF5ZmFpclwiLFxuICAgIDE0XHQgIHN1YnNldHM6IFtcImxhdGluXCJdLFxuICAgIDE1XHQgIGRpc3BsYXk6IFwic3dhcFwiLFxuICAgIDE2XHR9KTtcbiAgICAxN1x0XG4gICAgMThcdGV4cG9ydCBjb25zdCBtZXRhZGF0YTogTWV0YWRhdGEgPSB7XG4gICAgMTlcdCAgdGl0bGU6IFwiQXJhYml0ZXMgRGlnaXRhbCBBZ2VuY3kgfCBDdXN0b20gV2Vic2l0ZXMgJiBTb2Z0d2FyZSBTb2x1dGlvbnMgaW4gRHViYWlcIixcbiAgICAyMFx0ICBkZXNjcmlwdGlvbjogXCJMZWFkaW5nIGRpZ2l0YWwgYWdlbmN5IGluIER1YmFpIHNwZWNpYWxpemluZyBpbiBjdXN0b20gd2Vic2l0ZXMsIGxhbmRpbmcgcGFnZXMsIGFuZCBzb2Z0d2FyZSBzb2x1dGlvbnMgZm9yIHJlYWwgZXN0YXRlLCBlLWNvbW1lcmNlLCB3ZWxsbmVzcywgdG91cmlzbSwgYW5kIGZpbnRlY2ggYnVzaW5lc3Nlcy5cIixcbiAgICAyMVx0ICBrZXl3b3JkczogXCJEdWJhaSBkaWdpdGFsIGFnZW5jeSwgY3VzdG9tIHdlYnNpdGVzIER1YmFpLCBsYW5kaW5nIHBhZ2VzIER1YmFpLCBzb2Z0d2FyZSBkZXZlbG9wbWVudCBEdWJhaSwgcmVhbCBlc3RhdGUgd2Vic2l0ZXMsIGUtY29tbWVyY2Ugc29sdXRpb25zXCIsXG4gICAgMjJcdCAgYXV0aG9yczogW3sgbmFtZTogXCJBcmFiaXRlcyBEaWdpdGFsIEFnZW5jeVwiIH1dLFxuICAgIDIzXHQgIGNyZWF0b3I6IFwiQXJhYml0ZXMgRGlnaXRhbCBBZ2VuY3lcIixcbiAgICAyNFx0ICBwdWJsaXNoZXI6IFwiQXJhYml0ZXMgRGlnaXRhbCBBZ2VuY3lcIixcbiAgICAyNVx0ICBtZXRhZGF0YUJhc2U6IG5ldyBVUkwoXCJodHRwczovL2FyYWJpdGVzLmNvbVwiKSxcbiAgICAyNlx0ICBvcGVuR3JhcGg6IHtcbiAgICAyN1x0ICAgIHR5cGU6IFwid2Vic2l0ZVwiLFxuICAgIDI4XHQgICAgbG9jYWxlOiBcImVuX1VTXCIsXG4gICAgMjlcdCAgICB1cmw6IFwiaHR0cHM6Ly9hcmFiaXRlcy5jb21cIixcbiAgICAzMFx0ICAgIHRpdGxlOiBcIkFyYWJpdGVzIERpZ2l0YWwgQWdlbmN5IHwgQ3VzdG9tIFdlYnNpdGVzICYgU29mdHdhcmUgU29sdXRpb25zIGluIER1YmFpXCIsXG4gICAgMzFcdCAgICBkZXNjcmlwdGlvbjogXCJMZWFkaW5nIGRpZ2l0YWwgYWdlbmN5IGluIER1YmFpIHNwZWNpYWxpemluZyBpbiBjdXN0b20gd2Vic2l0ZXMsIGxhbmRpbmcgcGFnZXMsIGFuZCBzb2Z0d2FyZSBzb2x1dGlvbnMgZm9yIHJlYWwgZXN0YXRlLCBlLWNvbW1lcmNlLCB3ZWxsbmVzcywgdG91cmlzbSwgYW5kIGZpbnRlY2ggYnVzaW5lc3Nlcy5cIixcbiAgICAzMlx0ICAgIHNpdGVOYW1lOiBcIkFyYWJpdGVzIERpZ2l0YWwgQWdlbmN5XCIsXG4gICAgMzNcdCAgICBpbWFnZXM6IFtcbiAgICAzNFx0ICAgICAge1xuICAgIDM1XHQgICAgICAgIHVybDogXCIvb2ctaW1hZ2UuanBnXCIsXG4gICAgMzZcdCAgICAgICAgd2lkdGg6IDEyMDAsXG4gICAgMzdcdCAgICAgICAgaGVpZ2h0OiA2MzAsXG4gICAgMzhcdCAgICAgICAgYWx0OiBcIkFyYWJpdGVzIERpZ2l0YWwgQWdlbmN5IC0gRHViYWkncyBQcmVtaWVyIFdlYiBEZXZlbG9wbWVudCBDb21wYW55XCIsXG4gICAgMzlcdCAgICAgIH0sXG4gICAgNDBcdCAgICBdLFxuICAgIDQxXHQgIH0sXG4uLi5cbiAgICA2MFx0XG4gICAgNjFcdGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFJvb3RMYXlvdXQoe1xuICAgIDYyXHQgIGNoaWxkcmVuLFxuICAgIDYzXHR9OiBSZWFkb25seTx7XG4gICAgNjRcdCAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZTtcbiAgICA2NVx0fT4pIHtcbiAgICA2Nlx0ICByZXR1cm4gKFxuICAgIDY3XHQgICAgPGh0bWwgbGFuZz1cImVuXCIgY2xhc3NOYW1lPVwic2Nyb2xsLXNtb290aFwiPlxuICAgIDY4XHQgICAgICA8Ym9keVxuICAgIDY5XHQgICAgICAgIGNsYXNzTmFtZT17YCR7aW50ZXIudmFyaWFibGV9ICR7cGxheWZhaXIudmFyaWFibGV9IGZvbnQtc2FucyBhbnRpYWxpYXNlZCBiZy13aGl0ZSB0ZXh0LWdyYXktOTAwYH1cbiAgICA3MFx0ICAgICAgPlxuICAgIDcxXHQgICAgICAgIHtjaGlsZHJlbn1cbiAgICA3Mlx0ICAgICAgICA8QW5hbHl0aWNzIC8+XG4gICAgNzNcdCAgICAgIDwvYm9keT5cbiAgICA3NFx0ICAgIDwvaHRtbD5cbiAgICA3NVx0ICApO1xuICAgIDc2XHR9XG4uLi5cblBhdGg6IHNyYy9hcHAvZ2xvYmFscy5jc3NcbiAgICAgMVx0QGltcG9ydCBcInRhaWx3aW5kY3NzXCI7XG4gICAgIDJcdFxuICAgICAzXHQ6cm9vdCB7XG4gICAgIDRcdCAgLyogRHViYWktaW5zcGlyZWQgcHJvZmVzc2lvbmFsIGNvbG9yIHBhbGV0dGUgKi9cbiAgICAgNVx0ICAtLXByaW1hcnk6ICMxZTQwYWY7IC8qIERlZXAgYmx1ZSAtIHRydXN0IGFuZCBwcm9mZXNzaW9uYWxpc20gKi9cbiAgICAgNlx0ICAtLXByaW1hcnktZGFyazogIzFlM2E4YTtcbiAgICAgN1x0ICAtLXNlY29uZGFyeTogI2Y1OWUwYjsgLyogR29sZCAtIGx1eHVyeSBhbmQgc3VjY2VzcyAqL1xuICAgICA4XHQgIC0tc2Vjb25kYXJ5LWRhcms6ICNkOTc3MDY7XG4gICAgIDlcdCAgLS1hY2NlbnQ6ICMwNmI2ZDQ7IC8qIEN5YW4gLSBpbm5vdmF0aW9uIGFuZCB0ZWNobm9sb2d5ICovXG4gICAgMTBcdCAgLS1uZXV0cmFsLTUwOiAjZjhmYWZjO1xuICAgIDExXHQgIC0tbmV1dHJhbC0xMDA6ICNmMWY1Zjk7XG4gICAgMTJcdCAgLS1uZXV0cmFsLTIwMDogI2UyZThmMDtcbiAgICAxM1x0ICAtLW5ldXRyYWwtMzAwOiAjY2JkNWUxO1xuICAgIDE0XHQgIC0tbmV1dHJhbC00MDA6ICM5NGEzYjg7XG4gICAgMTVcdCAgLS1uZXV0cmFsLTUwMDogIzY0NzQ4YjtcbiAgICAxNlx0ICAtLW5ldXRyYWwtNjAwOiAjNDc1NTY5O1xuICAgIDE3XHQgIC0tbmV1dHJhbC03MDA6ICMzMzQxNTU7XG4gICAgMThcdCAgLS1uZXV0cmFsLTgwMDogIzFlMjkzYjtcbiAgICAxOVx0ICAtLW5ldXRyYWwtOTAwOiAjMGYxNzJhO1xuICAgIDIwXHR9XG4gICAgMjFcdFxuICAgIDIyXHRAdGhlbWUgaW5saW5lIHtcbiAgICAyM1x0ICAtLWZvbnQtc2FuczogdmFyKC0tZm9udC1pbnRlcik7XG4gICAgMjRcdCAgLS1mb250LXNlcmlmOiB2YXIoLS1mb250LXBsYXlmYWlyKTtcbiAgICAyNVx0XG4gICAgMjZcdCAgLyogQ3VzdG9tIGNvbG9yIHRva2VucyAqL1xuICAgIDI3XHQgIC0tY29sb3ItcHJpbWFyeTogdmFyKC0tcHJpbWFyeSk7XG4gICAgMjhcdCAgLS1jb2xvci1wcmltYXJ5LWRhcms6IHZhcigtLXByaW1hcnktZGFyayk7XG4gICAgMjlcdCAgLS1jb2xvci1zZWNvbmRhcnk6IHZhcigtLXNlY29uZGFyeSk7XG4gICAgMzBcdCAgLS1jb2xvci1zZWNvbmRhcnktZGFyazogdmFyKC0tc2Vjb25kYXJ5LWRhcmspO1xuICAgIDMxXHQgIC0tY29sb3ItYWNjZW50OiB2YXIoLS1hY2NlbnQpO1xuICAgIDMyXHRcbiAgICAzM1x0ICAvKiBOZXV0cmFsIHNjYWxlICovXG4gICAgMzRcdCAgLS1jb2xvci1uZXV0cmFsLTUwOiB2YXIoLS1uZXV0cmFsLTUwKTtcbiAgICAzNVx0ICAtLWNvbG9yLW5ldXRyYWwtMTAwOiB2YXIoLS1uZXV0cmFsLTEwMCk7XG4gICAgMzZcdCAgLS1jb2xvci1uZXV0cmFsLTIwMDogdmFyKC0tbmV1dHJhbC0yMDApO1xuICAgIDM3XHQgIC0tY29sb3ItbmV1dHJhbC0zMDA6IHZhcigtLW5ldXRyYWwtMzAwKTtcbiAgICAzOFx0ICAtLWNvbG9yLW5ldXRyYWwtNDAwOiB2YXIoLS1uZXV0cmFsLTQwMCk7XG4gICAgMzlcdCAgLS1jb2xvci1uZXV0cmFsLTUwMDogdmFyKC0tbmV1dHJhbC01MDApO1xuICAgIDQwXHQgIC0tY29sb3ItbmV1dHJhbC02MDA6IHZhcigtLW5ldXRyYWwtNjAwKTtcbiAgICA0MVx0ICAtLWNvbG9yLW5ldXRyYWwtNzAwOiB2YXIoLS1uZXV0cmFsLTcwMCk7XG4gICAgNDJcdCAgLS1jb2xvci1uZXV0cmFsLTgwMDogdmFyKC0tbmV1dHJhbC04MDApO1xuICAgIDQzXHQgIC0tY29sb3ItbmV1dHJhbC05MDA6IHZhcigtLW5ldXRyYWwtOTAwKTtcbiAgICA0NFx0fVxuICAgIDQ1XHRcbiAgICA0Nlx0LyogU21vb3RoIHNjcm9sbGluZyBhbmQgYmFzZSBzdHlsZXMgKi9cbiAgICA0N1x0aHRtbCB7XG4gICAgNDhcdCAgc2Nyb2xsLWJlaGF2aW9yOiBzbW9vdGg7XG4gICAgNDlcdH1cbiAgICA1MFx0XG4gICAgNTFcdGJvZHkge1xuICAgIDUyXHQgIGZvbnQtZmFtaWx5OiB2YXIoLS1mb250LWludGVyKSwgc3lzdGVtLXVpLCBzYW5zLXNlcmlmO1xuICAgIDUzXHQgIGxpbmUtaGVpZ2h0OiAxLjY7XG4gICAgNTRcdCAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gICAgNTVcdCAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcbiAgICA1Nlx0fVxuICAgIDU3XHRcbiAgICA1OFx0LyogQ3VzdG9tIHNjcm9sbGJhciAqL1xuICAgIDU5XHQ6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcbiAgICA2MFx0ICB3aWR0aDogOHB4O1xuICAgIDYxXHR9XG4gICAgNjJcdFxuICAgIDYzXHQ6Oi13ZWJraXQtc2Nyb2xsYmFyLXRyYWNrIHtcbiAgICA2NFx0ICBiYWNrZ3JvdW5kOiB2YXIoLS1uZXV0cmFsLTEwMCk7XG4gICAgNjVcdH1cbiAgICA2Nlx0XG4gICAgNjdcdDo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIge1xuICAgIDY4XHQgIGJhY2tncm91bmQ6IHZhcigtLW5ldXRyYWwtNDAwKTtcbiAgICA2OVx0ICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgNzBcdH1cbiAgICA3MVx0XG4gICAgNzJcdDo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWI6aG92ZXIge1xuICAgIDczXHQgIGJhY2tncm91bmQ6IHZhcigtLW5ldXRyYWwtNTAwKTtcbiAgICA3NFx0fVxuICAgIDc1XHRcbiAgICA3Nlx0LyogRm9jdXMgc3R5bGVzIGZvciBhY2Nlc3NpYmlsaXR5ICovXG4gICAgNzdcdC5mb2N1cy12aXNpYmxlIHtcbiAgICA3OFx0ICBvdXRsaW5lOiAycHggc29saWQgdmFyKC0tcHJpbWFyeSk7XG4gICAgNzlcdCAgb3V0bGluZS1vZmZzZXQ6IDJweDtcbiAgICA4MFx0fVxuICAgIDgxXHRcbiAgICA4Mlx0LyogR3JhZGllbnQgYmFja2dyb3VuZHMgKi9cbiAgICA4M1x0LmdyYWRpZW50LXByaW1hcnkge1xuICAgIDg0XHQgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxMzVkZWcsIHZhcigtLXByaW1hcnkpIDAlLCB2YXIoLS1wcmltYXJ5LWRhcmspIDEwMCUpO1xuICAgIDg1XHR9XG4uLi5cblBhdGg6IHNyYy9jb21wb25lbnRzL3NlY3Rpb25zL0hlcm8udHN4XG4gICAgIDFcdFwidXNlIGNsaWVudFwiO1xuICAgICAyXHRcbiAgICAgM1x0aW1wb3J0IHsgbW90aW9uIH0gZnJvbSBcImZyYW1lci1tb3Rpb25cIjtcbiAgICAgNFx0aW1wb3J0IHsgQnV0dG9uIH0gZnJvbSBcIkAvY29tcG9uZW50cy91aS9CdXR0b25cIjtcbiAgICAgNVx0aW1wb3J0IHsgQXJyb3dSaWdodCwgUGxheSB9IGZyb20gXCJsdWNpZGUtcmVhY3RcIjtcbiAgICAgNlx0XG4gICAgIDdcdGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEhlcm8oKSB7XG4gICAgIDhcdCAgcmV0dXJuIChcbiAgICAgOVx0ICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cInJlbGF0aXZlIG1pbi1oLXNjcmVlbiBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciBvdmVyZmxvdy1oaWRkZW4gYmctZ3JhZGllbnQtdG8tYnIgZnJvbS1bdmFyKC0tbmV1dHJhbC01MCldIHZpYS13aGl0ZSB0by1bdmFyKC0tbmV1dHJhbC0xMDApXVwiPlxuICAgIDEwXHQgICAgICB7LyogQmFja2dyb3VuZCBQYXR0ZXJuICovfVxuICAgIDExXHQgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFic29sdXRlIGluc2V0LTAgb3BhY2l0eS01XCI+XG4gICAgMTJcdCAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhYnNvbHV0ZSBpbnNldC0wXCIgc3R5bGU9e3tcbiAgICAxM1x0ICAgICAgICAgIGJhY2tncm91bmRJbWFnZTogYHJhZGlhbC1ncmFkaWVudChjaXJjbGUgYXQgMjUlIDI1JSwgdmFyKC0tcHJpbWFyeSkgMnB4LCB0cmFuc3BhcmVudCAycHgpLFxuICAgIDE0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICByYWRpYWwtZ3JhZGllbnQoY2lyY2xlIGF0IDc1JSA3NSUsIHZhcigtLXNlY29uZGFyeSkgMnB4LCB0cmFuc3BhcmVudCAycHgpYCxcbiAgICAxNVx0ICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnNjBweCA2MHB4J1xuICAgIDE2XHQgICAgICAgIH19IC8+XG4gICAgMTdcdCAgICAgIDwvZGl2PlxuLi4uXG4gICAgODJcdFxuICAgIDgzXHQgICAgICAgICAgey8qIENUQSBCdXR0b25zICovfVxuICAgIDg0XHQgICAgICAgICAgPG1vdGlvbi5kaXZcbiAgICA4NVx0ICAgICAgICAgICAgaW5pdGlhbD17eyBvcGFjaXR5OiAwLCB5OiAzMCB9fVxuICAgIDg2XHQgICAgICAgICAgICBhbmltYXRlPXt7IG9wYWNpdHk6IDEsIHk6IDAgfX1cbiAgICA4N1x0ICAgICAgICAgICAgdHJhbnNpdGlvbj17eyBkdXJhdGlvbjogMC44LCBkZWxheTogMC42IH19XG4gICAgODhcdCAgICAgICAgICAgIGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgc206ZmxleC1yb3cgZ2FwLTQganVzdGlmeS1jZW50ZXIgaXRlbXMtY2VudGVyXCJcbiAgICA4OVx0ICAgICAgICAgID5cbiAgICA5MFx0ICAgICAgICAgICAgPEJ1dHRvblxuICAgIDkxXHQgICAgICAgICAgICAgIHNpemU9XCJsZ1wiXG4gICAgOTJcdCAgICAgICAgICAgICAgdmFyaWFudD1cInByaW1hcnlcIlxuICAgIDkzXHQgICAgICAgICAgICAgIGhyZWY9XCIjY29udGFjdFwiXG4gICAgOTRcdCAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZ3JvdXBcIlxuICAgIDk1XHQgICAgICAgICAgICA+XG4gICAgOTZcdCAgICAgICAgICAgICAgQm9vayBGcmVlIENvbnN1bHRhdGlvblxuICAgIDk3XHQgICAgICAgICAgICAgIDxBcnJvd1JpZ2h0IGNsYXNzTmFtZT1cIm1sLTIgaC01IHctNSB0cmFuc2l0aW9uLXRyYW5zZm9ybSBncm91cC1ob3Zlcjp0cmFuc2xhdGUteC0xXCIgLz5cbiAgICA5OFx0ICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgOTlcdCAgICAgICAgICAgIFxuICAgMTAwXHQgICAgICAgICAgICA8QnV0dG9uXG4gICAxMDFcdCAgICAgICAgICAgICAgc2l6ZT1cImxnXCJcbiAgIDEwMlx0ICAgICAgICAgICAgICB2YXJpYW50PVwib3V0bGluZVwiXG4gICAxMDNcdCAgICAgICAgICAgICAgaHJlZj1cIiNwb3J0Zm9saW9cIlxuICAgMTA0XHQgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImdyb3VwXCJcbiAgIDEwNVx0ICAgICAgICAgICAgPlxuICAgMTA2XHQgICAgICAgICAgICAgIDxQbGF5IGNsYXNzTmFtZT1cIm1yLTIgaC01IHctNVwiIC8+XG4gICAxMDdcdCAgICAgICAgICAgICAgU2VlIE91ciBXb3JrXG4gICAxMDhcdCAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgMTA5XHQgICAgICAgICAgPC9tb3Rpb24uZGl2PlxuLi4uXG5QYXRoOiBSRUFETUUubWRcbiAgICAgMVx0VGhpcyBpcyBhIFtOZXh0LmpzXShodHRwczovL25leHRqcy5vcmcpIHByb2plY3QgYm9vdHN0cmFwcGVkIHdpdGggW2BjcmVhdGUtbmV4dC1hcHBgXShodHRwczovL25leHRqcy5vcmcvZG9jcy9hcHAvYXBpLXJlZmVyZW5jZS9jbGkvY3JlYXRlLW5leHQtYXBwKS5cbiAgICAgMlx0XG4gICAgIDNcdCMjIEdldHRpbmcgU3RhcnRlZFxuICAgICA0XHRcbiAgICAgNVx0Rmlyc3QsIHJ1biB0aGUgZGV2ZWxvcG1lbnQgc2VydmVyOlxuICAgICA2XHRcbiAgICAgN1x0YGBgYmFzaFxuICAgICA4XHRucG0gcnVuIGRldlxuICAgICA5XHQjIG9yXG4gICAgMTBcdHlhcm4gZGV2XG4gICAgMTFcdCMgb3JcbiAgICAxMlx0cG5wbSBkZXZcbiAgICAxM1x0IyBvclxuICAgIDE0XHRidW4gZGV2XG4gICAgMTVcdGBgYFxuICAgIDE2XHRcbiAgICAxN1x0T3BlbiBbaHR0cDovL2xvY2FsaG9zdDozMDAwXShodHRwOi8vbG9jYWxob3N0OjMwMDApIHdpdGggeW91ciBicm93c2VyIHRvIHNlZSB0aGUgcmVzdWx0LlxuICAgIDE4XHRcbiAgICAxOVx0WW91IGNhbiBzdGFydCBlZGl0aW5nIHRoZSBwYWdlIGJ5IG1vZGlmeWluZyBgYXBwL3BhZ2UudHN4YC4gVGhlIHBhZ2UgYXV0by11cGRhdGVzIGFzIHlvdSBlZGl0IHRoZSBmaWxlLlxuICAgIDIwXHRcbiAgICAyMVx0VGhpcyBwcm9qZWN0IHVzZXMgW2BuZXh0L2ZvbnRgXShodHRwczovL25leHRqcy5vcmcvZG9jcy9hcHAvYnVpbGRpbmcteW91ci1hcHBsaWNhdGlvbi9vcHRpbWl6aW5nL2ZvbnRzKSB0byBhdXRvbWF0aWNhbGx5IG9wdGltaXplIGFuZCBsb2FkIFtHZWlzdF0oaHR0cHM6Ly92ZXJjZWwuY29tL2ZvbnQpLCBhIG5ldyBmb250IGZhbWlseSBmb3IgVmVyY2VsLlxuICAgIDIyXHRcbiAgICAyM1x0IyMgTGVhcm4gTW9yZVxuICAgIDI0XHRcbiAgICAyNVx0VG8gbGVhcm4gbW9yZSBhYm91dCBOZXh0LmpzLCB0YWtlIGEgbG9vayBhdCB0aGUgZm9sbG93aW5nIHJlc291cmNlczpcbi4uLlxuUGF0aDogc3JjL2NvbXBvbmVudHMvc2VjdGlvbnMvQ1RBLnRzeFxuLi4uXG4gICAgIDZcdFxuICAgICA3XHRleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDVEEoKSB7XG4gICAgIDhcdCAgcmV0dXJuIChcbiAgICAgOVx0ICAgIDxzZWN0aW9uIGlkPVwiY29udGFjdFwiIGNsYXNzTmFtZT1cInB5LTIwIGxnOnB5LTMyIGJnLWdyYWRpZW50LXRvLWJyIGZyb20tW3ZhcigtLXByaW1hcnkpXSB2aWEtW3ZhcigtLWFjY2VudCldIHRvLVt2YXIoLS1zZWNvbmRhcnkpXSByZWxhdGl2ZSBvdmVyZmxvdy1oaWRkZW5cIj5cbiAgICAxMFx0ICAgICAgey8qIEJhY2tncm91bmQgUGF0dGVybiAqL31cbiAgICAxMVx0ICAgICAgPGRpdiBjbGFzc05hbWU9XCJhYnNvbHV0ZSBpbnNldC0wIG9wYWNpdHktMTBcIj5cbiAgICAxMlx0ICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFic29sdXRlIGluc2V0LTBcIiBzdHlsZT17e1xuICAgIDEzXHQgICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgcmFkaWFsLWdyYWRpZW50KGNpcmNsZSBhdCAyMCUgODAlLCB3aGl0ZSAycHgsIHRyYW5zcGFyZW50IDJweCksXG4gICAgMTRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhZGlhbC1ncmFkaWVudChjaXJjbGUgYXQgODAlIDIwJSwgd2hpdGUgMnB4LCB0cmFuc3BhcmVudCAycHgpLFxuICAgIDE1XHQgICAgICAgICAgICAgICAgICAgICAgICAgICByYWRpYWwtZ3JhZGllbnQoY2lyY2xlIGF0IDQwJSA0MCUsIHdoaXRlIDFweCwgdHJhbnNwYXJlbnQgMXB4KWAsXG4gICAgMTZcdCAgICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogJzEwMHB4IDEwMHB4LCA4MHB4IDgwcHgsIDQwcHggNDBweCdcbiAgICAxN1x0ICAgICAgICB9fSAvPlxuICAgIDE4XHQgICAgICA8L2Rpdj5cbi4uLlxuICAgIDY1XHRcbiAgICA2Nlx0ICAgICAgICAgIHsvKiBDVEEgQnV0dG9ucyAqL31cbiAgICA2N1x0ICAgICAgICAgIDxtb3Rpb24uZGl2XG4gICAgNjhcdCAgICAgICAgICAgIGluaXRpYWw9e3sgb3BhY2l0eTogMCwgeTogMzAgfX1cbiAgICA2OVx0ICAgICAgICAgICAgd2hpbGVJblZpZXc9e3sgb3BhY2l0eTogMSwgeTogMCB9fVxuICAgIDcwXHQgICAgICAgICAgICB2aWV3cG9ydD17eyBvbmNlOiB0cnVlIH19XG4gICAgNzFcdCAgICAgICAgICAgIHRyYW5zaXRpb249e3sgZHVyYXRpb246IDAuOCwgZGVsYXk6IDAuMiB9fVxuICAgIDcyXHQgICAgICAgICAgICBjbGFzc05hbWU9XCJmbGV4IGZsZXgtY29sIHNtOmZsZXgtcm93IGdhcC00IGp1c3RpZnktY2VudGVyIGl0ZW1zLWNlbnRlciBtYi0xNlwiXG4gICAgNzNcdCAgICAgICAgICA+XG4gICAgNzRcdCAgICAgICAgICAgIDxCdXR0b25cbiAgICA3NVx0ICAgICAgICAgICAgICBzaXplPVwibGdcIlxuICAgIDc2XHQgICAgICAgICAgICAgIGhyZWY9XCJodHRwczovL3dhLm1lLzk3MTUwMTIzNDU2Nz90ZXh0PUhpJTIwQXJhYml0ZXMhJTIwSSdtJTIwaW50ZXJlc3RlZCUyMGluJTIwZGlzY3Vzc2luZyUyMGElMjBwcm9qZWN0LlwiXG4gICAgNzdcdCAgICAgICAgICAgICAgZXh0ZXJuYWxcbiAgICA3OFx0ICAgICAgICAgICAgICBjbGFzc05hbWU9XCJncm91cCBiZy13aGl0ZSB0ZXh0LVt2YXIoLS1wcmltYXJ5KV0gaG92ZXI6YmctW3ZhcigtLW5ldXRyYWwtMTAwKV0gc2hhZG93LXhsIGhvdmVyOnNoYWRvdy0yeGxcIlxuICAgIDc5XHQgICAgICAgICAgICA+XG4gICAgODBcdCAgICAgICAgICAgICAgPE1lc3NhZ2VDaXJjbGUgY2xhc3NOYW1lPVwibXItMiBoLTUgdy01XCIgLz5cbiAgICA4MVx0ICAgICAgICAgICAgICBXaGF0c0FwcCBVcyBOb3dcbiAgICA4Mlx0ICAgICAgICAgICAgICA8QXJyb3dSaWdodCBjbGFzc05hbWU9XCJtbC0yIGgtNSB3LTUgdHJhbnNpdGlvbi10cmFuc2Zvcm0gZ3JvdXAtaG92ZXI6dHJhbnNsYXRlLXgtMVwiIC8+XG4gICAgODNcdCAgICAgICAgICAgIDwvQnV0dG9uPlxuLi4uXG5QYXRoOiBzcmMvY29tcG9uZW50cy9zZWN0aW9ucy9TZXJ2aWNlcy50c3hcbi4uLlxuICAgICA1XHRcbiAgICAgNlx0Y29uc3Qgc2VydmljZXMgPSBbXG4gICAgIDdcdCAge1xuICAgICA4XHQgICAgaWNvbjogR2xvYmUsXG4gICAgIDlcdCAgICB0aXRsZTogXCJDdXN0b20gV2Vic2l0ZXNcIixcbiAgICAxMFx0ICAgIGRlc2NyaXB0aW9uOiBcIkJlc3Bva2Ugd2Vic2l0ZXMgdGhhdCByZWZsZWN0IHlvdXIgYnJhbmQgYW5kIGNvbnZlcnQgdmlzaXRvcnMgaW50byBjdXN0b21lcnNcIixcbiAgICAxMVx0ICAgIGZlYXR1cmVzOiBbXCJSZXNwb25zaXZlIERlc2lnblwiLCBcIlNFTyBPcHRpbWl6ZWRcIiwgXCJGYXN0IExvYWRpbmdcIiwgXCJDTVMgSW50ZWdyYXRpb25cIl0sXG4gICAgMTJcdCAgICBjb2xvcjogXCJ2YXIoLS1wcmltYXJ5KVwiXG4gICAgMTNcdCAgfSxcbiAgICAxNFx0ICB7XG4gICAgMTVcdCAgICBpY29uOiBaYXAsXG4gICAgMTZcdCAgICB0aXRsZTogXCJMYW5kaW5nIFBhZ2VzXCIsXG4gICAgMTdcdCAgICBkZXNjcmlwdGlvbjogXCJIaWdoLWNvbnZlcnRpbmcgbGFuZGluZyBwYWdlcyBkZXNpZ25lZCB0byBtYXhpbWl6ZSB5b3VyIG1hcmtldGluZyBST0lcIixcbiAgICAxOFx0ICAgIGZlYXR1cmVzOiBbXCJBL0IgVGVzdGluZ1wiLCBcIkFuYWx5dGljcyBTZXR1cFwiLCBcIkxlYWQgQ2FwdHVyZVwiLCBcIk1vYmlsZSBPcHRpbWl6ZWRcIl0sXG4gICAgMTlcdCAgICBjb2xvcjogXCJ2YXIoLS1zZWNvbmRhcnkpXCJcbiAgICAyMFx0ICB9LFxuICAgIDIxXHQgIHtcbiAgICAyMlx0ICAgIGljb246IENvZGUsXG4gICAgMjNcdCAgICB0aXRsZTogXCJTb2Z0d2FyZSBTb2x1dGlvbnNcIixcbiAgICAyNFx0ICAgIGRlc2NyaXB0aW9uOiBcIkN1c3RvbSBzb2Z0d2FyZSBhbmQgd2ViIGFwcGxpY2F0aW9ucyB0YWlsb3JlZCB0byB5b3VyIGJ1c2luZXNzIG5lZWRzXCIsXG4gICAgMjVcdCAgICBmZWF0dXJlczogW1wiQVBJIERldmVsb3BtZW50XCIsIFwiRGF0YWJhc2UgRGVzaWduXCIsIFwiQ2xvdWQgSG9zdGluZ1wiLCBcIk1haW50ZW5hbmNlXCJdLFxuICAgIDI2XHQgICAgY29sb3I6IFwidmFyKC0tYWNjZW50KVwiXG4gICAgMjdcdCAgfSxcbi4uLlxuUGF0aDogc3JjL2FwcC9wYWdlLnRzeFxuICAgICAxXHRpbXBvcnQgSGVybyBmcm9tIFwiQC9jb21wb25lbnRzL3NlY3Rpb25zL0hlcm9cIjtcbiAgICAgMlx0aW1wb3J0IEluZHVzdHJpZXMgZnJvbSBcIkAvY29tcG9uZW50cy9zZWN0aW9ucy9JbmR1c3RyaWVzXCI7XG4gICAgIDNcdGltcG9ydCBTZXJ2aWNlcyBmcm9tIFwiQC9jb21wb25lbnRzL3NlY3Rpb25zL1NlcnZpY2VzXCI7XG4gICAgIDRcdGltcG9ydCBQb3J0Zm9saW8gZnJvbSBcIkAvY29tcG9uZW50cy9zZWN0aW9ucy9Qb3J0Zm9saW9cIjtcbiAgICAgNVx0aW1wb3J0IEFib3V0IGZyb20gXCJAL2NvbXBvbmVudHMvc2VjdGlvbnMvQWJvdXRcIjtcbiAgICAgNlx0aW1wb3J0IENUQSBmcm9tIFwiQC9jb21wb25lbnRzL3NlY3Rpb25zL0NUQVwiO1xuICAgICA3XHRpbXBvcnQgRm9vdGVyIGZyb20gXCJAL2NvbXBvbmVudHMvc2VjdGlvbnMvRm9vdGVyXCI7XG4gICAgIDhcdFxuICAgICA5XHRleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBIb21lKCkge1xuICAgIDEwXHQgIHJldHVybiAoXG4gICAgMTFcdCAgICA8bWFpbiBjbGFzc05hbWU9XCJtaW4taC1zY3JlZW5cIj5cbiAgICAxMlx0ICAgICAgPEhlcm8gLz5cbiAgICAxM1x0ICAgICAgPEluZHVzdHJpZXMgLz5cbiAgICAxNFx0ICAgICAgPFNlcnZpY2VzIC8+XG4gICAgMTVcdCAgICAgIDxQb3J0Zm9saW8gLz5cbiAgICAxNlx0ICAgICAgPEFib3V0IC8+XG4gICAgMTdcdCAgICAgIDxDVEEgLz5cbiAgICAxOFx0ICAgICAgPEZvb3RlciAvPlxuICAgIDE5XHQgICAgPC9tYWluPlxuICAgIDIwXHQgICk7XG4gICAgMjFcdH1cbi4uLlxuUGF0aDogc3JjL2NvbXBvbmVudHMvdWkvQnV0dG9uLnRzeFxuICAgICAxXHRcInVzZSBjbGllbnRcIjtcbiAgICAgMlx0XG4gICAgIDNcdGltcG9ydCB7IG1vdGlvbiB9IGZyb20gXCJmcmFtZXItbW90aW9uXCI7XG4gICAgIDRcdGltcG9ydCB7IGZvcndhcmRSZWYgfSBmcm9tIFwicmVhY3RcIjtcbiAgICAgNVx0aW1wb3J0IHsgY24gfSBmcm9tIFwiQC9saWIvdXRpbHNcIjtcbiAgICAgNlx0XG4gICAgIDdcdGludGVyZmFjZSBCdXR0b25Qcm9wcyBleHRlbmRzIFJlYWN0LkJ1dHRvbkhUTUxBdHRyaWJ1dGVzPEhUTUxCdXR0b25FbGVtZW50PiB7XG4gICAgIDhcdCAgdmFyaWFudD86IFwicHJpbWFyeVwiIHwgXCJzZWNvbmRhcnlcIiB8IFwib3V0bGluZVwiIHwgXCJnaG9zdFwiO1xuICAgICA5XHQgIHNpemU/OiBcInNtXCIgfCBcIm1kXCIgfCBcImxnXCI7XG4gICAgMTBcdCAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZTtcbiAgICAxMVx0ICBocmVmPzogc3RyaW5nO1xuICAgIDEyXHQgIGV4dGVybmFsPzogYm9vbGVhbjtcbiAgICAxM1x0fVxuICAgIDE0XHRcbiAgICAxNVx0Y29uc3QgQnV0dG9uID0gZm9yd2FyZFJlZjxIVE1MQnV0dG9uRWxlbWVudCwgQnV0dG9uUHJvcHM+KFxuICAgIDE2XHQgICh7IGNsYXNzTmFtZSwgdmFyaWFudCA9IFwicHJpbWFyeVwiLCBzaXplID0gXCJtZFwiLCBjaGlsZHJlbiwgaHJlZiwgZXh0ZXJuYWwsIC4uLnByb3BzIH0sIHJlZikgPT4ge1xuICAgIDE3XHQgICAgY29uc3QgYmFzZUNsYXNzZXMgPSBcImlubGluZS1mbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciByb3VuZGVkLWxnIGZvbnQtbWVkaXVtIHRyYW5zaXRpb24tYWxsIGR1cmF0aW9uLTIwMCBmb2N1cy12aXNpYmxlOm91dGxpbmUtbm9uZSBmb2N1cy12aXNpYmxlOnJpbmctMiBmb2N1cy12aXNpYmxlOnJpbmctYmx1ZS01MDAgZm9jdXMtdmlzaWJsZTpyaW5nLW9mZnNldC0yIGRpc2FibGVkOnBvaW50ZXItZXZlbnRzLW5vbmUgZGlzYWJsZWQ6b3BhY2l0eS01MFwiO1xuICAgIDE4XHRcbiAgICAxOVx0ICAgIGNvbnN0IHZhcmlhbnRzID0ge1xuICAgIDIwXHQgICAgICBwcmltYXJ5OiBcImJnLVt2YXIoLS1wcmltYXJ5KV0gdGV4dC13aGl0ZSBob3ZlcjpiZy1bdmFyKC0tcHJpbWFyeS1kYXJrKV0gc2hhZG93LWxnIGhvdmVyOnNoYWRvdy14bFwiLFxuICAgIDIxXHQgICAgICBzZWNvbmRhcnk6IFwiYmctW3ZhcigtLXNlY29uZGFyeSldIHRleHQtd2hpdGUgaG92ZXI6YmctW3ZhcigtLXNlY29uZGFyeS1kYXJrKV0gc2hhZG93LWxnIGhvdmVyOnNoYWRvdy14bFwiLFxuICAgIDIyXHQgICAgICBvdXRsaW5lOiBcImJvcmRlci0yIGJvcmRlci1bdmFyKC0tcHJpbWFyeSldIHRleHQtW3ZhcigtLXByaW1hcnkpXSBob3ZlcjpiZy1bdmFyKC0tcHJpbWFyeSldIGhvdmVyOnRleHQtd2hpdGVcIixcbiAgICAyM1x0ICAgICAgZ2hvc3Q6IFwidGV4dC1bdmFyKC0tbmV1dHJhbC03MDApXSBob3ZlcjpiZy1bdmFyKC0tbmV1dHJhbC0xMDApXSBob3Zlcjp0ZXh0LVt2YXIoLS1uZXV0cmFsLTkwMCldXCIsXG4gICAgMjRcdCAgICB9O1xuICAgIDI1XHRcbiAgICAyNlx0ICAgIGNvbnN0IHNpemVzID0ge1xuICAgIDI3XHQgICAgICBzbTogXCJoLTkgcHgtNCB0ZXh0LXNtXCIsXG4gICAgMjhcdCAgICAgIG1kOiBcImgtMTEgcHgtNiB0ZXh0LWJhc2VcIixcbiAgICAyOVx0ICAgICAgbGc6IFwiaC0xNCBweC04IHRleHQtbGdcIixcbiAgICAzMFx0ICAgIH07XG4gICAgMzFcdFxuICAgIDMyXHQgICAgY29uc3QgY2xhc3NlcyA9IGNuKGJhc2VDbGFzc2VzLCB2YXJpYW50c1t2YXJpYW50XSwgc2l6ZXNbc2l6ZV0sIGNsYXNzTmFtZSk7XG4gICAgMzNcdFxuICAgIDM0XHQgICAgY29uc3QgTW90aW9uQnV0dG9uID0gbW90aW9uLmJ1dHRvbjtcbiAgICAzNVx0XG4gICAgMzZcdCAgICBpZiAoaHJlZikge1xuICAgIDM3XHQgICAgICByZXR1cm4gKFxuICAgIDM4XHQgICAgICAgIDxtb3Rpb24uYVxuICAgIDM5XHQgICAgICAgICAgaHJlZj17aHJlZn1cbiAgICA0MFx0ICAgICAgICAgIHRhcmdldD17ZXh0ZXJuYWwgPyBcIl9ibGFua1wiIDogdW5kZWZpbmVkfVxuICAgIDQxXHQgICAgICAgICAgcmVsPXtleHRlcm5hbCA/IFwibm9vcGVuZXIgbm9yZWZlcnJlclwiIDogdW5kZWZpbmVkfVxuICAgIDQyXHQgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzfVxuICAgIDQzXHQgICAgICAgICAgd2hpbGVIb3Zlcj17eyBzY2FsZTogMS4wMiB9fVxuICAgIDQ0XHQgICAgICAgICAgd2hpbGVUYXA9e3sgc2NhbGU6IDAuOTggfX1cbiAgICA0NVx0ICAgICAgICAgIHRyYW5zaXRpb249e3sgdHlwZTogXCJzcHJpbmdcIiwgc3RpZmZuZXNzOiA0MDAsIGRhbXBpbmc6IDE3IH19XG4gICAgNDZcdCAgICAgICAgPlxuICAgIDQ3XHQgICAgICAgICAge2NoaWxkcmVufVxuICAgIDQ4XHQgICAgICAgIDwvbW90aW9uLmE+XG4gICAgNDlcdCAgICAgICk7XG4gICAgNTBcdCAgICB9XG4gICAgNTFcdFxuICAgIDUyXHQgICAgcmV0dXJuIChcbiAgICA1M1x0ICAgICAgPE1vdGlvbkJ1dHRvblxuICAgIDU0XHQgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlc31cbiAgICA1NVx0ICAgICAgICByZWY9e3JlZn1cbiAgICA1Nlx0ICAgICAgICB3aGlsZUhvdmVyPXt7IHNjYWxlOiAxLjAyIH19XG4gICAgNTdcdCAgICAgICAgd2hpbGVUYXA9e3sgc2NhbGU6IDAuOTggfX1cbiAgICA1OFx0ICAgICAgICB0cmFuc2l0aW9uPXt7IHR5cGU6IFwic3ByaW5nXCIsIHN0aWZmbmVzczogNDAwLCBkYW1waW5nOiAxNyB9fVxuICAgIDU5XHQgICAgICAgIHsuLi5wcm9wc31cbiAgICA2MFx0ICAgICAgPlxuICAgIDYxXHQgICAgICAgIHtjaGlsZHJlbn1cbiAgICA2Mlx0ICAgICAgPC9Nb3Rpb25CdXR0b24+XG4gICAgNjNcdCAgICApO1xuICAgIDY0XHQgIH1cbiAgICA2NVx0KTtcbiAgICA2Nlx0XG4gICAgNjdcdEJ1dHRvbi5kaXNwbGF5TmFtZSA9IFwiQnV0dG9uXCI7XG4gICAgNjhcdFxuICAgIDY5XHRleHBvcnQgeyBCdXR0b24gfTtcbi4uLlxuUGF0aDogc3JjL2xpYi91dGlscy50c1xuICAgICAxXHRpbXBvcnQgeyB0eXBlIENsYXNzVmFsdWUsIGNsc3ggfSBmcm9tIFwiY2xzeFwiO1xuICAgICAyXHRpbXBvcnQgeyB0d01lcmdlIH0gZnJvbSBcInRhaWx3aW5kLW1lcmdlXCI7XG4gICAgIDNcdFxuICAgICA0XHRleHBvcnQgZnVuY3Rpb24gY24oLi4uaW5wdXRzOiBDbGFzc1ZhbHVlW10pIHtcbiAgICAgNVx0ICByZXR1cm4gdHdNZXJnZShjbHN4KGlucHV0cykpO1xuICAgICA2XHR9XG4uLi5cblBhdGg6IHNyYy9jb21wb25lbnRzL3NlY3Rpb25zL0luZHVzdHJpZXMudHN4XG4uLi5cbiAgICAgNVx0XG4gICAgIDZcdGNvbnN0IGluZHVzdHJpZXMgPSBbXG4gICAgIDdcdCAge1xuICAgICA4XHQgICAgaWNvbjogQnVpbGRpbmcyLFxuICAgICA5XHQgICAgdGl0bGU6IFwiUmVhbCBFc3RhdGVcIixcbiAgICAxMFx0ICAgIGRlc2NyaXB0aW9uOiBcIlNob3djYXNlIHByb3BlcnRpZXMgd2l0aCBzdHVubmluZyB2aXN1YWxzIGFuZCBsZWFkLWdlbmVyYXRpbmcgd2Vic2l0ZXNcIixcbiAgICAxMVx0ICAgIGNvbG9yOiBcInZhcigtLXByaW1hcnkpXCJcbiAgICAxMlx0ICB9LFxuICAgIDEzXHQgIHtcbiAgICAxNFx0ICAgIGljb246IFNob3BwaW5nQ2FydCxcbiAgICAxNVx0ICAgIHRpdGxlOiBcIkUtY29tbWVyY2VcIixcbiAgICAxNlx0ICAgIGRlc2NyaXB0aW9uOiBcIkNvbnZlcnQgdmlzaXRvcnMgaW50byBjdXN0b21lcnMgd2l0aCBvcHRpbWl6ZWQgb25saW5lIHN0b3Jlc1wiLFxuICAgIDE3XHQgICAgY29sb3I6IFwidmFyKC0tc2Vjb25kYXJ5KVwiXG4gICAgMThcdCAgfSxcbiAgICAxOVx0ICB7XG4gICAgMjBcdCAgICBpY29uOiBIZWFydCxcbiAgICAyMVx0ICAgIHRpdGxlOiBcIkhlYWx0aCAmIFdlbGxuZXNzXCIsXG4gICAgMjJcdCAgICBkZXNjcmlwdGlvbjogXCJCdWlsZCB0cnVzdCBhbmQgYXR0cmFjdCBjbGllbnRzIHdpdGggcHJvZmVzc2lvbmFsIGhlYWx0aGNhcmUgd2Vic2l0ZXNcIixcbiAgICAyM1x0ICAgIGNvbG9yOiBcInZhcigtLWFjY2VudClcIlxuICAgIDI0XHQgIH0sXG4gICAgMjVcdCAge1xuICAgIDI2XHQgICAgaWNvbjogUGxhbmUsXG4gICAgMjdcdCAgICB0aXRsZTogXCJUb3VyaXNtXCIsXG4gICAgMjhcdCAgICBkZXNjcmlwdGlvbjogXCJJbnNwaXJlIHRyYXZlbGVycyB3aXRoIGltbWVyc2l2ZSBib29raW5nIGV4cGVyaWVuY2VzXCIsXG4gICAgMjlcdCAgICBjb2xvcjogXCJ2YXIoLS1wcmltYXJ5KVwiXG4gICAgMzBcdCAgfSxcbiAgICAzMVx0ICB7XG4gICAgMzJcdCAgICBpY29uOiBUcmVuZGluZ1VwLFxuICAgIDMzXHQgICAgdGl0bGU6IFwiRmludGVjaFwiLFxuICAgIDM0XHQgICAgZGVzY3JpcHRpb246IFwiU2VjdXJlLCBjb21wbGlhbnQgcGxhdGZvcm1zIHRoYXQgYnVpbGQgZmluYW5jaWFsIGNvbmZpZGVuY2VcIixcbiAgICAzNVx0ICAgIGNvbG9yOiBcInZhcigtLXNlY29uZGFyeSlcIlxuICAgIDM2XHQgIH1cbiAgICAzN1x0XTtcbi4uLlxuICAgIDYwXHRcbiAgICA2MVx0ZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSW5kdXN0cmllcygpIHtcbiAgICA2Mlx0ICByZXR1cm4gKFxuICAgIDYzXHQgICAgPHNlY3Rpb24gaWQ9XCJpbmR1c3RyaWVzXCIgY2xhc3NOYW1lPVwicHktMjAgbGc6cHktMzIgYmctd2hpdGVcIj5cbiAgICA2NFx0ICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXIgbXgtYXV0byBweC00IHNtOnB4LTYgbGc6cHgtOFwiPlxuICAgIDY1XHQgICAgICAgIHsvKiBTZWN0aW9uIEhlYWRlciAqL31cbiAgICA2Nlx0ICAgICAgICA8bW90aW9uLmRpdlxuICAgIDY3XHQgICAgICAgICAgaW5pdGlhbD17eyBvcGFjaXR5OiAwLCB5OiAzMCB9fVxuICAgIDY4XHQgICAgICAgICAgd2hpbGVJblZpZXc9e3sgb3BhY2l0eTogMSwgeTogMCB9fVxuICAgIDY5XHQgICAgICAgICAgdmlld3BvcnQ9e3sgb25jZTogdHJ1ZSB9fVxuICAgIDcwXHQgICAgICAgICAgdHJhbnNpdGlvbj17eyBkdXJhdGlvbjogMC44IH19XG4gICAgNzFcdCAgICAgICAgICBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlciBtYi0xNlwiXG4gICAgNzJcdCAgICAgICAgPlxuICAgIDczXHQgICAgICAgICAgPGgyIGNsYXNzTmFtZT1cInRleHQtM3hsIHNtOnRleHQtNHhsIGxnOnRleHQtNXhsIGZvbnQtYm9sZCB0ZXh0LVt2YXIoLS1uZXV0cmFsLTkwMCldIG1iLTZcIj5cbiAgICA3NFx0ICAgICAgICAgICAgSW5kdXN0cmllcyBXZVxuICAgIDc1XHQgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJibG9jayBiZy1ncmFkaWVudC10by1yIGZyb20tW3ZhcigtLXByaW1hcnkpXSB0by1bdmFyKC0tc2Vjb25kYXJ5KV0gYmctY2xpcC10ZXh0IHRleHQtdHJhbnNwYXJlbnRcIj5cbiAgICA3Nlx0ICAgICAgICAgICAgICBTcGVjaWFsaXplIEluXG4gICAgNzdcdCAgICAgICAgICAgIDwvc3Bhbj5cbiAgICA3OFx0ICAgICAgICAgIDwvaDI+XG4gICAgNzlcdCAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LWxnIHNtOnRleHQteGwgdGV4dC1bdmFyKC0tbmV1dHJhbC02MDApXSBtYXgtdy0zeGwgbXgtYXV0b1wiPlxuICAgIDgwXHQgICAgICAgICAgICBXZSB1bmRlcnN0YW5kIHRoZSB1bmlxdWUgY2hhbGxlbmdlcyBhbmQgb3Bwb3J0dW5pdGllcyBpbiBEdWJhaSdzIG1vc3QgZHluYW1pYyBzZWN0b3JzXG4gICAgODFcdCAgICAgICAgICA8L3A+XG4gICAgODJcdCAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgIDgzXHRcbiAgICA4NFx0ICAgICAgICB7LyogSW5kdXN0cmllcyBHcmlkICovfVxuICAgIDg1XHQgICAgICAgIDxtb3Rpb24uZGl2XG4gICAgODZcdCAgICAgICAgICB2YXJpYW50cz17Y29udGFpbmVyVmFyaWFudHN9XG4gICAgODdcdCAgICAgICAgICBpbml0aWFsPVwiaGlkZGVuXCJcbiAgICA4OFx0ICAgICAgICAgIHdoaWxlSW5WaWV3PVwidmlzaWJsZVwiXG4gICAgODlcdCAgICAgICAgICB2aWV3cG9ydD17eyBvbmNlOiB0cnVlIH19XG4gICAgOTBcdCAgICAgICAgICBjbGFzc05hbWU9XCJncmlkIGdyaWQtY29scy0xIG1kOmdyaWQtY29scy0yIGxnOmdyaWQtY29scy0zIHhsOmdyaWQtY29scy01IGdhcC02IGxnOmdhcC04XCJcbiAgICA5MVx0ICAgICAgICA+XG4gICAgOTJcdCAgICAgICAgICB7aW5kdXN0cmllcy5tYXAoKGluZHVzdHJ5LCBpbmRleCkgPT4ge1xuICAgIDkzXHQgICAgICAgICAgICBjb25zdCBJY29uID0gaW5kdXN0cnkuaWNvbjtcbiAgICA5NFx0ICAgICAgICAgICAgcmV0dXJuIChcbiAgICA5NVx0ICAgICAgICAgICAgICA8bW90aW9uLmRpdlxuICAgIDk2XHQgICAgICAgICAgICAgICAga2V5PXtpbmR1c3RyeS50aXRsZX1cbiAgICA5N1x0ICAgICAgICAgICAgICAgIHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9XG4gICAgOThcdCAgICAgICAgICAgICAgICB3aGlsZUhvdmVyPXt7IFxuICAgIDk5XHQgICAgICAgICAgICAgICAgICB5OiAtOCxcbiAgIDEwMFx0ICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogeyBkdXJhdGlvbjogMC4zIH1cbiAgIDEwMVx0ICAgICAgICAgICAgICAgIH19XG4gICAxMDJcdCAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJncm91cCByZWxhdGl2ZVwiXG4gICAxMDNcdCAgICAgICAgICAgICAgPlxuICAgMTA0XHQgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJiZy13aGl0ZSByb3VuZGVkLTJ4bCBwLTYgbGc6cC04IHNoYWRvdy1sZyBob3ZlcjpzaGFkb3ctMnhsIHRyYW5zaXRpb24tYWxsIGR1cmF0aW9uLTMwMCBib3JkZXIgYm9yZGVyLVt2YXIoLS1uZXV0cmFsLTIwMCldIGhvdmVyOmJvcmRlci1bdmFyKC0tcHJpbWFyeSldLzIwIGgtZnVsbFwiPlxuICAgMTA1XHQgICAgICAgICAgICAgICAgICB7LyogSWNvbiAqL31cbiAgIDEwNlx0ICAgICAgICAgICAgICAgICAgPGRpdiBcbiAgIDEwN1x0ICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ3LTE2IGgtMTYgcm91bmRlZC14bCBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciBtYi02IGdyb3VwLWhvdmVyOnNjYWxlLTExMCB0cmFuc2l0aW9uLXRyYW5zZm9ybSBkdXJhdGlvbi0zMDBcIlxuICAgMTA4XHQgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IGJhY2tncm91bmRDb2xvcjogYCR7aW5kdXN0cnkuY29sb3J9MTVgIH19XG4gICAxMDlcdCAgICAgICAgICAgICAgICAgID5cbiAgIDExMFx0ICAgICAgICAgICAgICAgICAgICA8SWNvbiBcbiAgIDExMVx0ICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInctOCBoLTggdHJhbnNpdGlvbi1jb2xvcnMgZHVyYXRpb24tMzAwXCJcbiAgIDExMlx0ICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IGNvbG9yOiBpbmR1c3RyeS5jb2xvciB9fVxuICAgMTEzXHQgICAgICAgICAgICAgICAgICAgIC8+XG4gICAxMTRcdCAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgMTE1XHRcbiAgIDExNlx0ICAgICAgICAgICAgICAgICAgey8qIENvbnRlbnQgKi99XG4gICAxMTdcdCAgICAgICAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9XCJ0ZXh0LXhsIGZvbnQtYm9sZCB0ZXh0LVt2YXIoLS1uZXV0cmFsLTkwMCldIG1iLTMgZ3JvdXAtaG92ZXI6dGV4dC1bdmFyKC0tcHJpbWFyeSldIHRyYW5zaXRpb24tY29sb3JzIGR1cmF0aW9uLTMwMFwiPlxuICAgMTE4XHQgICAgICAgICAgICAgICAgICAgIHtpbmR1c3RyeS50aXRsZX1cbiAgIDExOVx0ICAgICAgICAgICAgICAgICAgPC9oMz5cbiAgIDEyMFx0ICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1bdmFyKC0tbmV1dHJhbC02MDApXSBsZWFkaW5nLXJlbGF4ZWRcIj5cbiAgIDEyMVx0ICAgICAgICAgICAgICAgICAgICB7aW5kdXN0cnkuZGVzY3JpcHRpb259XG4gICAxMjJcdCAgICAgICAgICAgICAgICAgIDwvcD5cbi4uLlxuICAgMTMxXHRcbiAgIDEzMlx0ICAgICAgICB7LyogQm90dG9tIENUQSAqL31cbiAgIDEzM1x0ICAgICAgICA8bW90aW9uLmRpdlxuICAgMTM0XHQgICAgICAgICAgaW5pdGlhbD17eyBvcGFjaXR5OiAwLCB5OiAzMCB9fVxuICAgMTM1XHQgICAgICAgICAgd2hpbGVJblZpZXc9e3sgb3BhY2l0eTogMSwgeTogMCB9fVxuICAgMTM2XHQgICAgICAgICAgdmlld3BvcnQ9e3sgb25jZTogdHJ1ZSB9fVxuICAgMTM3XHQgICAgICAgICAgdHJhbnNpdGlvbj17eyBkdXJhdGlvbjogMC44LCBkZWxheTogMC4zIH19XG4gICAxMzhcdCAgICAgICAgICBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlciBtdC0xNlwiXG4gICAxMzlcdCAgICAgICAgPlxuICAgMTQwXHQgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1bdmFyKC0tbmV1dHJhbC02MDApXSBtYi02XCI+XG4gICAxNDFcdCAgICAgICAgICAgIERvbid0IHNlZSB5b3VyIGluZHVzdHJ5PyBXZSB3b3JrIHdpdGggYnVzaW5lc3NlcyBhY3Jvc3MgYWxsIHNlY3RvcnMuXG4gICAxNDJcdCAgICAgICAgICA8L3A+XG4gICAxNDNcdCAgICAgICAgICA8bW90aW9uLmFcbiAgIDE0NFx0ICAgICAgICAgICAgaHJlZj1cIiNjb250YWN0XCJcbiAgIDE0NVx0ICAgICAgICAgICAgd2hpbGVIb3Zlcj17eyBzY2FsZTogMS4wNSB9fVxuICAgMTQ2XHQgICAgICAgICAgICB3aGlsZVRhcD17eyBzY2FsZTogMC45NSB9fVxuICAgMTQ3XHQgICAgICAgICAgICBjbGFzc05hbWU9XCJpbmxpbmUtZmxleCBpdGVtcy1jZW50ZXIgdGV4dC1bdmFyKC0tcHJpbWFyeSldIGZvbnQtc2VtaWJvbGQgaG92ZXI6dGV4dC1bLi4uIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMTlKQ0c4dlBpSkJScWJNNWpBYllVN3MifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJDOi9Vc2Vycy9kYXRhbS9EZXNrdG9wL2FyYWJpdGVzIiwiZm9sZGVyUm9vdCI6IkM6L1VzZXJzL2RhdGFtL0Rlc2t0b3AvYXJhYml0ZXMifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTI3VDIxOjMxOjU2LjkyOVoiLCJyZXNwb25zZV90ZXh0IjoiTm93IGxldCBtZSBjaGVjayBmb3IgYW55IGV4aXN0aW5nIG5hdmlnYXRpb24gY29tcG9uZW50cyBhbmQgdGhlIGN1cnJlbnQgQWJvdXQgc2VjdGlvbiB0byB1bmRlcnN0YW5kIHdoYXQncyBhbHJlYWR5IGltcGxlbWVudGVkOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6Ijg2MDNhZDdiLTA4NGYtNDA3NS1hNWFjLWNlNWI2OTJkYTc4MCIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDFNWXRjaXpvZEptd0tpRFloZlFnemNXIiwidG9vbF9uYW1lIjoic2F2ZS1maWxlIiwiaW5wdXRfanNvbiI6IntcImluc3RydWN0aW9uc19yZW1pbmRlclwiOiBcIkxJTUlUIFRIRSBGSUxFIENPTlRFTlQgVE8gQVQgTU9TVCAzMDAgTElORVMuIElGIE1PUkUgQ09OVEVOVCBORUVEUyBUTyBCRSBBRERFRCBVU0UgVEhFIHN0ci1yZXBsYWNlLWVkaXRvciBUT09MIFRPIEVESVQgVEhFIEZJTEUgQUZURVIgSVQgSEFTIEJFRU4gQ1JFQVRFRC5cIiwgXCJwYXRoXCI6IFwic3JjL2FwcC9hYm91dC9wYWdlLnRzeFwiLCBcImZpbGVfY29udGVudFwiOiBcImltcG9ydCB0eXBlIHsgTWV0YWRhdGEgfSBmcm9tIFxcXCJuZXh0XFxcIjtcXG5pbXBvcnQgQWJvdXRIZXJvIGZyb20gXFxcIkAvY29tcG9uZW50cy9zZWN0aW9ucy9hYm91dC9BYm91dEhlcm9cXFwiO1xcbmltcG9ydCBPdXJTdG9yeSBmcm9tIFxcXCJAL2NvbXBvbmVudHMvc2VjdGlvbnMvYWJvdXQvT3VyU3RvcnlcXFwiO1xcbmltcG9ydCBWYWx1ZXMgZnJvbSBcXFwiQC9jb21wb25lbnRzL3NlY3Rpb25zL2Fib3V0L1ZhbHVlc1xcXCI7XFxuaW1wb3J0IFN0YXRzIGZyb20gXFxcIkAvY29tcG9uZW50cy9zZWN0aW9ucy9hYm91dC9TdGF0c1xcXCI7XFxuaW1wb3J0IFRlYW0gZnJvbSBcXFwiQC9jb21wb25lbnRzL3NlY3Rpb25zL2Fib3V0L1RlYW1cXFwiO1xcbmltcG9ydCBXaHlXb3JrV2l0aFVzIGZyb20gXFxcIkAvY29tcG9uZW50cy9zZWN0aW9ucy9hYm91dC9XaHlXb3JrV2l0aFVzXFxcIjtcXG5pbXBvcnQgRm9vdGVyIGZyb20gXFxcIkAvY29tcG9uZW50cy9zZWN0aW9ucy9Gb290ZXJcXFwiO1xcblxcbmV4cG9ydCBjb25zdCBtZXRhZGF0YTogTWV0YWRhdGEgPSB7XFxuICB0aXRsZTogXFxcIkFib3V0IFVzIHwgQXJhYml0ZXMgRGlnaXRhbCBBZ2VuY3kgLSBEdWJhaSdzIFByZW1pZXIgV2ViIERldmVsb3BtZW50IFRlYW1cXFwiLFxcbiAgZGVzY3JpcHRpb246IFxcXCJNZWV0IHRoZSBwYXNzaW9uYXRlIHRlYW0gYmVoaW5kIEFyYWJpdGVzIERpZ2l0YWwgQWdlbmN5LiBMZWFybiBhYm91dCBvdXIgbWlzc2lvbiwgdmFsdWVzLCBhbmQgY29tbWl0bWVudCB0byB0cmFuc2Zvcm1pbmcgRHViYWkgYnVzaW5lc3NlcyB0aHJvdWdoIGlubm92YXRpdmUgZGlnaXRhbCBzb2x1dGlvbnMuXFxcIixcXG4gIGtleXdvcmRzOiBcXFwiYWJvdXQgQXJhYml0ZXMsIER1YmFpIHdlYiBkZXZlbG9wbWVudCB0ZWFtLCBkaWdpdGFsIGFnZW5jeSBzdG9yeSwgd2ViIGRldmVsb3BtZW50IGNvbXBhbnkgRHViYWksIHNvZnR3YXJlIGRldmVsb3BtZW50IHRlYW1cXFwiLFxcbiAgb3BlbkdyYXBoOiB7XFxuICAgIHRpdGxlOiBcXFwiQWJvdXQgVXMgfCBBcmFiaXRlcyBEaWdpdGFsIEFnZW5jeSAtIER1YmFpJ3MgUHJlbWllciBXZWIgRGV2ZWxvcG1lbnQgVGVhbVxcXCIsXFxuICAgIGRlc2NyaXB0aW9uOiBcXFwiTWVldCB0aGUgcGFzc2lvbmF0ZSB0ZWFtIGJlaGluZCBBcmFiaXRlcyBEaWdpdGFsIEFnZW5jeS4gTGVhcm4gYWJvdXQgb3VyIG1pc3Npb24sIHZhbHVlcywgYW5kIGNvbW1pdG1lbnQgdG8gdHJhbnNmb3JtaW5nIER1YmFpIGJ1c2luZXNzZXMgdGhyb3VnaCBpbm5vdmF0aXZlIGRpZ2l0YWwgc29sdXRpb25zLlxcXCIsXFxuICAgIHVybDogXFxcImh0dHBzOi8vYXJhYml0ZXMuY29tL2Fib3V0XFxcIixcXG4gICAgdHlwZTogXFxcIndlYnNpdGVcXFwiLFxcbiAgICBpbWFnZXM6IFtcXG4gICAgICB7XFxuICAgICAgICB1cmw6IFxcXCIvb2ctYWJvdXQuanBnXFxcIixcXG4gICAgICAgIHdpZHRoOiAxMjAwLFxcbiAgICAgICAgaGVpZ2h0OiA2MzAsXFxuICAgICAgICBhbHQ6IFxcXCJBYm91dCBBcmFiaXRlcyBEaWdpdGFsIEFnZW5jeSAtIE1lZXQgT3VyIFRlYW1cXFwiLFxcbiAgICAgIH0sXFxuICAgIF0sXFxuICB9LFxcbiAgdHdpdHRlcjoge1xcbiAgICBjYXJkOiBcXFwic3VtbWFyeV9sYXJnZV9pbWFnZVxcXCIsXFxuICAgIHRpdGxlOiBcXFwiQWJvdXQgVXMgfCBBcmFiaXRlcyBEaWdpdGFsIEFnZW5jeSAtIER1YmFpJ3MgUHJlbWllciBXZWIgRGV2ZWxvcG1lbnQgVGVhbVxcXCIsXFxuICAgIGRlc2NyaXB0aW9uOiBcXFwiTWVldCB0aGUgcGFzc2lvbmF0ZSB0ZWFtIGJlaGluZCBBcmFiaXRlcyBEaWdpdGFsIEFnZW5jeS4gTGVhcm4gYWJvdXQgb3VyIG1pc3Npb24sIHZhbHVlcywgYW5kIGNvbW1pdG1lbnQgdG8gdHJhbnNmb3JtaW5nIER1YmFpIGJ1c2luZXNzZXMgdGhyb3VnaCBpbm5vdmF0aXZlIGRpZ2l0YWwgc29sdXRpb25zLlxcXCIsXFxuICAgIGltYWdlczogW1xcXCIvb2ctYWJvdXQuanBnXFxcIl0sXFxuICB9LFxcbn07XFxuXFxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQWJvdXRQYWdlKCkge1xcbiAgcmV0dXJuIChcXG4gICAgPG1haW4gY2xhc3NOYW1lPVxcXCJtaW4taC1zY3JlZW5cXFwiPlxcbiAgICAgIDxBYm91dEhlcm8gLz5cXG4gICAgICA8T3VyU3RvcnkgLz5cXG4gICAgICA8VmFsdWVzIC8+XFxuICAgICAgPFN0YXRzIC8+XFxuICAgICAgPFRlYW0gLz5cXG4gICAgICA8V2h5V29ya1dpdGhVcyAvPlxcbiAgICAgIDxGb290ZXIgLz5cXG4gICAgPC9tYWluPlxcbiAgKTtcXG59XCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiUGVyZmVjdCEgTm93IEkgaGF2ZSBhIGNvbXByZWhlbnNpdmUgdW5kZXJzdGFuZGluZyBvZiB0aGUgY29kZWJhc2UuIExldCBtZSBjcmVhdGUgYSBkZXRhaWxlZCBwbGFuIGZvciB0aGUgQWJvdXQgVXMgcGFnZS5cblxuIyMg8J+TiyBEZXRhaWxlZCBQbGFuIGZvciBBYm91dCBVcyBQYWdlXG5cbkJhc2VkIG9uIHRoZSBleGlzdGluZyBjb2RlYmFzZSBzdHJ1Y3R1cmUgYW5kIGRlc2lnbiBwYXR0ZXJucywgaGVyZSdzIG15IHBsYW46XG5cbiMjIyAqKkZpbGVzIHRvIENyZWF0ZS9Nb2RpZnk6KipcblxuMS4gKipgc3JjL2FwcC9hYm91dC9wYWdlLnRzeGAqKiAtIE1haW4gQWJvdXQgcGFnZSByb3V0ZVxuMi4gKipgc3JjL2NvbXBvbmVudHMvc2VjdGlvbnMvYWJvdXQvQWJvdXRIZXJvLnRzeGAqKiAtIEhlcm8gc2VjdGlvbiBmb3IgQWJvdXQgcGFnZVxuMy4gKipgc3JjL2NvbXBvbmVudHMvc2VjdGlvbnMvYWJvdXQvT3VyU3RvcnkudHN4YCoqIC0gU3RvcnkgbmFycmF0aXZlIHNlY3Rpb25cbjQuICoqYHNyYy9jb21wb25lbnRzL3NlY3Rpb25zL2Fib3V0L1ZhbHVlcy50c3hgKiogLSBDb3JlIHZhbHVlcyBzZWN0aW9uXG41LiAqKmBzcmMvY29tcG9uZW50cy9zZWN0aW9ucy9hYm91dC9TdGF0cy50c3hgKiogLSBBbmltYXRlZCBzdGF0cy9taWxlc3RvbmVzXG42LiAqKmBzcmMvY29tcG9uZW50cy9zZWN0aW9ucy9hYm91dC9UZWFtLnRzeGAqKiAtIE1lZXQgdGhlIHRlYW0gc2VjdGlvblxuNy4gKipgc3JjL2NvbXBvbmVudHMvc2VjdGlvbnMvYWJvdXQvV2h5V29ya1dpdGhVcy50c3hgKiogLSBDVEEgc2VjdGlvblxuOC4gKipgc3JjL2NvbXBvbmVudHMvdWkvTmF2aWdhdGlvbi50c3hgKiogLSBOYXZpZ2F0aW9uIGNvbXBvbmVudCBmb3IgcGFnZSBsaW5raW5nXG5cbiMjIyAqKkRlc2lnbiBDb25zaXN0ZW5jeToqKlxuLSBVc2UgZXhpc3RpbmcgY29sb3IgcGFsZXR0ZSAocHJpbWFyeSBibHVlLCBzZWNvbmRhcnkgZ29sZCwgYWNjZW50IGN5YW4pXG4tIE1haW50YWluIEludGVyICsgUGxheWZhaXIgRGlzcGxheSB0eXBvZ3JhcGh5XG4tIEZvbGxvdyBleGlzdGluZyBhbmltYXRpb24gcGF0dGVybnMgd2l0aCBGcmFtZXIgTW90aW9uXG4tIFVzZSBjb25zaXN0ZW50IHNwYWNpbmcgYW5kIGNvbXBvbmVudCBzdHJ1Y3R1cmVcbi0gSW1wbGVtZW50IHNlbWFudGljIEhUTUwgYW5kIGFjY2Vzc2liaWxpdHkgZmVhdHVyZXNcblxuIyMjICoqQ29udGVudCBTdHJhdGVneToqKlxuLSBDcmVhdGUgcmVhbGlzdGljLCBwcm9mZXNzaW9uYWwgY29weSB0aGF0IHJlZmxlY3RzIER1YmFpJ3MgYnVzaW5lc3MgZW52aXJvbm1lbnRcbi0gRm9jdXMgb24gdHJ1c3QtYnVpbGRpbmcgYW5kIGV4cGVydGlzZSBkZW1vbnN0cmF0aW9uXG4tIEluY2x1ZGUgYW5pbWF0ZWQgY291bnRlcnMgZm9yIHN0YXRzXG4tIE1haW50YWluIHByb2Zlc3Npb25hbCB5ZXQgYXBwcm9hY2hhYmxlIHRvbmVcblxuTGV0IG1lIHN0YXJ0IGltcGxlbWVudGluZyB0aGlzIHBsYW46XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBzcmMvY29tcG9uZW50cy9zZWN0aW9ucy9BYm91dC50c3hcbiAgICAgMVx0XCJ1c2UgY2xpZW50XCI7XG4gICAgIDJcdFxuICAgICAzXHRpbXBvcnQgeyBtb3Rpb24gfSBmcm9tIFwiZnJhbWVyLW1vdGlvblwiO1xuICAgICA0XHRpbXBvcnQgeyBCdXR0b24gfSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL0J1dHRvblwiO1xuICAgICA1XHRpbXBvcnQgeyBBcnJvd1JpZ2h0LCBVc2VycywgQXdhcmQsIENsb2NrLCBUYXJnZXQgfSBmcm9tIFwibHVjaWRlLXJlYWN0XCI7XG4gICAgIDZcdFxuICAgICA3XHRjb25zdCBzdGF0cyA9IFtcbiAgICAgOFx0ICB7XG4gICAgIDlcdCAgICBpY29uOiBVc2VycyxcbiAgICAxMFx0ICAgIG51bWJlcjogXCI1MCtcIixcbiAgICAxMVx0ICAgIGxhYmVsOiBcIlByb2plY3RzIERlbGl2ZXJlZFwiLFxuICAgIDEyXHQgICAgY29sb3I6IFwidmFyKC0tcHJpbWFyeSlcIlxuICAgIDEzXHQgIH0sXG4gICAgMTRcdCAge1xuICAgIDE1XHQgICAgaWNvbjogQXdhcmQsXG4gICAgMTZcdCAgICBudW1iZXI6IFwiMTAwJVwiLFxuICAgIDE3XHQgICAgbGFiZWw6IFwiQ2xpZW50IFNhdGlzZmFjdGlvblwiLFxuICAgIDE4XHQgICAgY29sb3I6IFwidmFyKC0tc2Vjb25kYXJ5KVwiXG4gICAgMTlcdCAgfSxcbiAgICAyMFx0ICB7XG4gICAgMjFcdCAgICBpY29uOiBDbG9jayxcbiAgICAyMlx0ICAgIG51bWJlcjogXCIyNC83XCIsXG4gICAgMjNcdCAgICBsYWJlbDogXCJTdXBwb3J0IEF2YWlsYWJsZVwiLFxuICAgIDI0XHQgICAgY29sb3I6IFwidmFyKC0tYWNjZW50KVwiXG4gICAgMjVcdCAgfSxcbiAgICAyNlx0ICB7XG4gICAgMjdcdCAgICBpY29uOiBUYXJnZXQsXG4gICAgMjhcdCAgICBudW1iZXI6IFwiNStcIixcbiAgICAyOVx0ICAgIGxhYmVsOiBcIkluZHVzdHJpZXMgU2VydmVkXCIsXG4gICAgMzBcdCAgICBjb2xvcjogXCJ2YXIoLS1wcmltYXJ5KVwiXG4gICAgMzFcdCAgfVxuICAgIDMyXHRdO1xuICAgIDMzXHRcbiAgICAzNFx0Y29uc3QgY29udGFpbmVyVmFyaWFudHMgPSB7XG4gICAgMzVcdCAgaGlkZGVuOiB7IG9wYWNpdHk6IDAgfSxcbiAgICAzNlx0ICB2aXNpYmxlOiB7XG4gICAgMzdcdCAgICBvcGFjaXR5OiAxLFxuICAgIDM4XHQgICAgdHJhbnNpdGlvbjoge1xuICAgIDM5XHQgICAgICBzdGFnZ2VyQ2hpbGRyZW46IDAuMlxuICAgIDQwXHQgICAgfVxuICAgIDQxXHQgIH1cbiAgICA0Mlx0fTtcbi4uLlxuICAgIDU1XHRcbiAgICA1Nlx0ZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQWJvdXQoKSB7XG4gICAgNTdcdCAgcmV0dXJuIChcbiAgICA1OFx0ICAgIDxzZWN0aW9uIGlkPVwiYWJvdXRcIiBjbGFzc05hbWU9XCJweS0yMCBsZzpweS0zMiBiZy1ncmFkaWVudC10by1iciBmcm9tLVt2YXIoLS1uZXV0cmFsLTUwKV0gdG8td2hpdGVcIj5cbiAgICA1OVx0ICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXIgbXgtYXV0byBweC00IHNtOnB4LTYgbGc6cHgtOFwiPlxuICAgIDYwXHQgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JpZCBncmlkLWNvbHMtMSBsZzpncmlkLWNvbHMtMiBnYXAtMTIgbGc6Z2FwLTE2IGl0ZW1zLWNlbnRlclwiPlxuICAgIDYxXHQgICAgICAgICAgey8qIENvbnRlbnQgKi99XG4gICAgNjJcdCAgICAgICAgICA8bW90aW9uLmRpdlxuICAgIDYzXHQgICAgICAgICAgICBpbml0aWFsPXt7IG9wYWNpdHk6IDAsIHg6IC01MCB9fVxuICAgIDY0XHQgICAgICAgICAgICB3aGlsZUluVmlldz17eyBvcGFjaXR5OiAxLCB4OiAwIH19XG4gICAgNjVcdCAgICAgICAgICAgIHZpZXdwb3J0PXt7IG9uY2U6IHRydWUgfX1cbiAgICA2Nlx0ICAgICAgICAgICAgdHJhbnNpdGlvbj17eyBkdXJhdGlvbjogMC44IH19XG4gICAgNjdcdCAgICAgICAgICA+XG4gICAgNjhcdCAgICAgICAgICAgIDxoMiBjbGFzc05hbWU9XCJ0ZXh0LTN4bCBzbTp0ZXh0LTR4bCBsZzp0ZXh0LTV4bCBmb250LWJvbGQgdGV4dC1bdmFyKC0tbmV1dHJhbC05MDApXSBtYi02XCI+XG4gICAgNjlcdCAgICAgICAgICAgICAgQWJvdXRcbiAgICA3MFx0ICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJibG9jayBiZy1ncmFkaWVudC10by1yIGZyb20tW3ZhcigtLXByaW1hcnkpXSB0by1bdmFyKC0tc2Vjb25kYXJ5KV0gYmctY2xpcC10ZXh0IHRleHQtdHJhbnNwYXJlbnRcIj5cbiAgICA3MVx0ICAgICAgICAgICAgICAgIEFyYWJpdGVzIEFnZW5jeVxuICAgIDcyXHQgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICA3M1x0ICAgICAgICAgICAgPC9oMj5cbiAgICA3NFx0ICAgICAgICAgICAgXG4gICAgNzVcdCAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3BhY2UteS02IHRleHQtbGcgdGV4dC1bdmFyKC0tbmV1dHJhbC02MDApXSBsZWFkaW5nLXJlbGF4ZWRcIj5cbiAgICA3Nlx0ICAgICAgICAgICAgICA8cD5cbiAgICA3N1x0ICAgICAgICAgICAgICAgIFdlJ3JlIGEgcGFzc2lvbmF0ZSB0ZWFtIG9mIGRpZ2l0YWwgaW5ub3ZhdG9ycyBiYXNlZCBpbiBEdWJhaSwgZGVkaWNhdGVkIHRvIGhlbHBpbmcgXG4gICAgNzhcdCAgICAgICAgICAgICAgICBidXNpbmVzc2VzIHRocml2ZSBpbiB0aGUgZGlnaXRhbCBsYW5kc2NhcGUuIE91ciBleHBlcnRpc2Ugc3BhbnMgYWNyb3NzIHdlYiBkZXZlbG9wbWVudCwgXG4gICAgNzlcdCAgICAgICAgICAgICAgICBtb2JpbGUgYXBwbGljYXRpb25zLCBhbmQgY3VzdG9tIHNvZnR3YXJlIHNvbHV0aW9ucy5cbiAgICA4MFx0ICAgICAgICAgICAgICA8L3A+XG4gICAgODFcdCAgICAgICAgICAgICAgXG4gICAgODJcdCAgICAgICAgICAgICAgPHA+XG4gICAgODNcdCAgICAgICAgICAgICAgICBXaGF0IHNldHMgdXMgYXBhcnQgaXMgb3VyIGRlZXAgdW5kZXJzdGFuZGluZyBvZiBEdWJhaSdzIHVuaXF1ZSBidXNpbmVzcyBlbnZpcm9ubWVudCBcbiAgICA4NFx0ICAgICAgICAgICAgICAgIGFuZCBvdXIgY29tbWl0bWVudCB0byBkZWxpdmVyaW5nIHNvbHV0aW9ucyB0aGF0IG5vdCBvbmx5IGxvb2sgc3R1bm5pbmcgYnV0IGRyaXZlIFxuICAgIDg1XHQgICAgICAgICAgICAgICAgcmVhbCBidXNpbmVzcyByZXN1bHRzLlxuICAgIDg2XHQgICAgICAgICAgICAgIDwvcD5cbiAgICA4N1x0ICAgICAgICAgICAgICBcbiAgICA4OFx0ICAgICAgICAgICAgICA8cD5cbiAgICA4OVx0ICAgICAgICAgICAgICAgIEZyb20gc3RhcnR1cHMgdG8gZXN0YWJsaXNoZWQgZW50ZXJwcmlzZXMsIHdlJ3ZlIGhlbHBlZCBidXNpbmVzc2VzIGFjcm9zcyByZWFsIGVzdGF0ZSwgXG4gICAgOTBcdCAgICAgICAgICAgICAgICBlLWNvbW1lcmNlLCB3ZWxsbmVzcywgdG91cmlzbSwgYW5kIGZpbnRlY2ggc2VjdG9ycyB0cmFuc2Zvcm0gdGhlaXIgZGlnaXRhbCBwcmVzZW5jZSBcbiAgICA5MVx0ICAgICAgICAgICAgICAgIGFuZCBhY2hpZXZlIHRoZWlyIGdyb3d0aCBvYmplY3RpdmVzLlxuICAgIDkyXHQgICAgICAgICAgICAgIDwvcD5cbiAgICA5M1x0ICAgICAgICAgICAgPC9kaXY+XG4gICAgOTRcdFxuICAgIDk1XHQgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm10LThcIj5cbiAgICA5Nlx0ICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgOTdcdCAgICAgICAgICAgICAgICBzaXplPVwibGdcIlxuICAgIDk4XHQgICAgICAgICAgICAgICAgdmFyaWFudD1cInByaW1hcnlcIlxuICAgIDk5XHQgICAgICAgICAgICAgICAgaHJlZj1cIi9hYm91dFwiXG4gICAxMDBcdCAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJncm91cFwiXG4gICAxMDFcdCAgICAgICAgICAgICAgPlxuICAgMTAyXHQgICAgICAgICAgICAgICAgTGVhcm4gTW9yZSBBYm91dCBVc1xuICAgMTAzXHQgICAgICAgICAgICAgICAgPEFycm93UmlnaHQgY2xhc3NOYW1lPVwibWwtMiBoLTUgdy01IHRyYW5zaXRpb24tdHJhbnNmb3JtIGdyb3VwLWhvdmVyOnRyYW5zbGF0ZS14LTFcIiAvPlxuICAgMTA0XHQgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgMTA1XHQgICAgICAgICAgICA8L2Rpdj5cbiAgIDEwNlx0ICAgICAgICAgIDwvbW90aW9uLmRpdj5cbiAgIDEwN1x0XG4gICAxMDhcdCAgICAgICAgICB7LyogU3RhdHMgR3JpZCAqL31cbiAgIDEwOVx0ICAgICAgICAgIDxtb3Rpb24uZGl2XG4gICAxMTBcdCAgICAgICAgICAgIHZhcmlhbnRzPXtjb250YWluZXJWYXJpYW50c31cbiAgIDExMVx0ICAgICAgICAgICAgaW5pdGlhbD1cImhpZGRlblwiXG4gICAxMTJcdCAgICAgICAgICAgIHdoaWxlSW5WaWV3PVwidmlzaWJsZVwiXG4gICAxMTNcdCAgICAgICAgICAgIHZpZXdwb3J0PXt7IG9uY2U6IHRydWUgfX1cbiAgIDExNFx0ICAgICAgICAgICAgY2xhc3NOYW1lPVwiZ3JpZCBncmlkLWNvbHMtMiBnYXAtNlwiXG4gICAxMTVcdCAgICAgICAgICA+XG4gICAxMTZcdCAgICAgICAgICAgIHtzdGF0cy5tYXAoKHN0YXQsIGluZGV4KSA9PiB7XG4gICAxMTdcdCAgICAgICAgICAgICAgY29uc3QgSWNvbiA9IHN0YXQuaWNvbjtcbiAgIDExOFx0ICAgICAgICAgICAgICByZXR1cm4gKFxuICAgMTE5XHQgICAgICAgICAgICAgICAgPG1vdGlvbi5kaXZcbiAgIDEyMFx0ICAgICAgICAgICAgICAgICAga2V5PXtzdGF0LmxhYmVsfVxuICAgMTIxXHQgICAgICAgICAgICAgICAgICB2YXJpYW50cz17aXRlbVZhcmlhbnRzfVxuICAgMTIyXHQgICAgICAgICAgICAgICAgICB3aGlsZUhvdmVyPXt7IFxuICAgMTIzXHQgICAgICAgICAgICAgICAgICAgIHNjYWxlOiAxLjA1LFxuICAgMTI0XHQgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IHsgZHVyYXRpb246IDAuMiB9XG4gICAxMjVcdCAgICAgICAgICAgICAgICAgIH19XG4uLi5cbiAgIDE1Mlx0XG4gICAxNTNcdCAgICAgICAgICAgICAgICAgICAgey8qIEhvdmVyIEVmZmVjdCAqL31cbiAgIDE1NFx0ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFic29sdXRlIGluc2V0LTAgcm91bmRlZC0yeGwgYmctZ3JhZGllbnQtdG8tYnIgZnJvbS1bdmFyKC0tcHJpbWFyeSldLzUgdG8tW3ZhcigtLXNlY29uZGFyeSldLzUgb3BhY2l0eS0wIGdyb3VwLWhvdmVyOm9wYWNpdHktMTAwIHRyYW5zaXRpb24tb3BhY2l0eSBkdXJhdGlvbi0zMDAgcG9pbnRlci1ldmVudHMtbm9uZVwiIC8+XG4gICAxNTVcdCAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgMTU2XHQgICAgICAgICAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgMTU3XHQgICAgICAgICAgICAgICk7XG4gICAxNThcdCAgICAgICAgICAgIH0pfVxuICAgMTU5XHQgICAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgMTYwXHQgICAgICAgIDwvZGl2PlxuICAgMTYxXHRcbiAgIDE2Mlx0ICAgICAgICB7LyogVmFsdWVzIFNlY3Rpb24gKi99XG4gICAxNjNcdCAgICAgICAgPG1vdGlvbi5kaXZcbiAgIDE2NFx0ICAgICAgICAgIGluaXRpYWw9e3sgb3BhY2l0eTogMCwgeTogNTAgfX1cbiAgIDE2NVx0ICAgICAgICAgIHdoaWxlSW5WaWV3PXt7IG9wYWNpdHk6IDEsIHk6IDAgfX1cbiAgIDE2Nlx0ICAgICAgICAgIHZpZXdwb3J0PXt7IG9uY2U6IHRydWUgfX1cbiAgIDE2N1x0ICAgICAgICAgIHRyYW5zaXRpb249e3sgZHVyYXRpb246IDAuOCwgZGVsYXk6IDAuMyB9fVxuICAgMTY4XHQgICAgICAgICAgY2xhc3NOYW1lPVwibXQtMjAgbGc6bXQtMzJcIlxuICAgMTY5XHQgICAgICAgID5cbiAgIDE3MFx0ICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXIgbWItMTJcIj5cbiAgIDE3MVx0ICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cInRleHQtMnhsIGxnOnRleHQtM3hsIGZvbnQtYm9sZCB0ZXh0LVt2YXIoLS1uZXV0cmFsLTkwMCldIG1iLTRcIj5cbiAgIDE3Mlx0ICAgICAgICAgICAgICBPdXIgQ29yZSBWYWx1ZXNcbiAgIDE3M1x0ICAgICAgICAgICAgPC9oMz5cbiAgIDE3NFx0ICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1sZyB0ZXh0LVt2YXIoLS1uZXV0cmFsLTYwMCldIG1heC13LTJ4bCBteC1hdXRvXCI+XG4gICAxNzVcdCAgICAgICAgICAgICAgVGhlIHByaW5jaXBsZXMgdGhhdCBndWlkZSBldmVyeXRoaW5nIHdlIGRvXG4gICAxNzZcdCAgICAgICAgICAgIDwvcD5cbiAgIDE3N1x0ICAgICAgICAgIDwvZGl2PlxuICAgMTc4XHRcbiAgIDE3OVx0ICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JpZCBncmlkLWNvbHMtMSBtZDpncmlkLWNvbHMtMyBnYXAtOFwiPlxuICAgMTgwXHQgICAgICAgICAgICB7W1xuICAgMTgxXHQgICAgICAgICAgICAgIHtcbiAgIDE4Mlx0ICAgICAgICAgICAgICAgIHRpdGxlOiBcIklubm92YXRpb25cIixcbiAgIDE4M1x0ICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIldlIHN0YXkgYWhlYWQgb2YgdGhlIGN1cnZlIHdpdGggY3V0dGluZy1lZGdlIHRlY2hub2xvZ2llcyBhbmQgY3JlYXRpdmUgc29sdXRpb25zLlwiLFxuICAgMTg0XHQgICAgICAgICAgICAgICAgZW1vamk6IFwi8J+agFwiXG4gICAxODVcdCAgICAgICAgICAgICAgfSxcbiAgIDE4Nlx0ICAgICAgICAgICAgICB7XG4gICAxODdcdCAgICAgICAgICAgICAgICB0aXRsZTogXCJRdWFsaXR5XCIsXG4gICAxODhcdCAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJFdmVyeSBwcm9qZWN0IHJlY2VpdmVzIG91ciBmdWxsIGF0dGVudGlvbiB0byBkZXRhaWwgYW5kIGNvbW1pdG1lbnQgdG8gZXhjZWxsZW5jZS5cIixcbiAgIDE4OVx0ICAgICAgICAgICAgICAgIGVtb2ppOiBcIuKtkFwiXG4gICAxOTBcdCAgICAgICAgICAgICAgfSxcbiAgIDE5MVx0ICAgICAgICAgICAgICB7XG4gICAxOTJcdCAgICAgICAgICAgICAgICB0aXRsZTogXCJQYXJ0bmVyc2hpcFwiLFxuICAgMTkzXHQgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiV2Ugd29yayBjbG9zZWx5IHdpdGggb3VyIGNsaWVudHMgYXMgdHJ1c3RlZCBwYXJ0bmVycyBpbiB0aGVpciBzdWNjZXNzIGpvdXJuZXkuXCIsXG4gICAxOTRcdCAgICAgICAgICAgICAgICBlbW9qaTogXCLwn6SdXCJcbiAgIDE5NVx0ICAgICAgICAgICAgICB9XG4gICAxOTZcdCAgICAgICAgICAgIF0ubWFwKCh2YWx1ZSwgaW5kZXgpID0+IChcbiAgIDE5N1x0ICAgICAgICAgICAgICA8bW90aW9uLmRpdlxuICAgMTk4XHQgICAgICAgICAgICAgICAga2V5PXt2YWx1ZS50aXRsZX1cbiAgIDE5OVx0ICAgICAgICAgICAgICAgIGluaXRpYWw9e3sgb3BhY2l0eTogMCwgeTogMzAgfX1cbiAgIDIwMFx0ICAgICAgICAgICAgICAgIHdoaWxlSW5WaWV3PXt7IG9wYWNpdHk6IDEsIHk6IDAgfX1cbiAgIDIwMVx0ICAgICAgICAgICAgICAgIHZpZXdwb3J0PXt7IG9uY2U6IHRydWUgfX1cbiAgIDIwMlx0ICAgICAgICAgICAgICAgIHRyYW5zaXRpb249e3sgZHVyYXRpb246IDAuNiwgZGVsYXk6IGluZGV4ICogMC4xIH19XG4gICAyMDNcdCAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlclwiXG4gICAyMDRcdCAgICAgICAgICAgICAgPlxuICAgMjA1XHQgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LTR4bCBtYi00XCI+e3ZhbHVlLmVtb2ppfTwvZGl2PlxuICAgMjA2XHQgICAgICAgICAgICAgICAgPGg0IGNsYXNzTmFtZT1cInRleHQteGwgZm9udC1ib2xkIHRleHQtW3ZhcigtLW5ldXRyYWwtOTAwKV0gbWItM1wiPlxuICAgMjA3XHQgICAgICAgICAgICAgICAgICB7dmFsdWUudGl0bGV9XG4gICAyMDhcdCAgICAgICAgICAgICAgICA8L2g0PlxuICAgMjA5XHQgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1bdmFyKC0tbmV1dHJhbC02MDApXSBsZWFkaW5nLXJlbGF4ZWRcIj5cbiAgIDIxMFx0ICAgICAgICAgICAgICAgICAge3ZhbHVlLmRlc2NyaXB0aW9ufVxuICAgMjExXHQgICAgICAgICAgICAgICAgPC9wPlxuICAgMjEyXHQgICAgICAgICAgICAgIDwvbW90aW9uLmRpdj5cbiAgIDIxM1x0ICAgICAgICAgICAgKSl9XG4gICAyMTRcdCAgICAgICAgICA8L2Rpdj5cbiAgIDIxNVx0ICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAyMTZcdCAgICAgIDwvZGl2PlxuICAgMjE3XHQgICAgPC9zZWN0aW9uPlxuICAgMjE4XHQgICk7XG4gICAyMTlcdH1cbi4uLlxuUGF0aDogc3JjL2NvbXBvbmVudHMvc2VjdGlvbnMvQ1RBLnRzeFxuICAgICAxXHRcInVzZSBjbGllbnRcIjtcbiAgICAgMlx0XG4gICAgIDNcdGltcG9ydCB7IG1vdGlvbiB9IGZyb20gXCJmcmFtZXItbW90aW9uXCI7XG4gICAgIDRcdGltcG9ydCB7IEJ1dHRvbiB9IGZyb20gXCJAL2NvbXBvbmVudHMvdWkvQnV0dG9uXCI7XG4gICAgIDVcdGltcG9ydCB7IE1lc3NhZ2VDaXJjbGUsIENhbGVuZGFyLCBBcnJvd1JpZ2h0LCBQaG9uZSwgTWFpbCB9IGZyb20gXCJsdWNpZGUtcmVhY3RcIjtcbi4uLlxuUGF0aDogc3JjL2NvbXBvbmVudHMvc2VjdGlvbnMvRm9vdGVyLnRzeFxuLi4uXG4gICAgNzlcdFxuICAgIDgwXHQgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lciBteC1hdXRvIHB4LTQgc206cHgtNiBsZzpweC04IHJlbGF0aXZlIHotMTBcIj5cbiAgICA4MVx0ICAgICAgICB7LyogTWFpbiBGb290ZXIgQ29udGVudCAqL31cbiAgICA4Mlx0ICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInB5LTE2IGxnOnB5LTIwXCI+XG4gICAgODNcdCAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdyaWQgZ3JpZC1jb2xzLTEgbGc6Z3JpZC1jb2xzLTQgZ2FwLTEyIGxnOmdhcC04XCI+XG4gICAgODRcdCAgICAgICAgICAgIHsvKiBDb21wYW55IEluZm8gKi99XG4gICAgODVcdCAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGc6Y29sLXNwYW4tMVwiPlxuICAgIDg2XHQgICAgICAgICAgICAgIDxtb3Rpb24uZGl2XG4gICAgODdcdCAgICAgICAgICAgICAgICBpbml0aWFsPXt7IG9wYWNpdHk6IDAsIHk6IDMwIH19XG4gICAgODhcdCAgICAgICAgICAgICAgICB3aGlsZUluVmlldz17eyBvcGFjaXR5OiAxLCB5OiAwIH19XG4gICAgODlcdCAgICAgICAgICAgICAgICB2aWV3cG9ydD17eyBvbmNlOiB0cnVlIH19XG4gICAgOTBcdCAgICAgICAgICAgICAgICB0cmFuc2l0aW9uPXt7IGR1cmF0aW9uOiAwLjYgfX1cbiAgICA5MVx0ICAgICAgICAgICAgICA+XG4gICAgOTJcdCAgICAgICAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwidGV4dC0yeGwgZm9udC1ib2xkIGJnLWdyYWRpZW50LXRvLXIgZnJvbS1bdmFyKC0tcHJpbWFyeSldIHRvLVt2YXIoLS1zZWNvbmRhcnkpXSBiZy1jbGlwLXRleHQgdGV4dC10cmFuc3BhcmVudCBtYi00XCI+XG4gICAgOTNcdCAgICAgICAgICAgICAgICAgIEFyYWJpdGVzXG4gICAgOTRcdCAgICAgICAgICAgICAgICA8L2gzPlxuICAgIDk1XHQgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1bdmFyKC0tbmV1dHJhbC00MDApXSBsZWFkaW5nLXJlbGF4ZWQgbWItNlwiPlxuICAgIDk2XHQgICAgICAgICAgICAgICAgICBEdWJhaSdzIHByZW1pZXIgZGlnaXRhbCBhZ2VuY3ksIHRyYW5zZm9ybWluZyBidXNpbmVzc2VzIHRocm91Z2ggaW5ub3ZhdGl2ZSBcbiAgICA5N1x0ICAgICAgICAgICAgICAgICAgd2ViIHNvbHV0aW9ucyBhbmQgY3VzdG9tIHNvZnR3YXJlIGRldmVsb3BtZW50LlxuICAgIDk4XHQgICAgICAgICAgICAgICAgPC9wPlxuLi4uXG4gICAxMjFcdFxuICAgMTIyXHQgICAgICAgICAgICB7LyogTGlua3MgU2VjdGlvbnMgKi99XG4gICAxMjNcdCAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGc6Y29sLXNwYW4tMlwiPlxuICAgMTI0XHQgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JpZCBncmlkLWNvbHMtMiBtZDpncmlkLWNvbHMtNCBnYXAtOFwiPlxuICAgMTI1XHQgICAgICAgICAgICAgICAge09iamVjdC5lbnRyaWVzKGZvb3RlckxpbmtzKS5tYXAoKFtjYXRlZ29yeSwgbGlua3NdLCBpbmRleCkgPT4gKFxuICAgMTI2XHQgICAgICAgICAgICAgICAgICA8bW90aW9uLmRpdlxuICAgMTI3XHQgICAgICAgICAgICAgICAgICAgIGtleT17Y2F0ZWdvcnl9XG4gICAxMjhcdCAgICAgICAgICAgICAgICAgICAgaW5pdGlhbD17eyBvcGFjaXR5OiAwLCB5OiAzMCB9fVxuICAgMTI5XHQgICAgICAgICAgICAgICAgICAgIHdoaWxlSW5WaWV3PXt7IG9wYWNpdHk6IDEsIHk6IDAgfX1cbiAgIDEzMFx0ICAgICAgICAgICAgICAgICAgICB2aWV3cG9ydD17eyBvbmNlOiB0cnVlIH19XG4gICAxMzFcdCAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbj17eyBkdXJhdGlvbjogMC42LCBkZWxheTogaW5kZXggKiAwLjEgfX1cbiAgIDEzMlx0ICAgICAgICAgICAgICAgICAgPlxuICAgMTMzXHQgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzc05hbWU9XCJ0ZXh0LXdoaXRlIGZvbnQtc2VtaWJvbGQgbWItNCBjYXBpdGFsaXplXCI+XG4gICAxMzRcdCAgICAgICAgICAgICAgICAgICAgICB7Y2F0ZWdvcnl9XG4gICAxMzVcdCAgICAgICAgICAgICAgICAgICAgPC9oND5cbiAgIDEzNlx0ICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwic3BhY2UteS0zXCI+XG4gICAxMzdcdCAgICAgICAgICAgICAgICAgICAgICB7bGlua3MubWFwKChsaW5rKSA9PiAoXG4gICAxMzhcdCAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBrZXk9e2xpbmsubmFtZX0+XG4gICAxMzlcdCAgICAgICAgICAgICAgICAgICAgICAgICAgPGFcbiAgIDE0MFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9e2xpbmsuaHJlZn1cbiAgIDE0MVx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInRleHQtW3ZhcigtLW5ldXRyYWwtNDAwKV0gaG92ZXI6dGV4dC13aGl0ZSB0cmFuc2l0aW9uLWNvbG9ycyBkdXJhdGlvbi0yMDAgdGV4dC1zbVwiXG4gICAxNDJcdCAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgMTQzXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAge2xpbmsubmFtZX1cbiAgIDE0NFx0ICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAxNDVcdCAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAxNDZcdCAgICAgICAgICAgICAgICAgICAgICApKX1cbiAgIDE0N1x0ICAgICAgICAgICAgICAgICAgICA8L3VsPlxuICAgMTQ4XHQgICAgICAgICAgICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAxNDlcdCAgICAgICAgICAgICAgICApKX1cbiAgIDE1MFx0ICAgICAgICAgICAgICA8L2Rpdj5cbiAgIDE1MVx0ICAgICAgICAgICAgPC9kaXY+XG4uLi5cbiAgIDIwMVx0ICAgICAgICAgICAgXG4gICAyMDJcdCAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgc3BhY2UteC02XCI+XG4gICAyMDNcdCAgICAgICAgICAgICAgPGFcbiAgIDIwNFx0ICAgICAgICAgICAgICAgIGhyZWY9XCIvcHJpdmFjeVwiXG4gICAyMDVcdCAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ0ZXh0LVt2YXIoLS1uZXV0cmFsLTQwMCldIGhvdmVyOnRleHQtd2hpdGUgdHJhbnNpdGlvbi1jb2xvcnMgZHVyYXRpb24tMjAwIHRleHQtc21cIlxuICAgMjA2XHQgICAgICAgICAgICAgID5cbiAgIDIwN1x0ICAgICAgICAgICAgICAgIFByaXZhY3kgUG9saWN5XG4gICAyMDhcdCAgICAgICAgICAgICAgPC9hPlxuICAgMjA5XHQgICAgICAgICAgICAgIDxhXG4gICAyMTBcdCAgICAgICAgICAgICAgICBocmVmPVwiL3Rlcm1zXCJcbiAgIDIxMVx0ICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInRleHQtW3ZhcigtLW5ldXRyYWwtNDAwKV0gaG92ZXI6dGV4dC13aGl0ZSB0cmFuc2l0aW9uLWNvbG9ycyBkdXJhdGlvbi0yMDAgdGV4dC1zbVwiXG4gICAyMTJcdCAgICAgICAgICAgICAgPlxuICAgMjEzXHQgICAgICAgICAgICAgICAgVGVybXMgb2YgU2VydmljZVxuICAgMjE0XHQgICAgICAgICAgICAgIDwvYT5cbiAgIDIxNVx0ICAgICAgICAgICAgICBcbiAgIDIxNlx0ICAgICAgICAgICAgICB7LyogU2Nyb2xsIHRvIFRvcCAqL31cbiAgIDIxN1x0ICAgICAgICAgICAgICA8bW90aW9uLmJ1dHRvblxuICAgMjE4XHQgICAgICAgICAgICAgICAgb25DbGljaz17c2Nyb2xsVG9Ub3B9XG4gICAyMTlcdCAgICAgICAgICAgICAgICB3aGlsZUhvdmVyPXt7IHNjYWxlOiAxLjEsIHk6IC0yIH19XG4gICAyMjBcdCAgICAgICAgICAgICAgICB3aGlsZVRhcD17eyBzY2FsZTogMC45NSB9fVxuICAgMjIxXHQgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidy0xMCBoLTEwIGJnLVt2YXIoLS1wcmltYXJ5KV0gcm91bmRlZC1sZyBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciBob3ZlcjpiZy1bdmFyKC0tcHJpbWFyeS1kYXJrKV0gdHJhbnNpdGlvbi1jb2xvcnMgZHVyYXRpb24tMzAwXCJcbiAgIDIyMlx0ICAgICAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJTY3JvbGwgdG8gdG9wXCJcbiAgIDIyM1x0ICAgICAgICAgICAgICA+XG4gICAyMjRcdCAgICAgICAgICAgICAgICA8QXJyb3dVcCBjbGFzc05hbWU9XCJ3LTUgaC01XCIgLz5cbiAgIDIyNVx0ICAgICAgICAgICAgICA8L21vdGlvbi5idXR0b24+XG4gICAyMjZcdCAgICAgICAgICAgIDwvZGl2PlxuICAgMjI3XHQgICAgICAgICAgPC9kaXY+XG4gICAyMjhcdCAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgMjI5XHQgICAgICA8L2Rpdj5cbiAgIDIzMFx0ICAgIDwvZm9vdGVyPlxuICAgMjMxXHQgICk7XG4gICAyMzJcdH1cbi4uLlxuUGF0aDogc3JjL2FwcC9sYXlvdXQudHN4XG4gICAgIDFcdGltcG9ydCB0eXBlIHsgTWV0YWRhdGEgfSBmcm9tIFwibmV4dFwiO1xuICAgICAyXHRpbXBvcnQgeyBJbnRlciwgUGxheWZhaXJfRGlzcGxheSB9IGZyb20gXCJuZXh0L2ZvbnQvZ29vZ2xlXCI7XG4gICAgIDNcdGltcG9ydCB7IEFuYWx5dGljcyB9IGZyb20gXCJAdmVyY2VsL2FuYWx5dGljcy9yZWFjdFwiO1xuICAgICA0XHRpbXBvcnQgXCIuL2dsb2JhbHMuY3NzXCI7XG4gICAgIDVcdFxuICAgICA2XHRjb25zdCBpbnRlciA9IEludGVyKHtcbiAgICAgN1x0ICB2YXJpYWJsZTogXCItLWZvbnQtaW50ZXJcIixcbiAgICAgOFx0ICBzdWJzZXRzOiBbXCJsYXRpblwiXSxcbiAgICAgOVx0ICBkaXNwbGF5OiBcInN3YXBcIixcbiAgICAxMFx0fSk7XG4gICAgMTFcdFxuICAgIDEyXHRjb25zdCBwbGF5ZmFpciA9IFBsYXlmYWlyX0Rpc3BsYXkoe1xuICAgIDEzXHQgIHZhcmlhYmxlOiBcIi0tZm9udC1wbGF5ZmFpclwiLFxuICAgIDE0XHQgIHN1YnNldHM6IFtcImxhdGluXCJdLFxuICAgIDE1XHQgIGRpc3BsYXk6IFwic3dhcFwiLFxuICAgIDE2XHR9KTtcbiAgICAxN1x0XG4gICAgMThcdGV4cG9ydCBjb25zdCBtZXRhZGF0YTogTWV0YWRhdGEgPSB7XG4gICAgMTlcdCAgdGl0bGU6IFwiQXJhYml0ZXMgRGlnaXRhbCBBZ2VuY3kgfCBDdXN0b20gV2Vic2l0ZXMgJiBTb2Z0d2FyZSBTb2x1dGlvbnMgaW4gRHViYWlcIixcbiAgICAyMFx0ICBkZXNjcmlwdGlvbjogXCJMZWFkaW5nIGRpZ2l0YWwgYWdlbmN5IGluIER1YmFpIHNwZWNpYWxpemluZyBpbiBjdXN0b20gd2Vic2l0ZXMsIGxhbmRpbmcgcGFnZXMsIGFuZCBzb2Z0d2FyZSBzb2x1dGlvbnMgZm9yIHJlYWwgZXN0YXRlLCBlLWNvbW1lcmNlLCB3ZWxsbmVzcywgdG91cmlzbSwgYW5kIGZpbnRlY2ggYnVzaW5lc3Nlcy5cIixcbiAgICAyMVx0ICBrZXl3b3JkczogXCJEdWJhaSBkaWdpdGFsIGFnZW5jeSwgY3VzdG9tIHdlYnNpdGVzIER1YmFpLCBsYW5kaW5nIHBhZ2VzIER1YmFpLCBzb2Z0d2FyZSBkZXZlbG9wbWVudCBEdWJhaSwgcmVhbCBlc3RhdGUgd2Vic2l0ZXMsIGUtY29tbWVyY2Ugc29sdXRpb25zXCIsXG4gICAgMjJcdCAgYXV0aG9yczogW3sgbmFtZTogXCJBcmFiaXRlcyBEaWdpdGFsIEFnZW5jeVwiIH1dLFxuICAgIDIzXHQgIGNyZWF0b3I6IFwiQXJhYml0ZXMgRGlnaXRhbCBBZ2VuY3lcIixcbiAgICAyNFx0ICBwdWJsaXNoZXI6IFwiQXJhYml0ZXMgRGlnaXRhbCBBZ2VuY3lcIixcbiAgICAyNVx0ICBtZXRhZGF0YUJhc2U6IG5ldyBVUkwoXCJodHRwczovL2FyYWJpdGVzLmNvbVwiKSxcbiAgICAyNlx0ICBvcGVuR3JhcGg6IHtcbiAgICAyN1x0ICAgIHR5cGU6IFwid2Vic2l0ZVwiLFxuICAgIDI4XHQgICAgbG9jYWxlOiBcImVuX1VTXCIsXG4gICAgMjlcdCAgICB1cmw6IFwiaHR0cHM6Ly9hcmFiaXRlcy5jb21cIixcbiAgICAzMFx0ICAgIHRpdGxlOiBcIkFyYWJpdGVzIERpZ2l0YWwgQWdlbmN5IHwgQ3VzdG9tIFdlYnNpdGVzICYgU29mdHdhcmUgU29sdXRpb25zIGluIER1YmFpXCIsXG4gICAgMzFcdCAgICBkZXNjcmlwdGlvbjogXCJMZWFkaW5nIGRpZ2l0YWwgYWdlbmN5IGluIER1YmFpIHNwZWNpYWxpemluZyBpbiBjdXN0b20gd2Vic2l0ZXMsIGxhbmRpbmcgcGFnZXMsIGFuZCBzb2Z0d2FyZSBzb2x1dGlvbnMgZm9yIHJlYWwgZXN0YXRlLCBlLWNvbW1lcmNlLCB3ZWxsbmVzcywgdG91cmlzbSwgYW5kIGZpbnRlY2ggYnVzaW5lc3Nlcy5cIixcbiAgICAzMlx0ICAgIHNpdGVOYW1lOiBcIkFyYWJpdGVzIERpZ2l0YWwgQWdlbmN5XCIsXG4gICAgMzNcdCAgICBpbWFnZXM6IFtcbiAgICAzNFx0ICAgICAge1xuICAgIDM1XHQgICAgICAgIHVybDogXCIvb2ctaW1hZ2UuanBnXCIsXG4gICAgMzZcdCAgICAgICAgd2lkdGg6IDEyMDAsXG4gICAgMzdcdCAgICAgICAgaGVpZ2h0OiA2MzAsXG4gICAgMzhcdCAgICAgICAgYWx0OiBcIkFyYWJpdGVzIERpZ2l0YWwgQWdlbmN5IC0gRHViYWkncyBQcmVtaWVyIFdlYiBEZXZlbG9wbWVudCBDb21wYW55XCIsXG4gICAgMzlcdCAgICAgIH0sXG4gICAgNDBcdCAgICBdLFxuICAgIDQxXHQgIH0sXG4gICAgNDJcdCAgdHdpdHRlcjoge1xuICAgIDQzXHQgICAgY2FyZDogXCJzdW1tYXJ5X2xhcmdlX2ltYWdlXCIsXG4gICAgNDRcdCAgICB0aXRsZTogXCJBcmFiaXRlcyBEaWdpdGFsIEFnZW5jeSB8IEN1c3RvbSBXZWJzaXRlcyAmIFNvZnR3YXJlIFNvbHV0aW9ucyBpbiBEdWJhaVwiLFxuICAgIDQ1XHQgICAgZGVzY3JpcHRpb246IFwiTGVhZGluZyBkaWdpdGFsIGFnZW5jeSBpbiBEdWJhaSBzcGVjaWFsaXppbmcgaW4gY3VzdG9tIHdlYnNpdGVzLCBsYW5kaW5nIHBhZ2VzLCBhbmQgc29mdHdhcmUgc29sdXRpb25zIGZvciByZWFsIGVzdGF0ZSwgZS1jb21tZXJjZSwgd2VsbG5lc3MsIHRvdXJpc20sIGFuZCBmaW50ZWNoIGJ1c2luZXNzZXMuXCIsXG4gICAgNDZcdCAgICBpbWFnZXM6IFtcIi9vZy1pbWFnZS5qcGdcIl0sXG4gICAgNDdcdCAgfSxcbiAgICA0OFx0ICByb2JvdHM6IHtcbiAgICA0OVx0ICAgIGluZGV4OiB0cnVlLFxuICAgIDUwXHQgICAgZm9sbG93OiB0cnVlLFxuICAgIDUxXHQgICAgZ29vZ2xlQm90OiB7XG4gICAgNTJcdCAgICAgIGluZGV4OiB0cnVlLFxuICAgIDUzXHQgICAgICBmb2xsb3c6IHRydWUsXG4gICAgNTRcdCAgICAgIFwibWF4LXZpZGVvLXByZXZpZXdcIjogLTEsXG4gICAgNTVcdCAgICAgIFwibWF4LWltYWdlLXByZXZpZXdcIjogXCJsYXJnZVwiLFxuICAgIDU2XHQgICAgICBcIm1heC1zbmlwcGV0XCI6IC0xLFxuICAgIDU3XHQgICAgfSxcbiAgICA1OFx0ICB9LFxuICAgIDU5XHR9O1xuICAgIDYwXHRcbiAgICA2MVx0ZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUm9vdExheW91dCh7XG4gICAgNjJcdCAgY2hpbGRyZW4sXG4gICAgNjNcdH06IFJlYWRvbmx5PHtcbiAgICA2NFx0ICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlO1xuICAgIDY1XHR9Pikge1xuICAgIDY2XHQgIHJldHVybiAoXG4gICAgNjdcdCAgICA8aHRtbCBsYW5nPVwiZW5cIiBjbGFzc05hbWU9XCJzY3JvbGwtc21vb3RoXCI+XG4gICAgNjhcdCAgICAgIDxib2R5XG4gICAgNjlcdCAgICAgICAgY2xhc3NOYW1lPXtgJHtpbnRlci52YXJpYWJsZX0gJHtwbGF5ZmFpci52YXJpYWJsZX0gZm9udC1zYW5zIGFudGlhbGlhc2VkIGJnLXdoaXRlIHRleHQtZ3JheS05MDBgfVxuICAgIDcwXHQgICAgICA+XG4gICAgNzFcdCAgICAgICAge2NoaWxkcmVufVxuICAgIDcyXHQgICAgICAgIDxBbmFseXRpY3MgLz5cbiAgICA3M1x0ICAgICAgPC9ib2R5PlxuICAgIDc0XHQgICAgPC9odG1sPlxuICAgIDc1XHQgICk7XG4gICAgNzZcdH1cbi4uLlxuUGF0aDogc3JjL2xpYi91dGlscy50c1xuICAgICAxXHRpbXBvcnQgeyB0eXBlIENsYXNzVmFsdWUsIGNsc3ggfSBmcm9tIFwiY2xzeFwiO1xuICAgICAyXHRpbXBvcnQgeyB0d01lcmdlIH0gZnJvbSBcInRhaWx3aW5kLW1lcmdlXCI7XG4gICAgIDNcdFxuICAgICA0XHRleHBvcnQgZnVuY3Rpb24gY24oLi4uaW5wdXRzOiBDbGFzc1ZhbHVlW10pIHtcbiAgICAgNVx0ICByZXR1cm4gdHdNZXJnZShjbHN4KGlucHV0cykpO1xuICAgICA2XHR9XG4uLi5cblBhdGg6IHNyYy9jb21wb25lbnRzL3NlY3Rpb25zL0hlcm8udHN4XG4gICAgIDFcdFwidXNlIGNsaWVudFwiO1xuICAgICAyXHRcbiAgICAgM1x0aW1wb3J0IHsgbW90aW9uIH0gZnJvbSBcImZyYW1lci1tb3Rpb25cIjtcbiAgICAgNFx0aW1wb3J0IHsgQnV0dG9uIH0gZnJvbSBcIkAvY29tcG9uZW50cy91aS9CdXR0b25cIjtcbiAgICAgNVx0aW1wb3J0IHsgQXJyb3dSaWdodCwgUGxheSB9IGZyb20gXCJsdWNpZGUtcmVhY3RcIjtcbiAgICAgNlx0XG4gICAgIDdcdGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEhlcm8oKSB7XG4gICAgIDhcdCAgcmV0dXJuIChcbiAgICAgOVx0ICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cInJlbGF0aXZlIG1pbi1oLXNjcmVlbiBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciBvdmVyZmxvdy1oaWRkZW4gYmctZ3JhZGllbnQtdG8tYnIgZnJvbS1bdmFyKC0tbmV1dHJhbC01MCldIHZpYS13aGl0ZSB0by1bdmFyKC0tbmV1dHJhbC0xMDApXVwiPlxuICAgIDEwXHQgICAgICB7LyogQmFja2dyb3VuZCBQYXR0ZXJuICovfVxuICAgIDExXHQgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFic29sdXRlIGluc2V0LTAgb3BhY2l0eS01XCI+XG4gICAgMTJcdCAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhYnNvbHV0ZSBpbnNldC0wXCIgc3R5bGU9e3tcbiAgICAxM1x0ICAgICAgICAgIGJhY2tncm91bmRJbWFnZTogYHJhZGlhbC1ncmFkaWVudChjaXJjbGUgYXQgMjUlIDI1JSwgdmFyKC0tcHJpbWFyeSkgMnB4LCB0cmFuc3BhcmVudCAycHgpLFxuICAgIDE0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICByYWRpYWwtZ3JhZGllbnQoY2lyY2xlIGF0IDc1JSA3NSUsIHZhcigtLXNlY29uZGFyeSkgMnB4LCB0cmFuc3BhcmVudCAycHgpYCxcbiAgICAxNVx0ICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnNjBweCA2MHB4J1xuICAgIDE2XHQgICAgICAgIH19IC8+XG4gICAgMTdcdCAgICAgIDwvZGl2PlxuICAgIDE4XHRcbiAgICAxOVx0ICAgICAgey8qIEZsb2F0aW5nIEVsZW1lbnRzICovfVxuICAgIDIwXHQgICAgICA8bW90aW9uLmRpdlxuICAgIDIxXHQgICAgICAgIGNsYXNzTmFtZT1cImFic29sdXRlIHRvcC0yMCBsZWZ0LTEwIHctMjAgaC0yMCBiZy1bdmFyKC0tYWNjZW50KV0gcm91bmRlZC1mdWxsIG9wYWNpdHktMTBcIlxuICAgIDIyXHQgICAgICAgIGFuaW1hdGU9e3tcbiAgICAyM1x0ICAgICAgICAgIHk6IFswLCAtMjAsIDBdLFxuICAgIDI0XHQgICAgICAgICAgcm90YXRlOiBbMCwgMTgwLCAzNjBdLFxuICAgIDI1XHQgICAgICAgIH19XG4gICAgMjZcdCAgICAgICAgdHJhbnNpdGlvbj17e1xuICAgIDI3XHQgICAgICAgICAgZHVyYXRpb246IDgsXG4gICAgMjhcdCAgICAgICAgICByZXBlYXQ6IEluZmluaXR5LFxuICAgIDI5XHQgICAgICAgICAgZWFzZTogXCJlYXNlSW5PdXRcIixcbiAgICAzMFx0ICAgICAgICB9fVxuICAgIDMxXHQgICAgICAvPlxuICAgIDMyXHQgICAgICA8bW90aW9uLmRpdlxuICAgIDMzXHQgICAgICAgIGNsYXNzTmFtZT1cImFic29sdXRlIGJvdHRvbS0yMCByaWdodC0xMCB3LTE2IGgtMTYgYmctW3ZhcigtLXNlY29uZGFyeSldIHJvdW5kZWQtZnVsbCBvcGFjaXR5LTEwXCJcbiAgICAzNFx0ICAgICAgICBhbmltYXRlPXt7XG4gICAgMzVcdCAgICAgICAgICB5OiBbMCwgMjAsIDBdLFxuICAgIDM2XHQgICAgICAgICAgcm90YXRlOiBbMzYwLCAxODAsIDBdLFxuICAgIDM3XHQgICAgICAgIH19XG4gICAgMzhcdCAgICAgICAgdHJhbnNpdGlvbj17e1xuICAgIDM5XHQgICAgICAgICAgZHVyYXRpb246IDYsXG4gICAgNDBcdCAgICAgICAgICByZXBlYXQ6IEluZmluaXR5LFxuICAgIDQxXHQgICAgICAgICAgZWFzZTogXCJlYXNlSW5PdXRcIixcbiAgICA0Mlx0ICAgICAgICB9fVxuICAgIDQzXHQgICAgICAvPlxuLi4uXG4gICAgODJcdFxuICAgIDgzXHQgICAgICAgICAgey8qIENUQSBCdXR0b25zICovfVxuICAgIDg0XHQgICAgICAgICAgPG1vdGlvbi5kaXZcbiAgICA4NVx0ICAgICAgICAgICAgaW5pdGlhbD17eyBvcGFjaXR5OiAwLCB5OiAzMCB9fVxuICAgIDg2XHQgICAgICAgICAgICBhbmltYXRlPXt7IG9wYWNpdHk6IDEsIHk6IDAgfX1cbiAgICA4N1x0ICAgICAgICAgICAgdHJhbnNpdGlvbj17eyBkdXJhdGlvbjogMC44LCBkZWxheTogMC42IH19XG4gICAgODhcdCAgICAgICAgICAgIGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgc206ZmxleC1yb3cgZ2FwLTQganVzdGlmeS1jZW50ZXIgaXRlbXMtY2VudGVyXCJcbiAgICA4OVx0ICAgICAgICAgID5cbiAgICA5MFx0ICAgICAgICAgICAgPEJ1dHRvblxuICAgIDkxXHQgICAgICAgICAgICAgIHNpemU9XCJsZ1wiXG4gICAgOTJcdCAgICAgICAgICAgICAgdmFyaWFudD1cInByaW1hcnlcIlxuICAgIDkzXHQgICAgICAgICAgICAgIGhyZWY9XCIjY29udGFjdFwiXG4gICAgOTRcdCAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZ3JvdXBcIlxuICAgIDk1XHQgICAgICAgICAgICA+XG4gICAgOTZcdCAgICAgICAgICAgICAgQm9vayBGcmVlIENvbnN1bHRhdGlvblxuICAgIDk3XHQgICAgICAgICAgICAgIDxBcnJvd1JpZ2h0IGNsYXNzTmFtZT1cIm1sLTIgaC01IHctNSB0cmFuc2l0aW9uLXRyYW5zZm9ybSBncm91cC1ob3Zlcjp0cmFuc2xhdGUteC0xXCIgLz5cbiAgICA5OFx0ICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgOTlcdCAgICAgICAgICAgIFxuICAgMTAwXHQgICAgICAgICAgICA8QnV0dG9uXG4gICAxMDFcdCAgICAgICAgICAgICAgc2l6ZT1cImxnXCJcbiAgIDEwMlx0ICAgICAgICAgICAgICB2YXJpYW50PVwib3V0bGluZVwiXG4gICAxMDNcdCAgICAgICAgICAgICAgaHJlZj1cIiNwb3J0Zm9saW9cIlxuICAgMTA0XHQgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImdyb3VwXCJcbiAgIDEwNVx0ICAgICAgICAgICAgPlxuICAgMTA2XHQgICAgICAgICAgICAgIDxQbGF5IGNsYXNzTmFtZT1cIm1yLTIgaC01IHctNVwiIC8+XG4gICAxMDdcdCAgICAgICAgICAgICAgU2VlIE91ciBXb3JrXG4gICAxMDhcdCAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgMTA5XHQgICAgICAgICAgPC9tb3Rpb24uZGl2PlxuLi4uXG5QYXRoOiBzcmMvY29tcG9uZW50cy91aS9CdXR0b24udHN4XG4gICAgIDFcdFwidXNlIGNsaWVudFwiO1xuICAgICAyXHRcbiAgICAgM1x0aW1wb3J0IHsgbW90aW9uIH0gZnJvbSBcImZyYW1lci1tb3Rpb25cIjtcbiAgICAgNFx0aW1wb3J0IHsgZm9yd2FyZFJlZiB9IGZyb20gXCJyZWFjdFwiO1xuICAgICA1XHRpbXBvcnQgeyBjbiB9IGZyb20gXCJAL2xpYi91dGlsc1wiO1xuICAgICA2XHRcbiAgICAgN1x0aW50ZXJmYWNlIEJ1dHRvblByb3BzIGV4dGVuZHMgUmVhY3QuQnV0dG9uSFRNTEF0dHJpYnV0ZXM8SFRNTEJ1dHRvbkVsZW1lbnQ+IHtcbiAgICAgOFx0ICB2YXJpYW50PzogXCJwcmltYXJ5XCIgfCBcInNlY29uZGFyeVwiIHwgXCJvdXRsaW5lXCIgfCBcImdob3N0XCI7XG4gICAgIDlcdCAgc2l6ZT86IFwic21cIiB8IFwibWRcIiB8IFwibGdcIjtcbiAgICAxMFx0ICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlO1xuICAgIDExXHQgIGhyZWY/OiBzdHJpbmc7XG4gICAgMTJcdCAgZXh0ZXJuYWw/OiBib29sZWFuO1xuICAgIDEzXHR9XG4uLi5cbiAgICAzMVx0XG4gICAgMzJcdCAgICBjb25zdCBjbGFzc2VzID0gY24oYmFzZUNsYXNzZXMsIHZhcmlhbnRzW3ZhcmlhbnRdLCBzaXplc1tzaXplXSwgY2xhc3NOYW1lKTtcbiAgICAzM1x0XG4gICAgMzRcdCAgICBjb25zdCBNb3Rpb25CdXR0b24gPSBtb3Rpb24uYnV0dG9uO1xuICAgIDM1XHRcbiAgICAzNlx0ICAgIGlmIChocmVmKSB7XG4gICAgMzdcdCAgICAgIHJldHVybiAoXG4gICAgMzhcdCAgICAgICAgPG1vdGlvbi5hXG4gICAgMzlcdCAgICAgICAgICBocmVmPXtocmVmfVxuICAgIDQwXHQgICAgICAgICAgdGFyZ2V0PXtleHRlcm5hbCA/IFwiX2JsYW5rXCIgOiB1bmRlZmluZWR9XG4gICAgNDFcdCAgICAgICAgICByZWw9e2V4dGVybmFsID8gXCJub29wZW5lciBub3JlZmVycmVyXCIgOiB1bmRlZmluZWR9XG4gICAgNDJcdCAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXN9XG4gICAgNDNcdCAgICAgICAgICB3aGlsZUhvdmVyPXt7IHNjYWxlOiAxLjAyIH19XG4gICAgNDRcdCAgICAgICAgICB3aGlsZVRhcD17eyBzY2FsZTogMC45OCB9fVxuICAgIDQ1XHQgICAgICAgICAgdHJhbnNpdGlvbj17eyB0eXBlOiBcInNwcmluZ1wiLCBzdGlmZm5lc3M6IDQwMCwgZGFtcGluZzogMTcgfX1cbiAgICA0Nlx0ICAgICAgICA+XG4gICAgNDdcdCAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgNDhcdCAgICAgICAgPC9tb3Rpb24uYT5cbiAgICA0OVx0ICAgICAgKTtcbiAgICA1MFx0ICAgIH1cbiAgICA1MVx0XG4gICAgNTJcdCAgICByZXR1cm4gKFxuICAgIDUzXHQgICAgICA8TW90aW9uQnV0dG9uXG4gICAgNTRcdCAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzfVxuICAgIDU1XHQgICAgICAgIHJlZj17cmVmfVxuICAgIDU2XHQgICAgICAgIHdoaWxlSG92ZXI9e3sgc2NhbGU6IDEuMDIgfX1cbiAgICA1N1x0ICAgICAgICB3aGlsZVRhcD17eyBzY2FsZTogMC45OCB9fVxuICAgIDU4XHQgICAgICAgIHRyYW5zaXRpb249e3sgdHlwZTogXCJzcHJpbmdcIiwgc3RpZmZuZXNzOiA0MDAsIGRhbXBpbmc6IDE3IH19XG4gICAgNTlcdCAgICAgICAgey4uLnByb3BzfVxuICAgIDYwXHQgICAgICA+XG4gICAgNjFcdCAgICAgICAge2NoaWxkcmVufVxuICAgIDYyXHQgICAgICA8L01vdGlvbkJ1dHRvbj5cbiAgICA2M1x0ICAgICk7XG4gICAgNjRcdCAgfVxuICAgIDY1XHQpO1xuICAgIDY2XHRcbiAgICA2N1x0QnV0dG9uLmRpc3BsYXlOYW1lID0gXCJCdXR0b25cIjtcbiAgICA2OFx0XG4gICAgNjlcdGV4cG9ydCB7IEJ1dHRvbiB9O1xuLi4uXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1XzAxU0Y3cXZlakN4RUZ3Wjc5aXQ3Tkg4eiJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkM6L1VzZXJzL2RhdGFtL0Rlc2t0b3AvYXJhYml0ZXMiLCJmb2xkZXJSb290IjoiQzovVXNlcnMvZGF0YW0vRGVza3RvcC9hcmFiaXRlcyJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMjdUMjE6MzI6MDYuNTMxWiIsInJlc3BvbnNlX3RleHQiOiJQZXJmZWN0ISBOb3cgSSBoYXZlIGEgY29tcHJlaGVuc2l2ZSB1bmRlcnN0YW5kaW5nIG9mIHRoZSBjb2RlYmFzZS4gTGV0IG1lIGNyZWF0ZSBhIGRldGFpbGVkIHBsYW4gZm9yIHRoZSBBYm91dCBVcyBwYWdlLlxuXG4jIyDwn5OLIERldGFpbGVkIFBsYW4gZm9yIEFib3V0IFVzIFBhZ2VcblxuQmFzZWQgb24gdGhlIGV4aXN0aW5nIGNvZGViYXNlIHN0cnVjdHVyZSBhbmQgZGVzaWduIHBhdHRlcm5zLCBoZXJlJ3MgbXkgcGxhbjpcblxuIyMjICoqRmlsZXMgdG8gQ3JlYXRlL01vZGlmeToqKlxuXG4xLiAqKmBzcmMvYXBwL2Fib3V0L3BhZ2UudHN4YCoqIC0gTWFpbiBBYm91dCBwYWdlIHJvdXRlXG4yLiAqKmBzcmMvY29tcG9uZW50cy9zZWN0aW9ucy9hYm91dC9BYm91dEhlcm8udHN4YCoqIC0gSGVybyBzZWN0aW9uIGZvciBBYm91dCBwYWdlXG4zLiAqKmBzcmMvY29tcG9uZW50cy9zZWN0aW9ucy9hYm91dC9PdXJTdG9yeS50c3hgKiogLSBTdG9yeSBuYXJyYXRpdmUgc2VjdGlvblxuNC4gKipgc3JjL2NvbXBvbmVudHMvc2VjdGlvbnMvYWJvdXQvVmFsdWVzLnRzeGAqKiAtIENvcmUgdmFsdWVzIHNlY3Rpb25cbjUuICoqYHNyYy9jb21wb25lbnRzL3NlY3Rpb25zL2Fib3V0L1N0YXRzLnRzeGAqKiAtIEFuaW1hdGVkIHN0YXRzL21pbGVzdG9uZXNcbjYuICoqYHNyYy9jb21wb25lbnRzL3NlY3Rpb25zL2Fib3V0L1RlYW0udHN4YCoqIC0gTWVldCB0aGUgdGVhbSBzZWN0aW9uXG43LiAqKmBzcmMvY29tcG9uZW50cy9zZWN0aW9ucy9hYm91dC9XaHlXb3JrV2l0aFVzLnRzeGAqKiAtIENUQSBzZWN0aW9uXG44LiAqKmBzcmMvY29tcG9uZW50cy91aS9OYXZpZ2F0aW9uLnRzeGAqKiAtIE5hdmlnYXRpb24gY29tcG9uZW50IGZvciBwYWdlIGxpbmtpbmdcblxuIyMjICoqRGVzaWduIENvbnNpc3RlbmN5OioqXG4tIFVzZSBleGlzdGluZyBjb2xvciBwYWxldHRlIChwcmltYXJ5IGJsdWUsIHNlY29uZGFyeSBnb2xkLCBhY2NlbnQgY3lhbilcbi0gTWFpbnRhaW4gSW50ZXIgKyBQbGF5ZmFpciBEaXNwbGF5IHR5cG9ncmFwaHlcbi0gRm9sbG93IGV4aXN0aW5nIGFuaW1hdGlvbiBwYXR0ZXJucyB3aXRoIEZyYW1lciBNb3Rpb25cbi0gVXNlIGNvbnNpc3RlbnQgc3BhY2luZyBhbmQgY29tcG9uZW50IHN0cnVjdHVyZVxuLSBJbXBsZW1lbnQgc2VtYW50aWMgSFRNTCBhbmQgYWNjZXNzaWJpbGl0eSBmZWF0dXJlc1xuXG4jIyMgKipDb250ZW50IFN0cmF0ZWd5OioqXG4tIENyZWF0ZSByZWFsaXN0aWMsIHByb2Zlc3Npb25hbCBjb3B5IHRoYXQgcmVmbGVjdHMgRHViYWkncyBidXNpbmVzcyBlbnZpcm9ubWVudFxuLSBGb2N1cyBvbiB0cnVzdC1idWlsZGluZyBhbmQgZXhwZXJ0aXNlIGRlbW9uc3RyYXRpb25cbi0gSW5jbHVkZSBhbmltYXRlZCBjb3VudGVycyBmb3Igc3RhdHNcbi0gTWFpbnRhaW4gcHJvZmVzc2lvbmFsIHlldCBhcHByb2FjaGFibGUgdG9uZVxuXG5MZXQgbWUgc3RhcnQgaW1wbGVtZW50aW5nIHRoaXMgcGxhbjpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI2ZTRkNjc0ZC02YWU3LTQ0MTMtODdmMS00YmI0ZWE3OTA5NzgiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxSHh0YzJCMUgzVEJpUkg4SlVacGg0cSIsInRvb2xfbmFtZSI6InNhdmUtZmlsZSIsImlucHV0X2pzb24iOiJ7XCJpbnN0cnVjdGlvbnNfcmVtaW5kZXJcIjogXCJMSU1JVCBUSEUgRklMRSBDT05URU5UIFRPIEFUIE1PU1QgMzAwIExJTkVTLiBJRiBNT1JFIENPTlRFTlQgTkVFRFMgVE8gQkUgQURERUQgVVNFIFRIRSBzdHItcmVwbGFjZS1lZGl0b3IgVE9PTCBUTyBFRElUIFRIRSBGSUxFIEFGVEVSIElUIEhBUyBCRUVOIENSRUFURUQuXCIsIFwicGF0aFwiOiBcInNyYy9jb21wb25lbnRzL3NlY3Rpb25zL2Fib3V0L0Fib3V0SGVyby50c3hcIiwgXCJmaWxlX2NvbnRlbnRcIjogXCJcXFwidXNlIGNsaWVudFxcXCI7XFxuXFxuaW1wb3J0IHsgbW90aW9uIH0gZnJvbSBcXFwiZnJhbWVyLW1vdGlvblxcXCI7XFxuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSBcXFwiQC9jb21wb25lbnRzL3VpL0J1dHRvblxcXCI7XFxuaW1wb3J0IHsgQXJyb3dSaWdodCwgVXNlcnMsIEhlYXJ0LCBaYXAgfSBmcm9tIFxcXCJsdWNpZGUtcmVhY3RcXFwiO1xcblxcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEFib3V0SGVybygpIHtcXG4gIHJldHVybiAoXFxuICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cXFwicmVsYXRpdmUgbWluLWgtc2NyZWVuIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIG92ZXJmbG93LWhpZGRlbiBiZy1ncmFkaWVudC10by1iciBmcm9tLVt2YXIoLS1uZXV0cmFsLTUwKV0gdmlhLXdoaXRlIHRvLVt2YXIoLS1uZXV0cmFsLTEwMCldXFxcIj5cXG4gICAgICB7LyogQmFja2dyb3VuZCBQYXR0ZXJuICovfVxcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJhYnNvbHV0ZSBpbnNldC0wIG9wYWNpdHktNVxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwiYWJzb2x1dGUgaW5zZXQtMFxcXCIgc3R5bGU9e3tcXG4gICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgcmFkaWFsLWdyYWRpZW50KGNpcmNsZSBhdCAyNSUgMjUlLCB2YXIoLS1wcmltYXJ5KSAycHgsIHRyYW5zcGFyZW50IDJweCksXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFkaWFsLWdyYWRpZW50KGNpcmNsZSBhdCA3NSUgNzUlLCB2YXIoLS1zZWNvbmRhcnkpIDJweCwgdHJhbnNwYXJlbnQgMnB4KWAsXFxuICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnNjBweCA2MHB4J1xcbiAgICAgICAgfX0gLz5cXG4gICAgICA8L2Rpdj5cXG5cXG4gICAgICB7LyogRmxvYXRpbmcgRWxlbWVudHMgKi99XFxuICAgICAgPG1vdGlvbi5kaXZcXG4gICAgICAgIGNsYXNzTmFtZT1cXFwiYWJzb2x1dGUgdG9wLTIwIGxlZnQtMTAgdy0yMCBoLTIwIGJnLVt2YXIoLS1hY2NlbnQpXSByb3VuZGVkLWZ1bGwgb3BhY2l0eS0xMFxcXCJcXG4gICAgICAgIGFuaW1hdGU9e3tcXG4gICAgICAgICAgeTogWzAsIC0yMCwgMF0sXFxuICAgICAgICAgIHJvdGF0ZTogWzAsIDE4MCwgMzYwXSxcXG4gICAgICAgIH19XFxuICAgICAgICB0cmFuc2l0aW9uPXt7XFxuICAgICAgICAgIGR1cmF0aW9uOiA4LFxcbiAgICAgICAgICByZXBlYXQ6IEluZmluaXR5LFxcbiAgICAgICAgICBlYXNlOiBcXFwiZWFzZUluT3V0XFxcIixcXG4gICAgICAgIH19XFxuICAgICAgLz5cXG4gICAgICA8bW90aW9uLmRpdlxcbiAgICAgICAgY2xhc3NOYW1lPVxcXCJhYnNvbHV0ZSBib3R0b20tMjAgcmlnaHQtMTAgdy0xNiBoLTE2IGJnLVt2YXIoLS1zZWNvbmRhcnkpXSByb3VuZGVkLWZ1bGwgb3BhY2l0eS0xMFxcXCJcXG4gICAgICAgIGFuaW1hdGU9e3tcXG4gICAgICAgICAgeTogWzAsIDIwLCAwXSxcXG4gICAgICAgICAgcm90YXRlOiBbMzYwLCAxODAsIDBdLFxcbiAgICAgICAgfX1cXG4gICAgICAgIHRyYW5zaXRpb249e3tcXG4gICAgICAgICAgZHVyYXRpb246IDYsXFxuICAgICAgICAgIHJlcGVhdDogSW5maW5pdHksXFxuICAgICAgICAgIGVhc2U6IFxcXCJlYXNlSW5PdXRcXFwiLFxcbiAgICAgICAgfX1cXG4gICAgICAvPlxcblxcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJjb250YWluZXIgbXgtYXV0byBweC00IHNtOnB4LTYgbGc6cHgtOCByZWxhdGl2ZSB6LTEwXFxcIj5cXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJ0ZXh0LWNlbnRlciBtYXgtdy01eGwgbXgtYXV0b1xcXCI+XFxuICAgICAgICAgIHsvKiBNYWluIEhlYWRpbmcgKi99XFxuICAgICAgICAgIDxtb3Rpb24uaDFcXG4gICAgICAgICAgICBpbml0aWFsPXt7IG9wYWNpdHk6IDAsIHk6IDMwIH19XFxuICAgICAgICAgICAgYW5pbWF0ZT17eyBvcGFjaXR5OiAxLCB5OiAwIH19XFxuICAgICAgICAgICAgdHJhbnNpdGlvbj17eyBkdXJhdGlvbjogMC44IH19XFxuICAgICAgICAgICAgY2xhc3NOYW1lPVxcXCJ0ZXh0LTR4bCBzbTp0ZXh0LTV4bCBsZzp0ZXh0LTd4bCBmb250LWJvbGQgdGV4dC1bdmFyKC0tbmV1dHJhbC05MDApXSBtYi02XFxcIlxcbiAgICAgICAgICA+XFxuICAgICAgICAgICAgVGhlIFRlYW0gQmVoaW5kIFlvdXJcXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XFxcImJsb2NrIGJnLWdyYWRpZW50LXRvLXIgZnJvbS1bdmFyKC0tcHJpbWFyeSldIHRvLVt2YXIoLS1zZWNvbmRhcnkpXSBiZy1jbGlwLXRleHQgdGV4dC10cmFuc3BhcmVudFxcXCI+XFxuICAgICAgICAgICAgICBEaWdpdGFsIEJyZWFrdGhyb3VnaFxcbiAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgPC9tb3Rpb24uaDE+XFxuXFxuICAgICAgICAgIHsvKiBTdWJoZWFkaW5nICovfVxcbiAgICAgICAgICA8bW90aW9uLnBcXG4gICAgICAgICAgICBpbml0aWFsPXt7IG9wYWNpdHk6IDAsIHk6IDMwIH19XFxuICAgICAgICAgICAgYW5pbWF0ZT17eyBvcGFjaXR5OiAxLCB5OiAwIH19XFxuICAgICAgICAgICAgdHJhbnNpdGlvbj17eyBkdXJhdGlvbjogMC44LCBkZWxheTogMC4yIH19XFxuICAgICAgICAgICAgY2xhc3NOYW1lPVxcXCJ0ZXh0LWxnIHNtOnRleHQteGwgbGc6dGV4dC0yeGwgdGV4dC1bdmFyKC0tbmV1dHJhbC02MDApXSBtYi0xMiBtYXgtdy00eGwgbXgtYXV0byBsZWFkaW5nLXJlbGF4ZWRcXFwiXFxuICAgICAgICAgID5cXG4gICAgICAgICAgICBXZSdyZSBhIER1YmFpLXJvb3RlZCBkaWdpdGFsIGFnZW5jeSBjcmFmdGluZyBmdXR1cmUtcmVhZHkgc29sdXRpb25zIHdpdGggXFxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVxcXCJmb250LXNlbWlib2xkIHRleHQtW3ZhcigtLXByaW1hcnkpXVxcXCI+IHBhc3Npb248L3NwYW4+LCBcXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XFxcImZvbnQtc2VtaWJvbGQgdGV4dC1bdmFyKC0tc2Vjb25kYXJ5KV1cXFwiPiBwcmVjaXNpb248L3NwYW4+LCBhbmQgXFxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVxcXCJmb250LXNlbWlib2xkIHRleHQtW3ZhcigtLWFjY2VudCldXFxcIj4gcHVycG9zZTwvc3Bhbj4uXFxuICAgICAgICAgIDwvbW90aW9uLnA+XFxuXFxuICAgICAgICAgIHsvKiBGZWF0dXJlIEljb25zICovfVxcbiAgICAgICAgICA8bW90aW9uLmRpdlxcbiAgICAgICAgICAgIGluaXRpYWw9e3sgb3BhY2l0eTogMCwgeTogMzAgfX1cXG4gICAgICAgICAgICBhbmltYXRlPXt7IG9wYWNpdHk6IDEsIHk6IDAgfX1cXG4gICAgICAgICAgICB0cmFuc2l0aW9uPXt7IGR1cmF0aW9uOiAwLjgsIGRlbGF5OiAwLjQgfX1cXG4gICAgICAgICAgICBjbGFzc05hbWU9XFxcImZsZXggZmxleC13cmFwIGp1c3RpZnktY2VudGVyIGdhcC04IG1iLTEyXFxcIlxcbiAgICAgICAgICA+XFxuICAgICAgICAgICAge1tcXG4gICAgICAgICAgICAgIHsgaWNvbjogVXNlcnMsIGxhYmVsOiBcXFwiRXhwZXJ0IFRlYW1cXFwiLCBjb2xvcjogXFxcInZhcigtLXByaW1hcnkpXFxcIiB9LFxcbiAgICAgICAgICAgICAgeyBpY29uOiBIZWFydCwgbGFiZWw6IFxcXCJDbGllbnQtRm9jdXNlZFxcXCIsIGNvbG9yOiBcXFwidmFyKC0tc2Vjb25kYXJ5KVxcXCIgfSxcXG4gICAgICAgICAgICAgIHsgaWNvbjogWmFwLCBsYWJlbDogXFxcIklubm92YXRpb24tRHJpdmVuXFxcIiwgY29sb3I6IFxcXCJ2YXIoLS1hY2NlbnQpXFxcIiB9XFxuICAgICAgICAgICAgXS5tYXAoKGl0ZW0sIGluZGV4KSA9PiB7XFxuICAgICAgICAgICAgICBjb25zdCBJY29uID0gaXRlbS5pY29uO1xcbiAgICAgICAgICAgICAgcmV0dXJuIChcXG4gICAgICAgICAgICAgICAgPG1vdGlvbi5kaXZcXG4gICAgICAgICAgICAgICAgICBrZXk9e2l0ZW0ubGFiZWx9XFxuICAgICAgICAgICAgICAgICAgaW5pdGlhbD17eyBvcGFjaXR5OiAwLCBzY2FsZTogMC44IH19XFxuICAgICAgICAgICAgICAgICAgYW5pbWF0ZT17eyBvcGFjaXR5OiAxLCBzY2FsZTogMSB9fVxcbiAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb249e3sgZHVyYXRpb246IDAuNiwgZGVsYXk6IDAuNiArIGluZGV4ICogMC4xIH19XFxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVxcXCJmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMyBiZy13aGl0ZS84MCBiYWNrZHJvcC1ibHVyLXNtIHJvdW5kZWQtZnVsbCBweC02IHB5LTMgc2hhZG93LWxnXFxcIlxcbiAgICAgICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgICAgPEljb24gXFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XFxcInctNiBoLTZcXFwiIFxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgY29sb3I6IGl0ZW0uY29sb3IgfX1cXG4gICAgICAgICAgICAgICAgICAvPlxcbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cXFwidGV4dC1bdmFyKC0tbmV1dHJhbC03MDApXSBmb250LW1lZGl1bVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICB7aXRlbS5sYWJlbH1cXG4gICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgIDwvbW90aW9uLmRpdj5cXG4gICAgICAgICAgICAgICk7XFxuICAgICAgICAgICAgfSl9XFxuICAgICAgICAgIDwvbW90aW9uLmRpdj5cXG5cXG4gICAgICAgICAgey8qIENUQSBCdXR0b25zICovfVxcbiAgICAgICAgICA8bW90aW9uLmRpdlxcbiAgICAgICAgICAgIGluaXRpYWw9e3sgb3BhY2l0eTogMCwgeTogMzAgfX1cXG4gICAgICAgICAgICBhbmltYXRlPXt7IG9wYWNpdHk6IDEsIHk6IDAgfX1cXG4gICAgICAgICAgICB0cmFuc2l0aW9uPXt7IGR1cmF0aW9uOiAwLjgsIGRlbGF5OiAwLjggfX1cXG4gICAgICAgICAgICBjbGFzc05hbWU9XFxcImZsZXggZmxleC1jb2wgc206ZmxleC1yb3cgZ2FwLTQganVzdGlmeS1jZW50ZXIgaXRlbXMtY2VudGVyXFxcIlxcbiAgICAgICAgICA+XFxuICAgICAgICAgICAgPEJ1dHRvblxcbiAgICAgICAgICAgICAgc2l6ZT1cXFwibGdcXFwiXFxuICAgICAgICAgICAgICB2YXJpYW50PVxcXCJwcmltYXJ5XFxcIlxcbiAgICAgICAgICAgICAgaHJlZj1cXFwiI3N0b3J5XFxcIlxcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVxcXCJncm91cFxcXCJcXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICBPdXIgU3RvcnlcXG4gICAgICAgICAgICAgIDxBcnJvd1JpZ2h0IGNsYXNzTmFtZT1cXFwibWwtMiBoLTUgdy01IHRyYW5zaXRpb24tdHJhbnNmb3JtIGdyb3VwLWhvdmVyOnRyYW5zbGF0ZS14LTFcXFwiIC8+XFxuICAgICAgICAgICAgPC9CdXR0b24+XFxuICAgICAgICAgICAgXFxuICAgICAgICAgICAgPEJ1dHRvblxcbiAgICAgICAgICAgICAgc2l6ZT1cXFwibGdcXFwiXFxuICAgICAgICAgICAgICB2YXJpYW50PVxcXCJvdXRsaW5lXFxcIlxcbiAgICAgICAgICAgICAgaHJlZj1cXFwiLyNjb250YWN0XFxcIlxcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVxcXCJncm91cFxcXCJcXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICBXb3JrIFdpdGggVXNcXG4gICAgICAgICAgICAgIDxBcnJvd1JpZ2h0IGNsYXNzTmFtZT1cXFwibWwtMiBoLTUgdy01IHRyYW5zaXRpb24tdHJhbnNmb3JtIGdyb3VwLWhvdmVyOnRyYW5zbGF0ZS14LTFcXFwiIC8+XFxuICAgICAgICAgICAgPC9CdXR0b24+XFxuICAgICAgICAgIDwvbW90aW9uLmRpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgIDwvZGl2PlxcblxcbiAgICAgIHsvKiBTY3JvbGwgSW5kaWNhdG9yICovfVxcbiAgICAgIDxtb3Rpb24uZGl2XFxuICAgICAgICBpbml0aWFsPXt7IG9wYWNpdHk6IDAgfX1cXG4gICAgICAgIGFuaW1hdGU9e3sgb3BhY2l0eTogMSB9fVxcbiAgICAgICAgdHJhbnNpdGlvbj17eyBkdXJhdGlvbjogMSwgZGVsYXk6IDEuMiB9fVxcbiAgICAgICAgY2xhc3NOYW1lPVxcXCJhYnNvbHV0ZSBib3R0b20tOCBsZWZ0LTEvMiB0cmFuc2Zvcm0gLXRyYW5zbGF0ZS14LTEvMlxcXCJcXG4gICAgICA+XFxuICAgICAgICA8bW90aW9uLmRpdlxcbiAgICAgICAgICBhbmltYXRlPXt7IHk6IFswLCAxMCwgMF0gfX1cXG4gICAgICAgICAgdHJhbnNpdGlvbj17eyBkdXJhdGlvbjogMiwgcmVwZWF0OiBJbmZpbml0eSB9fVxcbiAgICAgICAgICBjbGFzc05hbWU9XFxcInctNiBoLTEwIGJvcmRlci0yIGJvcmRlci1bdmFyKC0tbmV1dHJhbC00MDApXSByb3VuZGVkLWZ1bGwgZmxleCBqdXN0aWZ5LWNlbnRlclxcXCJcXG4gICAgICAgID5cXG4gICAgICAgICAgPG1vdGlvbi5kaXZcXG4gICAgICAgICAgICBhbmltYXRlPXt7IHk6IFswLCAxMiwgMF0gfX1cXG4gICAgICAgICAgICB0cmFuc2l0aW9uPXt7IGR1cmF0aW9uOiAyLCByZXBlYXQ6IEluZmluaXR5IH19XFxuICAgICAgICAgICAgY2xhc3NOYW1lPVxcXCJ3LTEgaC0zIGJnLVt2YXIoLS1uZXV0cmFsLTQwMCldIHJvdW5kZWQtZnVsbCBtdC0yXFxcIlxcbiAgICAgICAgICAvPlxcbiAgICAgICAgPC9tb3Rpb24uZGl2PlxcbiAgICAgIDwvbW90aW9uLmRpdj5cXG4gICAgPC9zZWN0aW9uPlxcbiAgKTtcXG59XCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiRmlsZSBzYXZlZC4gIFNhdmVkIGZpbGUge3NyYy9hcHAvYWJvdXQvcGFnZS50c3h9IiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMU1ZdGNpem9kSm13S2lEWWhmUWd6Y1cifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJDOi9Vc2Vycy9kYXRhbS9EZXNrdG9wL2FyYWJpdGVzIiwiZm9sZGVyUm9vdCI6IkM6L1VzZXJzL2RhdGFtL0Rlc2t0b3AvYXJhYml0ZXMifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTI3VDIxOjMyOjI3LjY2MVoiLCJyZXNwb25zZV90ZXh0IjoiIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjE4Yzg3MjgxLThlNGEtNGU3ZC1hZjNhLTc3OTZlMjA3NzczNSIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDE0dkFhdGF3dzlqYmJpdWZwTnY0UE45IiwidG9vbF9uYW1lIjoic2F2ZS1maWxlIiwiaW5wdXRfanNvbiI6IntcImluc3RydWN0aW9uc19yZW1pbmRlclwiOiBcIkxJTUlUIFRIRSBGSUxFIENPTlRFTlQgVE8gQVQgTU9TVCAzMDAgTElORVMuIElGIE1PUkUgQ09OVEVOVCBORUVEUyBUTyBCRSBBRERFRCBVU0UgVEhFIHN0ci1yZXBsYWNlLWVkaXRvciBUT09MIFRPIEVESVQgVEhFIEZJTEUgQUZURVIgSVQgSEFTIEJFRU4gQ1JFQVRFRC5cIiwgXCJwYXRoXCI6IFwic3JjL2NvbXBvbmVudHMvc2VjdGlvbnMvYWJvdXQvT3VyU3RvcnkudHN4XCIsIFwiZmlsZV9jb250ZW50XCI6IFwiXFxcInVzZSBjbGllbnRcXFwiO1xcblxcbmltcG9ydCB7IG1vdGlvbiB9IGZyb20gXFxcImZyYW1lci1tb3Rpb25cXFwiO1xcbmltcG9ydCB7IE1hcFBpbiwgTGlnaHRidWxiLCBUYXJnZXQsIFJvY2tldCB9IGZyb20gXFxcImx1Y2lkZS1yZWFjdFxcXCI7XFxuXFxuY29uc3Qgc3RvcnlNaWxlc3RvbmVzID0gW1xcbiAge1xcbiAgICBpY29uOiBMaWdodGJ1bGIsXFxuICAgIHRpdGxlOiBcXFwiVGhlIFZpc2lvblxcXCIsXFxuICAgIGRlc2NyaXB0aW9uOiBcXFwiQm9ybiBmcm9tIHRoZSByZWNvZ25pdGlvbiB0aGF0IER1YmFpJ3MgcmFwaWRseSBncm93aW5nIGJ1c2luZXNzIGxhbmRzY2FwZSBuZWVkZWQgYSBkaWdpdGFsIHBhcnRuZXIgdGhhdCB0cnVseSB1bmRlcnN0b29kIHRoZSBsb2NhbCBtYXJrZXQgZHluYW1pY3MgYW5kIGdsb2JhbCBzdGFuZGFyZHMuXFxcIixcXG4gICAgY29sb3I6IFxcXCJ2YXIoLS1wcmltYXJ5KVxcXCJcXG4gIH0sXFxuICB7XFxuICAgIGljb246IE1hcFBpbixcXG4gICAgdGl0bGU6IFxcXCJEdWJhaSBSb290c1xcXCIsXFxuICAgIGRlc2NyaXB0aW9uOiBcXFwiRXN0YWJsaXNoZWQgaW4gdGhlIGhlYXJ0IG9mIER1YmFpLCB3ZSd2ZSB3aXRuZXNzZWQgZmlyc3RoYW5kIHRoZSBjaXR5J3MgdHJhbnNmb3JtYXRpb24gaW50byBhIGdsb2JhbCBidXNpbmVzcyBodWIgYW5kIHBvc2l0aW9uZWQgb3Vyc2VsdmVzIHRvIHNlcnZlIHRoaXMgZXZvbHV0aW9uLlxcXCIsXFxuICAgIGNvbG9yOiBcXFwidmFyKC0tc2Vjb25kYXJ5KVxcXCJcXG4gIH0sXFxuICB7XFxuICAgIGljb246IFRhcmdldCxcXG4gICAgdGl0bGU6IFxcXCJPdXIgTWlzc2lvblxcXCIsXFxuICAgIGRlc2NyaXB0aW9uOiBcXFwiVG8gYnJpZGdlIHRoZSBnYXAgYmV0d2VlbiBhbWJpdGlvdXMgYnVzaW5lc3MgZ29hbHMgYW5kIGRpZ2l0YWwgcmVhbGl0eSwgaGVscGluZyBEdWJhaS1iYXNlZCBjb21wYW5pZXMgdGhyaXZlIGluIGFuIGluY3JlYXNpbmdseSBjb25uZWN0ZWQgd29ybGQuXFxcIixcXG4gICAgY29sb3I6IFxcXCJ2YXIoLS1hY2NlbnQpXFxcIlxcbiAgfSxcXG4gIHtcXG4gICAgaWNvbjogUm9ja2V0LFxcbiAgICB0aXRsZTogXFxcIlRoZSBGdXR1cmVcXFwiLFxcbiAgICBkZXNjcmlwdGlvbjogXFxcIkNvbnRpbnVvdXNseSBldm9sdmluZyBvdXIgZXhwZXJ0aXNlIHRvIHN0YXkgYWhlYWQgb2YgdGVjaG5vbG9naWNhbCB0cmVuZHMgd2hpbGUgbWFpbnRhaW5pbmcgb3VyIGNvbW1pdG1lbnQgdG8gcGVyc29uYWxpemVkLCByZXN1bHRzLWRyaXZlbiBzb2x1dGlvbnMuXFxcIixcXG4gICAgY29sb3I6IFxcXCJ2YXIoLS1wcmltYXJ5KVxcXCJcXG4gIH1cXG5dO1xcblxcbmNvbnN0IGNvbnRhaW5lclZhcmlhbnRzID0ge1xcbiAgaGlkZGVuOiB7IG9wYWNpdHk6IDAgfSxcXG4gIHZpc2libGU6IHtcXG4gICAgb3BhY2l0eTogMSxcXG4gICAgdHJhbnNpdGlvbjoge1xcbiAgICAgIHN0YWdnZXJDaGlsZHJlbjogMC4zXFxuICAgIH1cXG4gIH1cXG59O1xcblxcbmNvbnN0IGl0ZW1WYXJpYW50cyA9IHtcXG4gIGhpZGRlbjogeyBvcGFjaXR5OiAwLCB5OiA1MCB9LFxcbiAgdmlzaWJsZToge1xcbiAgICBvcGFjaXR5OiAxLFxcbiAgICB5OiAwLFxcbiAgICB0cmFuc2l0aW9uOiB7XFxuICAgICAgZHVyYXRpb246IDAuOCxcXG4gICAgICBlYXNlOiBcXFwiZWFzZU91dFxcXCJcXG4gICAgfVxcbiAgfVxcbn07XFxuXFxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gT3VyU3RvcnkoKSB7XFxuICByZXR1cm4gKFxcbiAgICA8c2VjdGlvbiBpZD1cXFwic3RvcnlcXFwiIGNsYXNzTmFtZT1cXFwicHktMjAgbGc6cHktMzIgYmctd2hpdGVcXFwiPlxcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJjb250YWluZXIgbXgtYXV0byBweC00IHNtOnB4LTYgbGc6cHgtOFxcXCI+XFxuICAgICAgICB7LyogU2VjdGlvbiBIZWFkZXIgKi99XFxuICAgICAgICA8bW90aW9uLmRpdlxcbiAgICAgICAgICBpbml0aWFsPXt7IG9wYWNpdHk6IDAsIHk6IDMwIH19XFxuICAgICAgICAgIHdoaWxlSW5WaWV3PXt7IG9wYWNpdHk6IDEsIHk6IDAgfX1cXG4gICAgICAgICAgdmlld3BvcnQ9e3sgb25jZTogdHJ1ZSB9fVxcbiAgICAgICAgICB0cmFuc2l0aW9uPXt7IGR1cmF0aW9uOiAwLjggfX1cXG4gICAgICAgICAgY2xhc3NOYW1lPVxcXCJ0ZXh0LWNlbnRlciBtYi0xNlxcXCJcXG4gICAgICAgID5cXG4gICAgICAgICAgPGgyIGNsYXNzTmFtZT1cXFwidGV4dC0zeGwgc206dGV4dC00eGwgbGc6dGV4dC01eGwgZm9udC1ib2xkIHRleHQtW3ZhcigtLW5ldXRyYWwtOTAwKV0gbWItNlxcXCI+XFxuICAgICAgICAgICAgT3VyXFxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVxcXCJibG9jayBiZy1ncmFkaWVudC10by1yIGZyb20tW3ZhcigtLXByaW1hcnkpXSB0by1bdmFyKC0tc2Vjb25kYXJ5KV0gYmctY2xpcC10ZXh0IHRleHQtdHJhbnNwYXJlbnRcXFwiPlxcbiAgICAgICAgICAgICAgU3RvcnlcXG4gICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgIDwvaDI+XFxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cXFwidGV4dC1sZyBzbTp0ZXh0LXhsIHRleHQtW3ZhcigtLW5ldXRyYWwtNjAwKV0gbWF4LXctM3hsIG14LWF1dG8gbGVhZGluZy1yZWxheGVkXFxcIj5cXG4gICAgICAgICAgICBFdmVyeSBncmVhdCBkaWdpdGFsIHRyYW5zZm9ybWF0aW9uIGJlZ2lucyB3aXRoIHVuZGVyc3RhbmRpbmcuIEhlcmUncyBob3cgd2UgYmVjYW1lIFxcbiAgICAgICAgICAgIER1YmFpJ3MgdHJ1c3RlZCBwYXJ0bmVyIGZvciBpbm5vdmF0aXZlIHdlYiBzb2x1dGlvbnMuXFxuICAgICAgICAgIDwvcD5cXG4gICAgICAgIDwvbW90aW9uLmRpdj5cXG5cXG4gICAgICAgIHsvKiBTdG9yeSBDb250ZW50ICovfVxcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcImdyaWQgZ3JpZC1jb2xzLTEgbGc6Z3JpZC1jb2xzLTIgZ2FwLTEyIGxnOmdhcC0xNiBpdGVtcy1jZW50ZXIgbWItMjBcXFwiPlxcbiAgICAgICAgICB7LyogTWFpbiBTdG9yeSBUZXh0ICovfVxcbiAgICAgICAgICA8bW90aW9uLmRpdlxcbiAgICAgICAgICAgIGluaXRpYWw9e3sgb3BhY2l0eTogMCwgeDogLTUwIH19XFxuICAgICAgICAgICAgd2hpbGVJblZpZXc9e3sgb3BhY2l0eTogMSwgeDogMCB9fVxcbiAgICAgICAgICAgIHZpZXdwb3J0PXt7IG9uY2U6IHRydWUgfX1cXG4gICAgICAgICAgICB0cmFuc2l0aW9uPXt7IGR1cmF0aW9uOiAwLjggfX1cXG4gICAgICAgICAgICBjbGFzc05hbWU9XFxcInNwYWNlLXktNlxcXCJcXG4gICAgICAgICAgPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJzcGFjZS15LTYgdGV4dC1sZyB0ZXh0LVt2YXIoLS1uZXV0cmFsLTYwMCldIGxlYWRpbmctcmVsYXhlZFxcXCI+XFxuICAgICAgICAgICAgICA8cD5cXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVxcXCJmb250LXNlbWlib2xkIHRleHQtW3ZhcigtLXByaW1hcnkpXVxcXCI+QXJhYml0ZXMgRGlnaXRhbCBBZ2VuY3k8L3NwYW4+IHdhcyBcXG4gICAgICAgICAgICAgICAgZm91bmRlZCB3aXRoIGEgc2ltcGxlIHlldCBwb3dlcmZ1bCBiZWxpZWY6IHRoYXQgZXZlcnkgYnVzaW5lc3MgZGVzZXJ2ZXMgYSBkaWdpdGFsIHByZXNlbmNlIFxcbiAgICAgICAgICAgICAgICB0aGF0IG5vdCBvbmx5IGxvb2tzIGV4Y2VwdGlvbmFsIGJ1dCBkcml2ZXMgcmVhbCwgbWVhc3VyYWJsZSByZXN1bHRzLlxcbiAgICAgICAgICAgICAgPC9wPlxcbiAgICAgICAgICAgICAgXFxuICAgICAgICAgICAgICA8cD5cXG4gICAgICAgICAgICAgICAgSW4gRHViYWkncyBmYXN0LXBhY2VkIGJ1c2luZXNzIGVudmlyb25tZW50LCB3ZSByZWNvZ25pemVkIHRoYXQgY29tcGFuaWVzIG5lZWRlZCBtb3JlIHRoYW4gXFxuICAgICAgICAgICAgICAgIGp1c3Qgd2Vic2l0ZXNcXHUyMDE0dGhleSBuZWVkZWQgZGlnaXRhbCBwYXJ0bmVycyB3aG8gdW5kZXJzdG9vZCB0aGVpciB1bmlxdWUgY2hhbGxlbmdlcywgZnJvbSBcXG4gICAgICAgICAgICAgICAgbmF2aWdhdGluZyBkaXZlcnNlIGN1bHR1cmFsIG1hcmtldHMgdG8gbWVldGluZyB0aGUgaGlnaCBleHBlY3RhdGlvbnMgb2YgaW50ZXJuYXRpb25hbCBjbGllbnRzLlxcbiAgICAgICAgICAgICAgPC9wPlxcbiAgICAgICAgICAgICAgXFxuICAgICAgICAgICAgICA8cD5cXG4gICAgICAgICAgICAgICAgT3VyIGpvdXJuZXkgYmVnYW4gd2l0aCBhIGNvbW1pdG1lbnQgdG8gZXhjZWxsZW5jZSBhbmQgYSBkZWVwIGFwcHJlY2lhdGlvbiBmb3IgRHViYWkncyBcXG4gICAgICAgICAgICAgICAgZW50cmVwcmVuZXVyaWFsIHNwaXJpdC4gV2UndmUgZ3Jvd24gYWxvbmdzaWRlIHRoZSBjaXR5J3MgZGlnaXRhbCB0cmFuc2Zvcm1hdGlvbiwgaGVscGluZyBcXG4gICAgICAgICAgICAgICAgYnVzaW5lc3NlcyBhY3Jvc3MgcmVhbCBlc3RhdGUsIGUtY29tbWVyY2UsIHdlbGxuZXNzLCB0b3VyaXNtLCBhbmQgZmludGVjaCBzZWN0b3JzIFxcbiAgICAgICAgICAgICAgICBlc3RhYmxpc2ggcG93ZXJmdWwgb25saW5lIHByZXNlbmNlcy5cXG4gICAgICAgICAgICAgIDwvcD5cXG5cXG4gICAgICAgICAgICAgIDxwPlxcbiAgICAgICAgICAgICAgICBUb2RheSwgd2UncmUgcHJvdWQgdG8gYmUgcGFydCBvZiBEdWJhaSdzIHRocml2aW5nIHRlY2ggZWNvc3lzdGVtLCBjb21iaW5pbmcgZ2xvYmFsIFxcbiAgICAgICAgICAgICAgICBiZXN0IHByYWN0aWNlcyB3aXRoIGxvY2FsIG1hcmtldCBpbnNpZ2h0cyB0byBkZWxpdmVyIHNvbHV0aW9ucyB0aGF0IHRydWx5IG1ha2UgYSBkaWZmZXJlbmNlLlxcbiAgICAgICAgICAgICAgPC9wPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICA8L21vdGlvbi5kaXY+XFxuXFxuICAgICAgICAgIHsvKiBWaXN1YWwgRWxlbWVudCAqL31cXG4gICAgICAgICAgPG1vdGlvbi5kaXZcXG4gICAgICAgICAgICBpbml0aWFsPXt7IG9wYWNpdHk6IDAsIHg6IDUwIH19XFxuICAgICAgICAgICAgd2hpbGVJblZpZXc9e3sgb3BhY2l0eTogMSwgeDogMCB9fVxcbiAgICAgICAgICAgIHZpZXdwb3J0PXt7IG9uY2U6IHRydWUgfX1cXG4gICAgICAgICAgICB0cmFuc2l0aW9uPXt7IGR1cmF0aW9uOiAwLjggfX1cXG4gICAgICAgICAgICBjbGFzc05hbWU9XFxcInJlbGF0aXZlXFxcIlxcbiAgICAgICAgICA+XFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcInJlbGF0aXZlIGJnLWdyYWRpZW50LXRvLWJyIGZyb20tW3ZhcigtLXByaW1hcnkpXS8xMCB0by1bdmFyKC0tc2Vjb25kYXJ5KV0vMTAgcm91bmRlZC0zeGwgcC04IGxnOnAtMTJcXFwiPlxcbiAgICAgICAgICAgICAgey8qIERlY29yYXRpdmUgRWxlbWVudHMgKi99XFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwiYWJzb2x1dGUgdG9wLTQgcmlnaHQtNCB3LTIwIGgtMjAgYmctW3ZhcigtLWFjY2VudCldLzIwIHJvdW5kZWQtZnVsbFxcXCIgLz5cXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJhYnNvbHV0ZSBib3R0b20tNCBsZWZ0LTQgdy0xNiBoLTE2IGJnLVt2YXIoLS1zZWNvbmRhcnkpXS8yMCByb3VuZGVkLWZ1bGxcXFwiIC8+XFxuICAgICAgICAgICAgICBcXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJyZWxhdGl2ZSB6LTEwIHRleHQtY2VudGVyXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcInRleHQtNnhsIG1iLTZcXFwiPlxcdWQ4M2NcXHVkZmQ5XFx1ZmUwZjwvZGl2PlxcbiAgICAgICAgICAgICAgICA8aDMgY2xhc3NOYW1lPVxcXCJ0ZXh0LTJ4bCBmb250LWJvbGQgdGV4dC1bdmFyKC0tbmV1dHJhbC05MDApXSBtYi00XFxcIj5cXG4gICAgICAgICAgICAgICAgICBEdWJhaSdzIERpZ2l0YWwgRXZvbHV0aW9uXFxuICAgICAgICAgICAgICAgIDwvaDM+XFxuICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cXFwidGV4dC1bdmFyKC0tbmV1dHJhbC02MDApXSBsZWFkaW5nLXJlbGF4ZWRcXFwiPlxcbiAgICAgICAgICAgICAgICAgIEZyb20gYSB2aXNpb24gdG8gcmVhbGl0eSwgd2UndmUgYmVlbiBwYXJ0IG9mIER1YmFpJ3MgaW5jcmVkaWJsZSBcXG4gICAgICAgICAgICAgICAgICBqb3VybmV5IHRvd2FyZCBiZWNvbWluZyBhIGdsb2JhbCBkaWdpdGFsIGh1Yi5cXG4gICAgICAgICAgICAgICAgPC9wPlxcbiAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgIDwvbW90aW9uLmRpdj5cXG4gICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgey8qIFN0b3J5IE1pbGVzdG9uZXMgKi99XFxuICAgICAgICA8bW90aW9uLmRpdlxcbiAgICAgICAgICB2YXJpYW50cz17Y29udGFpbmVyVmFyaWFudHN9XFxuICAgICAgICAgIGluaXRpYWw9XFxcImhpZGRlblxcXCJcXG4gICAgICAgICAgd2hpbGVJblZpZXc9XFxcInZpc2libGVcXFwiXFxuICAgICAgICAgIHZpZXdwb3J0PXt7IG9uY2U6IHRydWUgfX1cXG4gICAgICAgICAgY2xhc3NOYW1lPVxcXCJncmlkIGdyaWQtY29scy0xIG1kOmdyaWQtY29scy0yIGxnOmdyaWQtY29scy00IGdhcC04XFxcIlxcbiAgICAgICAgPlxcbiAgICAgICAgICB7c3RvcnlNaWxlc3RvbmVzLm1hcCgobWlsZXN0b25lLCBpbmRleCkgPT4ge1xcbiAgICAgICAgICAgIGNvbnN0IEljb24gPSBtaWxlc3RvbmUuaWNvbjtcXG4gICAgICAgICAgICByZXR1cm4gKFxcbiAgICAgICAgICAgICAgPG1vdGlvbi5kaXZcXG4gICAgICAgICAgICAgICAga2V5PXttaWxlc3RvbmUudGl0bGV9XFxuICAgICAgICAgICAgICAgIHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9XFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cXFwiZ3JvdXAgcmVsYXRpdmVcXFwiXFxuICAgICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJiZy13aGl0ZSByb3VuZGVkLTJ4bCBwLTYgbGc6cC04IHNoYWRvdy1sZyBob3ZlcjpzaGFkb3ctMnhsIHRyYW5zaXRpb24tYWxsIGR1cmF0aW9uLTMwMCBib3JkZXIgYm9yZGVyLVt2YXIoLS1uZXV0cmFsLTIwMCldIGhvdmVyOmJvcmRlci1bdmFyKC0tcHJpbWFyeSldLzIwIGgtZnVsbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgey8qIEljb24gKi99XFxuICAgICAgICAgICAgICAgICAgPGRpdiBcXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cXFwidy0xNiBoLTE2IHJvdW5kZWQteGwgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgbWItNiBncm91cC1ob3ZlcjpzY2FsZS0xMTAgdHJhbnNpdGlvbi10cmFuc2Zvcm0gZHVyYXRpb24tMzAwXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiBgJHttaWxlc3RvbmUuY29sb3J9MTVgIH19XFxuICAgICAgICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICAgICAgPEljb24gXFxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cXFwidy04IGgtOCB0cmFuc2l0aW9uLWNvbG9ycyBkdXJhdGlvbi0zMDBcXFwiXFxuICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IGNvbG9yOiBtaWxlc3RvbmUuY29sb3IgfX1cXG4gICAgICAgICAgICAgICAgICAgIC8+XFxuICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuXFxuICAgICAgICAgICAgICAgICAgey8qIENvbnRlbnQgKi99XFxuICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cXFwidGV4dC14bCBmb250LWJvbGQgdGV4dC1bdmFyKC0tbmV1dHJhbC05MDApXSBtYi0zIGdyb3VwLWhvdmVyOnRleHQtW3ZhcigtLXByaW1hcnkpXSB0cmFuc2l0aW9uLWNvbG9ycyBkdXJhdGlvbi0zMDBcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAge21pbGVzdG9uZS50aXRsZX1cXG4gICAgICAgICAgICAgICAgICA8L2gzPlxcbiAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cXFwidGV4dC1bdmFyKC0tbmV1dHJhbC02MDApXSBsZWFkaW5nLXJlbGF4ZWRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAge21pbGVzdG9uZS5kZXNjcmlwdGlvbn1cXG4gICAgICAgICAgICAgICAgICA8L3A+XFxuXFxuICAgICAgICAgICAgICAgICAgey8qIEhvdmVyIEVmZmVjdCAqL31cXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwiYWJzb2x1dGUgaW5zZXQtMCByb3VuZGVkLTJ4bCBiZy1ncmFkaWVudC10by1iciBmcm9tLVt2YXIoLS1wcmltYXJ5KV0vNSB0by1bdmFyKC0tc2Vjb25kYXJ5KV0vNSBvcGFjaXR5LTAgZ3JvdXAtaG92ZXI6b3BhY2l0eS0xMDAgdHJhbnNpdGlvbi1vcGFjaXR5IGR1cmF0aW9uLTMwMCBwb2ludGVyLWV2ZW50cy1ub25lXFxcIiAvPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgIDwvbW90aW9uLmRpdj5cXG4gICAgICAgICAgICApO1xcbiAgICAgICAgICB9KX1cXG4gICAgICAgIDwvbW90aW9uLmRpdj5cXG4gICAgICA8L2Rpdj5cXG4gICAgPC9zZWN0aW9uPlxcbiAgKTtcXG59XCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiRmlsZSBzYXZlZC4gIFNhdmVkIGZpbGUge3NyYy9jb21wb25lbnRzL3NlY3Rpb25zL2Fib3V0L0Fib3V0SGVyby50c3h9IiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMUh4dGMyQjFIM1RCaVJIOEpVWnBoNHEifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJDOi9Vc2Vycy9kYXRhbS9EZXNrdG9wL2FyYWJpdGVzIiwiZm9sZGVyUm9vdCI6IkM6L1VzZXJzL2RhdGFtL0Rlc2t0b3AvYXJhYml0ZXMifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTI3VDIxOjMyOjU1LjY2NloiLCJyZXNwb25zZV90ZXh0IjoiIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImUyZWE3NjJlLTFjZGEtNGE5My1iZDU3LWU2MWRiMjhiZWE5MiIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDFBVE0xYXRaS0syNlVuanhwZUZKQVFoIiwidG9vbF9uYW1lIjoic2F2ZS1maWxlIiwiaW5wdXRfanNvbiI6IntcImluc3RydWN0aW9uc19yZW1pbmRlclwiOiBcIkxJTUlUIFRIRSBGSUxFIENPTlRFTlQgVE8gQVQgTU9TVCAzMDAgTElORVMuIElGIE1PUkUgQ09OVEVOVCBORUVEUyBUTyBCRSBBRERFRCBVU0UgVEhFIHN0ci1yZXBsYWNlLWVkaXRvciBUT09MIFRPIEVESVQgVEhFIEZJTEUgQUZURVIgSVQgSEFTIEJFRU4gQ1JFQVRFRC5cIiwgXCJwYXRoXCI6IFwic3JjL2NvbXBvbmVudHMvc2VjdGlvbnMvYWJvdXQvVmFsdWVzLnRzeFwiLCBcImZpbGVfY29udGVudFwiOiBcIlxcXCJ1c2UgY2xpZW50XFxcIjtcXG5cXG5pbXBvcnQgeyBtb3Rpb24gfSBmcm9tIFxcXCJmcmFtZXItbW90aW9uXFxcIjtcXG5pbXBvcnQgeyBaYXAsIFNoaWVsZCwgVXNlcnMsIEF3YXJkLCBIZWFydCB9IGZyb20gXFxcImx1Y2lkZS1yZWFjdFxcXCI7XFxuXFxuY29uc3QgdmFsdWVzID0gW1xcbiAge1xcbiAgICBpY29uOiBaYXAsXFxuICAgIHRpdGxlOiBcXFwiSW5ub3ZhdGlvblxcXCIsXFxuICAgIGRlc2NyaXB0aW9uOiBcXFwiV2Ugc3RheSBhaGVhZCBvZiB0aGUgY3VydmUgd2l0aCBjdXR0aW5nLWVkZ2UgdGVjaG5vbG9naWVzIGFuZCBjcmVhdGl2ZSBzb2x1dGlvbnMgdGhhdCBwdXNoIGJvdW5kYXJpZXMgYW5kIGRlbGl2ZXIgZXhjZXB0aW9uYWwgcmVzdWx0cy5cXFwiLFxcbiAgICBjb2xvcjogXFxcInZhcigtLXByaW1hcnkpXFxcIixcXG4gICAgZ3JhZGllbnQ6IFxcXCJmcm9tLWJsdWUtNTAwIHRvLWJsdWUtNjAwXFxcIlxcbiAgfSxcXG4gIHtcXG4gICAgaWNvbjogU2hpZWxkLFxcbiAgICB0aXRsZTogXFxcIkludGVncml0eVxcXCIsXFxuICAgIGRlc2NyaXB0aW9uOiBcXFwiVHJhbnNwYXJlbmN5LCBob25lc3R5LCBhbmQgZXRoaWNhbCBwcmFjdGljZXMgZm9ybSB0aGUgZm91bmRhdGlvbiBvZiBldmVyeSBjbGllbnQgcmVsYXRpb25zaGlwIGFuZCBwcm9qZWN0IHdlIHVuZGVydGFrZS5cXFwiLFxcbiAgICBjb2xvcjogXFxcInZhcigtLXNlY29uZGFyeSlcXFwiLFxcbiAgICBncmFkaWVudDogXFxcImZyb20tYW1iZXItNTAwIHRvLWFtYmVyLTYwMFxcXCJcXG4gIH0sXFxuICB7XFxuICAgIGljb246IEF3YXJkLFxcbiAgICB0aXRsZTogXFxcIkV4Y2VsbGVuY2VcXFwiLFxcbiAgICBkZXNjcmlwdGlvbjogXFxcIldlJ3JlIGNvbW1pdHRlZCB0byBkZWxpdmVyaW5nIG5vdGhpbmcgbGVzcyB0aGFuIGV4Y2VwdGlvbmFsIHF1YWxpdHkgaW4gZXZlcnkgbGluZSBvZiBjb2RlLCBldmVyeSBkZXNpZ24gZWxlbWVudCwgYW5kIGV2ZXJ5IGNsaWVudCBpbnRlcmFjdGlvbi5cXFwiLFxcbiAgICBjb2xvcjogXFxcInZhcigtLWFjY2VudClcXFwiLFxcbiAgICBncmFkaWVudDogXFxcImZyb20tY3lhbi01MDAgdG8tY3lhbi02MDBcXFwiXFxuICB9LFxcbiAge1xcbiAgICBpY29uOiBVc2VycyxcXG4gICAgdGl0bGU6IFxcXCJDb2xsYWJvcmF0aW9uXFxcIixcXG4gICAgZGVzY3JpcHRpb246IFxcXCJTdWNjZXNzIGNvbWVzIGZyb20gd29ya2luZyBjbG9zZWx5IHdpdGggb3VyIGNsaWVudHMgYXMgdHJ1ZSBwYXJ0bmVycywgdW5kZXJzdGFuZGluZyB0aGVpciB2aXNpb24gYW5kIGJyaW5naW5nIGl0IHRvIGxpZmUgdG9nZXRoZXIuXFxcIixcXG4gICAgY29sb3I6IFxcXCJ2YXIoLS1wcmltYXJ5KVxcXCIsXFxuICAgIGdyYWRpZW50OiBcXFwiZnJvbS1ibHVlLTUwMCB0by1wdXJwbGUtNjAwXFxcIlxcbiAgfSxcXG4gIHtcXG4gICAgaWNvbjogSGVhcnQsXFxuICAgIHRpdGxlOiBcXFwiRW1wYXRoeVxcXCIsXFxuICAgIGRlc2NyaXB0aW9uOiBcXFwiV2UgdW5kZXJzdGFuZCB0aGF0IGJlaGluZCBldmVyeSBwcm9qZWN0IGlzIGEgZHJlYW0sIGEgZ29hbCwgb3IgYSBjaGFsbGVuZ2UuIFdlIGFwcHJvYWNoIGVhY2ggd2l0aCBnZW51aW5lIGNhcmUgYW5kIHVuZGVyc3RhbmRpbmcuXFxcIixcXG4gICAgY29sb3I6IFxcXCJ2YXIoLS1zZWNvbmRhcnkpXFxcIixcXG4gICAgZ3JhZGllbnQ6IFxcXCJmcm9tLXJvc2UtNTAwIHRvLXBpbmstNjAwXFxcIlxcbiAgfVxcbl07XFxuXFxuY29uc3QgY29udGFpbmVyVmFyaWFudHMgPSB7XFxuICBoaWRkZW46IHsgb3BhY2l0eTogMCB9LFxcbiAgdmlzaWJsZToge1xcbiAgICBvcGFjaXR5OiAxLFxcbiAgICB0cmFuc2l0aW9uOiB7XFxuICAgICAgc3RhZ2dlckNoaWxkcmVuOiAwLjJcXG4gICAgfVxcbiAgfVxcbn07XFxuXFxuY29uc3QgaXRlbVZhcmlhbnRzID0ge1xcbiAgaGlkZGVuOiB7IG9wYWNpdHk6IDAsIHk6IDUwIH0sXFxuICB2aXNpYmxlOiB7XFxuICAgIG9wYWNpdHk6IDEsXFxuICAgIHk6IDAsXFxuICAgIHRyYW5zaXRpb246IHtcXG4gICAgICBkdXJhdGlvbjogMC44LFxcbiAgICAgIGVhc2U6IFxcXCJlYXNlT3V0XFxcIlxcbiAgICB9XFxuICB9XFxufTtcXG5cXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBWYWx1ZXMoKSB7XFxuICByZXR1cm4gKFxcbiAgICA8c2VjdGlvbiBjbGFzc05hbWU9XFxcInB5LTIwIGxnOnB5LTMyIGJnLWdyYWRpZW50LXRvLWJyIGZyb20tW3ZhcigtLW5ldXRyYWwtNTApXSB0by13aGl0ZVxcXCI+XFxuICAgICAgPGRpdiBjbGFzc05hbWU9XFxcImNvbnRhaW5lciBteC1hdXRvIHB4LTQgc206cHgtNiBsZzpweC04XFxcIj5cXG4gICAgICAgIHsvKiBTZWN0aW9uIEhlYWRlciAqL31cXG4gICAgICAgIDxtb3Rpb24uZGl2XFxuICAgICAgICAgIGluaXRpYWw9e3sgb3BhY2l0eTogMCwgeTogMzAgfX1cXG4gICAgICAgICAgd2hpbGVJblZpZXc9e3sgb3BhY2l0eTogMSwgeTogMCB9fVxcbiAgICAgICAgICB2aWV3cG9ydD17eyBvbmNlOiB0cnVlIH19XFxuICAgICAgICAgIHRyYW5zaXRpb249e3sgZHVyYXRpb246IDAuOCB9fVxcbiAgICAgICAgICBjbGFzc05hbWU9XFxcInRleHQtY2VudGVyIG1iLTE2XFxcIlxcbiAgICAgICAgPlxcbiAgICAgICAgICA8aDIgY2xhc3NOYW1lPVxcXCJ0ZXh0LTN4bCBzbTp0ZXh0LTR4bCBsZzp0ZXh0LTV4bCBmb250LWJvbGQgdGV4dC1bdmFyKC0tbmV1dHJhbC05MDApXSBtYi02XFxcIj5cXG4gICAgICAgICAgICBPdXIgQ29yZVxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cXFwiYmxvY2sgYmctZ3JhZGllbnQtdG8tciBmcm9tLVt2YXIoLS1wcmltYXJ5KV0gdG8tW3ZhcigtLXNlY29uZGFyeSldIGJnLWNsaXAtdGV4dCB0ZXh0LXRyYW5zcGFyZW50XFxcIj5cXG4gICAgICAgICAgICAgIFZhbHVlc1xcbiAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgPC9oMj5cXG4gICAgICAgICAgPHAgY2xhc3NOYW1lPVxcXCJ0ZXh0LWxnIHNtOnRleHQteGwgdGV4dC1bdmFyKC0tbmV1dHJhbC02MDApXSBtYXgtdy0zeGwgbXgtYXV0byBsZWFkaW5nLXJlbGF4ZWRcXFwiPlxcbiAgICAgICAgICAgIFRoZSBwcmluY2lwbGVzIHRoYXQgZ3VpZGUgZXZlcnl0aGluZyB3ZSBkbywgZnJvbSB0aGUgZmlyc3QgY2xpZW50IGNvbnZlcnNhdGlvbiBcXG4gICAgICAgICAgICB0byB0aGUgZmluYWwgcHJvamVjdCBkZWxpdmVyeSBhbmQgYmV5b25kLlxcbiAgICAgICAgICA8L3A+XFxuICAgICAgICA8L21vdGlvbi5kaXY+XFxuXFxuICAgICAgICB7LyogVmFsdWVzIEdyaWQgKi99XFxuICAgICAgICA8bW90aW9uLmRpdlxcbiAgICAgICAgICB2YXJpYW50cz17Y29udGFpbmVyVmFyaWFudHN9XFxuICAgICAgICAgIGluaXRpYWw9XFxcImhpZGRlblxcXCJcXG4gICAgICAgICAgd2hpbGVJblZpZXc9XFxcInZpc2libGVcXFwiXFxuICAgICAgICAgIHZpZXdwb3J0PXt7IG9uY2U6IHRydWUgfX1cXG4gICAgICAgICAgY2xhc3NOYW1lPVxcXCJncmlkIGdyaWQtY29scy0xIG1kOmdyaWQtY29scy0yIGxnOmdyaWQtY29scy0zIGdhcC04IGxnOmdhcC0xMFxcXCJcXG4gICAgICAgID5cXG4gICAgICAgICAge3ZhbHVlcy5tYXAoKHZhbHVlLCBpbmRleCkgPT4ge1xcbiAgICAgICAgICAgIGNvbnN0IEljb24gPSB2YWx1ZS5pY29uO1xcbiAgICAgICAgICAgIHJldHVybiAoXFxuICAgICAgICAgICAgICA8bW90aW9uLmRpdlxcbiAgICAgICAgICAgICAgICBrZXk9e3ZhbHVlLnRpdGxlfVxcbiAgICAgICAgICAgICAgICB2YXJpYW50cz17aXRlbVZhcmlhbnRzfVxcbiAgICAgICAgICAgICAgICB3aGlsZUhvdmVyPXt7IFxcbiAgICAgICAgICAgICAgICAgIHk6IC04LFxcbiAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IHsgZHVyYXRpb246IDAuMyB9XFxuICAgICAgICAgICAgICAgIH19XFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cXFwiZ3JvdXAgcmVsYXRpdmVcXFwiXFxuICAgICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJiZy13aGl0ZSByb3VuZGVkLTN4bCBwLTggbGc6cC0xMCBzaGFkb3ctbGcgaG92ZXI6c2hhZG93LTJ4bCB0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi01MDAgYm9yZGVyIGJvcmRlci1bdmFyKC0tbmV1dHJhbC0yMDApXSBob3Zlcjpib3JkZXItW3ZhcigtLXByaW1hcnkpXS8yMCBoLWZ1bGwgcmVsYXRpdmUgb3ZlcmZsb3ctaGlkZGVuXFxcIj5cXG4gICAgICAgICAgICAgICAgICB7LyogQmFja2dyb3VuZCBHcmFkaWVudCBvbiBIb3ZlciAqL31cXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YGFic29sdXRlIGluc2V0LTAgYmctZ3JhZGllbnQtdG8tYnIgJHt2YWx1ZS5ncmFkaWVudH0gb3BhY2l0eS0wIGdyb3VwLWhvdmVyOm9wYWNpdHktNSB0cmFuc2l0aW9uLW9wYWNpdHkgZHVyYXRpb24tNTAwYH0gLz5cXG4gICAgICAgICAgICAgICAgICBcXG4gICAgICAgICAgICAgICAgICB7LyogSWNvbiAqL31cXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwicmVsYXRpdmUgei0xMFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IFxcbiAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XFxcInctMjAgaC0yMCByb3VuZGVkLTJ4bCBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciBtYi02IGdyb3VwLWhvdmVyOnNjYWxlLTExMCB0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi01MDAgcmVsYXRpdmVcXFwiXFxuICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IGJhY2tncm91bmRDb2xvcjogYCR7dmFsdWUuY29sb3J9MTVgIH19XFxuICAgICAgICAgICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgICAgICAgIDxJY29uIFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cXFwidy0xMCBoLTEwIHRyYW5zaXRpb24tYWxsIGR1cmF0aW9uLTUwMCBncm91cC1ob3ZlcjpzY2FsZS0xMTBcXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgY29sb3I6IHZhbHVlLmNvbG9yIH19XFxuICAgICAgICAgICAgICAgICAgICAgIC8+XFxuICAgICAgICAgICAgICAgICAgICAgIFxcbiAgICAgICAgICAgICAgICAgICAgICB7LyogSWNvbiBHbG93IEVmZmVjdCAqL31cXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBcXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XFxcImFic29sdXRlIGluc2V0LTAgcm91bmRlZC0yeGwgb3BhY2l0eS0wIGdyb3VwLWhvdmVyOm9wYWNpdHktMjAgdHJhbnNpdGlvbi1vcGFjaXR5IGR1cmF0aW9uLTUwMFxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyBcXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IGByYWRpYWwtZ3JhZGllbnQoY2lyY2xlLCAke3ZhbHVlLmNvbG9yfSAwJSwgdHJhbnNwYXJlbnQgNzAlKWAsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6ICdibHVyKDEwcHgpJ1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XFxuICAgICAgICAgICAgICAgICAgICAgIC8+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgICAgICAgICAgICAgIHsvKiBDb250ZW50ICovfVxcbiAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cXFwidGV4dC0yeGwgZm9udC1ib2xkIHRleHQtW3ZhcigtLW5ldXRyYWwtOTAwKV0gbWItNCBncm91cC1ob3Zlcjp0ZXh0LVt2YXIoLS1wcmltYXJ5KV0gdHJhbnNpdGlvbi1jb2xvcnMgZHVyYXRpb24tMzAwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAge3ZhbHVlLnRpdGxlfVxcbiAgICAgICAgICAgICAgICAgICAgPC9oMz5cXG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cXFwidGV4dC1bdmFyKC0tbmV1dHJhbC02MDApXSBsZWFkaW5nLXJlbGF4ZWQgZ3JvdXAtaG92ZXI6dGV4dC1bdmFyKC0tbmV1dHJhbC03MDApXSB0cmFuc2l0aW9uLWNvbG9ycyBkdXJhdGlvbi0zMDBcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICB7dmFsdWUuZGVzY3JpcHRpb259XFxuICAgICAgICAgICAgICAgICAgICA8L3A+XFxuICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuXFxuICAgICAgICAgICAgICAgICAgey8qIERlY29yYXRpdmUgRWxlbWVudHMgKi99XFxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcImFic29sdXRlIHRvcC00IHJpZ2h0LTQgdy04IGgtOCByb3VuZGVkLWZ1bGwgb3BhY2l0eS0xMCBncm91cC1ob3ZlcjpvcGFjaXR5LTIwIHRyYW5zaXRpb24tb3BhY2l0eSBkdXJhdGlvbi01MDBcXFwiIFxcbiAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiB2YWx1ZS5jb2xvciB9fSAvPlxcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJhYnNvbHV0ZSBib3R0b20tNCBsZWZ0LTQgdy02IGgtNiByb3VuZGVkLWZ1bGwgb3BhY2l0eS0xMCBncm91cC1ob3ZlcjpvcGFjaXR5LTIwIHRyYW5zaXRpb24tb3BhY2l0eSBkdXJhdGlvbi01MDBcXFwiIFxcbiAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiB2YWx1ZS5jb2xvciB9fSAvPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgIDwvbW90aW9uLmRpdj5cXG4gICAgICAgICAgICApO1xcbiAgICAgICAgICB9KX1cXG4gICAgICAgIDwvbW90aW9uLmRpdj5cXG5cXG4gICAgICAgIHsvKiBCb3R0b20gUXVvdGUgKi99XFxuICAgICAgICA8bW90aW9uLmRpdlxcbiAgICAgICAgICBpbml0aWFsPXt7IG9wYWNpdHk6IDAsIHk6IDMwIH19XFxuICAgICAgICAgIHdoaWxlSW5WaWV3PXt7IG9wYWNpdHk6IDEsIHk6IDAgfX1cXG4gICAgICAgICAgdmlld3BvcnQ9e3sgb25jZTogdHJ1ZSB9fVxcbiAgICAgICAgICB0cmFuc2l0aW9uPXt7IGR1cmF0aW9uOiAwLjgsIGRlbGF5OiAwLjUgfX1cXG4gICAgICAgICAgY2xhc3NOYW1lPVxcXCJ0ZXh0LWNlbnRlciBtdC0yMFxcXCJcXG4gICAgICAgID5cXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcImJnLXdoaXRlIHJvdW5kZWQtM3hsIHAtOCBsZzpwLTEyIHNoYWRvdy1sZyBib3JkZXIgYm9yZGVyLVt2YXIoLS1uZXV0cmFsLTIwMCldIG1heC13LTR4bCBteC1hdXRvXFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwidGV4dC00eGwgbWItNlxcXCI+XFx1ZDgzZFxcdWRjYTE8L2Rpdj5cXG4gICAgICAgICAgICA8YmxvY2txdW90ZSBjbGFzc05hbWU9XFxcInRleHQteGwgbGc6dGV4dC0yeGwgZm9udC1tZWRpdW0gdGV4dC1bdmFyKC0tbmV1dHJhbC04MDApXSBtYi02IGxlYWRpbmctcmVsYXhlZFxcXCI+XFxuICAgICAgICAgICAgICBcXFwiT3VyIHZhbHVlcyBhcmVuJ3QganVzdCB3b3JkcyBvbiBhIHdhbGxcXHUyMDE0dGhleSdyZSB0aGUgY29tcGFzcyB0aGF0IGd1aWRlcyBldmVyeSBkZWNpc2lvbiwgXFxuICAgICAgICAgICAgICBldmVyeSBsaW5lIG9mIGNvZGUsIGFuZCBldmVyeSBjbGllbnQgaW50ZXJhY3Rpb24uXFxcIlxcbiAgICAgICAgICAgIDwvYmxvY2txdW90ZT5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwidGV4dC1bdmFyKC0tbmV1dHJhbC02MDApXVxcXCI+XFxuICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XFxcImZvbnQtc2VtaWJvbGRcXFwiPlRoZSBBcmFiaXRlcyBUZWFtPC9wPlxcbiAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVxcXCJ0ZXh0LXNtXFxcIj5EdWJhaSwgVUFFPC9wPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvbW90aW9uLmRpdj5cXG4gICAgICA8L2Rpdj5cXG4gICAgPC9zZWN0aW9uPlxcbiAgKTtcXG59XCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiRmlsZSBzYXZlZC4gIFNhdmVkIGZpbGUge3NyYy9jb21wb25lbnRzL3NlY3Rpb25zL2Fib3V0L091clN0b3J5LnRzeH0iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1XzAxNHZBYXRhd3c5amJiaXVmcE52NFBOOSJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkM6L1VzZXJzL2RhdGFtL0Rlc2t0b3AvYXJhYml0ZXMiLCJmb2xkZXJSb290IjoiQzovVXNlcnMvZGF0YW0vRGVza3RvcC9hcmFiaXRlcyJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMjdUMjE6MzM6MzIuNDY1WiIsInJlc3BvbnNlX3RleHQiOiIiLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiZTAyMjQ2M2QtNzM2ZS00YjEzLWE2NWYtZjIwMjcwNGIwM2VmIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV8wMUxvb3RHaEsxdG4zbnlaVDIxSExyUnQiLCJ0b29sX25hbWUiOiJzYXZlLWZpbGUiLCJpbnB1dF9qc29uIjoie1wiaW5zdHJ1Y3Rpb25zX3JlbWluZGVyXCI6IFwiTElNSVQgVEhFIEZJTEUgQ09OVEVOVCBUTyBBVCBNT1NUIDMwMCBMSU5FUy4gSUYgTU9SRSBDT05URU5UIE5FRURTIFRPIEJFIEFEREVEIFVTRSBUSEUgc3RyLXJlcGxhY2UtZWRpdG9yIFRPT0wgVE8gRURJVCBUSEUgRklMRSBBRlRFUiBJVCBIQVMgQkVFTiBDUkVBVEVELlwiLCBcInBhdGhcIjogXCJzcmMvY29tcG9uZW50cy9zZWN0aW9ucy9hYm91dC9TdGF0cy50c3hcIiwgXCJmaWxlX2NvbnRlbnRcIjogXCJcXFwidXNlIGNsaWVudFxcXCI7XFxuXFxuaW1wb3J0IHsgbW90aW9uLCB1c2VJblZpZXcsIHVzZU1vdGlvblZhbHVlLCB1c2VTcHJpbmcgfSBmcm9tIFxcXCJmcmFtZXItbW90aW9uXFxcIjtcXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gXFxcInJlYWN0XFxcIjtcXG5pbXBvcnQgeyBUcm9waHksIFVzZXJzLCBDbG9jaywgVGFyZ2V0LCBTdGFyLCBaYXAgfSBmcm9tIFxcXCJsdWNpZGUtcmVhY3RcXFwiO1xcblxcbmNvbnN0IHN0YXRzID0gW1xcbiAge1xcbiAgICBpY29uOiBUcm9waHksXFxuICAgIG51bWJlcjogMjUsXFxuICAgIHN1ZmZpeDogXFxcIitcXFwiLFxcbiAgICBsYWJlbDogXFxcIlByb2plY3RzIFNoaXBwZWRcXFwiLFxcbiAgICBkZXNjcmlwdGlvbjogXFxcIlN1Y2Nlc3NmdWxseSBkZWxpdmVyZWQgYWNyb3NzIHZhcmlvdXMgaW5kdXN0cmllc1xcXCIsXFxuICAgIGNvbG9yOiBcXFwidmFyKC0tcHJpbWFyeSlcXFwiLFxcbiAgICBncmFkaWVudDogXFxcImZyb20tYmx1ZS01MDAgdG8tYmx1ZS02MDBcXFwiXFxuICB9LFxcbiAge1xcbiAgICBpY29uOiBTdGFyLFxcbiAgICBudW1iZXI6IDEwMCxcXG4gICAgc3VmZml4OiBcXFwiJVxcXCIsXFxuICAgIGxhYmVsOiBcXFwiQ2xpZW50IFNhdGlzZmFjdGlvblxcXCIsXFxuICAgIGRlc2NyaXB0aW9uOiBcXFwiTWFpbnRhaW5pbmcgcGVyZmVjdCBzYXRpc2ZhY3Rpb24gc2NvcmVzXFxcIixcXG4gICAgY29sb3I6IFxcXCJ2YXIoLS1zZWNvbmRhcnkpXFxcIixcXG4gICAgZ3JhZGllbnQ6IFxcXCJmcm9tLWFtYmVyLTUwMCB0by1hbWJlci02MDBcXFwiXFxuICB9LFxcbiAge1xcbiAgICBpY29uOiBDbG9jayxcXG4gICAgbnVtYmVyOiAyNCxcXG4gICAgc3VmZml4OiBcXFwiLzdcXFwiLFxcbiAgICBsYWJlbDogXFxcIlN1cHBvcnQgQXZhaWxhYmxlXFxcIixcXG4gICAgZGVzY3JpcHRpb246IFxcXCJSb3VuZC10aGUtY2xvY2sgYXNzaXN0YW5jZSB3aGVuIHlvdSBuZWVkIGl0XFxcIixcXG4gICAgY29sb3I6IFxcXCJ2YXIoLS1hY2NlbnQpXFxcIixcXG4gICAgZ3JhZGllbnQ6IFxcXCJmcm9tLWN5YW4tNTAwIHRvLWN5YW4tNjAwXFxcIlxcbiAgfSxcXG4gIHtcXG4gICAgaWNvbjogVGFyZ2V0LFxcbiAgICBudW1iZXI6IDUsXFxuICAgIHN1ZmZpeDogXFxcIitcXFwiLFxcbiAgICBsYWJlbDogXFxcIkluZHVzdHJpZXMgU2VydmVkXFxcIixcXG4gICAgZGVzY3JpcHRpb246IFxcXCJTcGVjaWFsaXplZCBleHBlcnRpc2UgYWNyb3NzIGtleSBzZWN0b3JzXFxcIixcXG4gICAgY29sb3I6IFxcXCJ2YXIoLS1wcmltYXJ5KVxcXCIsXFxuICAgIGdyYWRpZW50OiBcXFwiZnJvbS1wdXJwbGUtNTAwIHRvLXB1cnBsZS02MDBcXFwiXFxuICB9LFxcbiAge1xcbiAgICBpY29uOiBVc2VycyxcXG4gICAgbnVtYmVyOiA1MCxcXG4gICAgc3VmZml4OiBcXFwiK1xcXCIsXFxuICAgIGxhYmVsOiBcXFwiSGFwcHkgQ2xpZW50c1xcXCIsXFxuICAgIGRlc2NyaXB0aW9uOiBcXFwiQnVpbGRpbmcgbGFzdGluZyBwYXJ0bmVyc2hpcHNcXFwiLFxcbiAgICBjb2xvcjogXFxcInZhcigtLXNlY29uZGFyeSlcXFwiLFxcbiAgICBncmFkaWVudDogXFxcImZyb20tcm9zZS01MDAgdG8tcm9zZS02MDBcXFwiXFxuICB9LFxcbiAge1xcbiAgICBpY29uOiBaYXAsXFxuICAgIG51bWJlcjogOTksXFxuICAgIHN1ZmZpeDogXFxcIiVcXFwiLFxcbiAgICBsYWJlbDogXFxcIk9uLVRpbWUgRGVsaXZlcnlcXFwiLFxcbiAgICBkZXNjcmlwdGlvbjogXFxcIkNvbnNpc3RlbnRseSBtZWV0aW5nIHByb2plY3QgZGVhZGxpbmVzXFxcIixcXG4gICAgY29sb3I6IFxcXCJ2YXIoLS1hY2NlbnQpXFxcIixcXG4gICAgZ3JhZGllbnQ6IFxcXCJmcm9tLWdyZWVuLTUwMCB0by1ncmVlbi02MDBcXFwiXFxuICB9XFxuXTtcXG5cXG5mdW5jdGlvbiBBbmltYXRlZENvdW50ZXIoeyB2YWx1ZSwgZHVyYXRpb24gPSAyMDAwIH06IHsgdmFsdWU6IG51bWJlcjsgZHVyYXRpb24/OiBudW1iZXIgfSkge1xcbiAgY29uc3QgcmVmID0gdXNlUmVmPEhUTUxTcGFuRWxlbWVudD4obnVsbCk7XFxuICBjb25zdCBtb3Rpb25WYWx1ZSA9IHVzZU1vdGlvblZhbHVlKDApO1xcbiAgY29uc3Qgc3ByaW5nVmFsdWUgPSB1c2VTcHJpbmcobW90aW9uVmFsdWUsIHsgZHVyYXRpb24gfSk7XFxuICBjb25zdCBpc0luVmlldyA9IHVzZUluVmlldyhyZWYsIHsgb25jZTogdHJ1ZSwgbWFyZ2luOiBcXFwiLTEwMHB4XFxcIiB9KTtcXG5cXG4gIHVzZUVmZmVjdCgoKSA9PiB7XFxuICAgIGlmIChpc0luVmlldykge1xcbiAgICAgIG1vdGlvblZhbHVlLnNldCh2YWx1ZSk7XFxuICAgIH1cXG4gIH0sIFttb3Rpb25WYWx1ZSwgaXNJblZpZXcsIHZhbHVlXSk7XFxuXFxuICB1c2VFZmZlY3QoKCkgPT4ge1xcbiAgICBzcHJpbmdWYWx1ZS5vbihcXFwiY2hhbmdlXFxcIiwgKGxhdGVzdCkgPT4ge1xcbiAgICAgIGlmIChyZWYuY3VycmVudCkge1xcbiAgICAgICAgcmVmLmN1cnJlbnQudGV4dENvbnRlbnQgPSBNYXRoLmZsb29yKGxhdGVzdCkudG9TdHJpbmcoKTtcXG4gICAgICB9XFxuICAgIH0pO1xcbiAgfSwgW3NwcmluZ1ZhbHVlXSk7XFxuXFxuICByZXR1cm4gPHNwYW4gcmVmPXtyZWZ9PjA8L3NwYW4+O1xcbn1cXG5cXG5jb25zdCBjb250YWluZXJWYXJpYW50cyA9IHtcXG4gIGhpZGRlbjogeyBvcGFjaXR5OiAwIH0sXFxuICB2aXNpYmxlOiB7XFxuICAgIG9wYWNpdHk6IDEsXFxuICAgIHRyYW5zaXRpb246IHtcXG4gICAgICBzdGFnZ2VyQ2hpbGRyZW46IDAuMVxcbiAgICB9XFxuICB9XFxufTtcXG5cXG5jb25zdCBpdGVtVmFyaWFudHMgPSB7XFxuICBoaWRkZW46IHsgb3BhY2l0eTogMCwgeTogNTAsIHNjYWxlOiAwLjkgfSxcXG4gIHZpc2libGU6IHtcXG4gICAgb3BhY2l0eTogMSxcXG4gICAgeTogMCxcXG4gICAgc2NhbGU6IDEsXFxuICAgIHRyYW5zaXRpb246IHtcXG4gICAgICBkdXJhdGlvbjogMC44LFxcbiAgICAgIGVhc2U6IFxcXCJlYXNlT3V0XFxcIlxcbiAgICB9XFxuICB9XFxufTtcXG5cXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTdGF0cygpIHtcXG4gIHJldHVybiAoXFxuICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cXFwicHktMjAgbGc6cHktMzIgYmctd2hpdGUgcmVsYXRpdmUgb3ZlcmZsb3ctaGlkZGVuXFxcIj5cXG4gICAgICB7LyogQmFja2dyb3VuZCBQYXR0ZXJuICovfVxcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJhYnNvbHV0ZSBpbnNldC0wIG9wYWNpdHktNVxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwiYWJzb2x1dGUgaW5zZXQtMFxcXCIgc3R5bGU9e3tcXG4gICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgcmFkaWFsLWdyYWRpZW50KGNpcmNsZSBhdCAyMCUgMjAlLCB2YXIoLS1wcmltYXJ5KSAycHgsIHRyYW5zcGFyZW50IDJweCksXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFkaWFsLWdyYWRpZW50KGNpcmNsZSBhdCA4MCUgODAlLCB2YXIoLS1zZWNvbmRhcnkpIDJweCwgdHJhbnNwYXJlbnQgMnB4KWAsXFxuICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnMTAwcHggMTAwcHgnXFxuICAgICAgICB9fSAvPlxcbiAgICAgIDwvZGl2PlxcblxcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJjb250YWluZXIgbXgtYXV0byBweC00IHNtOnB4LTYgbGc6cHgtOCByZWxhdGl2ZSB6LTEwXFxcIj5cXG4gICAgICAgIHsvKiBTZWN0aW9uIEhlYWRlciAqL31cXG4gICAgICAgIDxtb3Rpb24uZGl2XFxuICAgICAgICAgIGluaXRpYWw9e3sgb3BhY2l0eTogMCwgeTogMzAgfX1cXG4gICAgICAgICAgd2hpbGVJblZpZXc9e3sgb3BhY2l0eTogMSwgeTogMCB9fVxcbiAgICAgICAgICB2aWV3cG9ydD17eyBvbmNlOiB0cnVlIH19XFxuICAgICAgICAgIHRyYW5zaXRpb249e3sgZHVyYXRpb246IDAuOCB9fVxcbiAgICAgICAgICBjbGFzc05hbWU9XFxcInRleHQtY2VudGVyIG1iLTE2XFxcIlxcbiAgICAgICAgPlxcbiAgICAgICAgICA8aDIgY2xhc3NOYW1lPVxcXCJ0ZXh0LTN4bCBzbTp0ZXh0LTR4bCBsZzp0ZXh0LTV4bCBmb250LWJvbGQgdGV4dC1bdmFyKC0tbmV1dHJhbC05MDApXSBtYi02XFxcIj5cXG4gICAgICAgICAgICBPdXIgSW1wYWN0XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVxcXCJibG9jayBiZy1ncmFkaWVudC10by1yIGZyb20tW3ZhcigtLXByaW1hcnkpXSB0by1bdmFyKC0tc2Vjb25kYXJ5KV0gYmctY2xpcC10ZXh0IHRleHQtdHJhbnNwYXJlbnRcXFwiPlxcbiAgICAgICAgICAgICAgSW4gTnVtYmVyc1xcbiAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgPC9oMj5cXG4gICAgICAgICAgPHAgY2xhc3NOYW1lPVxcXCJ0ZXh0LWxnIHNtOnRleHQteGwgdGV4dC1bdmFyKC0tbmV1dHJhbC02MDApXSBtYXgtdy0zeGwgbXgtYXV0byBsZWFkaW5nLXJlbGF4ZWRcXFwiPlxcbiAgICAgICAgICAgIFRoZXNlIG1pbGVzdG9uZXMgcmVwcmVzZW50IG1vcmUgdGhhbiBqdXN0IG51bWJlcnNcXHUyMDE0dGhleSdyZSBhIHRlc3RhbWVudCB0byB0aGUgdHJ1c3QgXFxuICAgICAgICAgICAgb3VyIGNsaWVudHMgcGxhY2UgaW4gdXMgYW5kIHRoZSByZXN1bHRzIHdlIGRlbGl2ZXIgdG9nZXRoZXIuXFxuICAgICAgICAgIDwvcD5cXG4gICAgICAgIDwvbW90aW9uLmRpdj5cXG5cXG4gICAgICAgIHsvKiBTdGF0cyBHcmlkICovfVxcbiAgICAgICAgPG1vdGlvbi5kaXZcXG4gICAgICAgICAgdmFyaWFudHM9e2NvbnRhaW5lclZhcmlhbnRzfVxcbiAgICAgICAgICBpbml0aWFsPVxcXCJoaWRkZW5cXFwiXFxuICAgICAgICAgIHdoaWxlSW5WaWV3PVxcXCJ2aXNpYmxlXFxcIlxcbiAgICAgICAgICB2aWV3cG9ydD17eyBvbmNlOiB0cnVlIH19XFxuICAgICAgICAgIGNsYXNzTmFtZT1cXFwiZ3JpZCBncmlkLWNvbHMtMSBtZDpncmlkLWNvbHMtMiBsZzpncmlkLWNvbHMtMyBnYXAtOCBsZzpnYXAtMTBcXFwiXFxuICAgICAgICA+XFxuICAgICAgICAgIHtzdGF0cy5tYXAoKHN0YXQsIGluZGV4KSA9PiB7XFxuICAgICAgICAgICAgY29uc3QgSWNvbiA9IHN0YXQuaWNvbjtcXG4gICAgICAgICAgICByZXR1cm4gKFxcbiAgICAgICAgICAgICAgPG1vdGlvbi5kaXZcXG4gICAgICAgICAgICAgICAga2V5PXtzdGF0LmxhYmVsfVxcbiAgICAgICAgICAgICAgICB2YXJpYW50cz17aXRlbVZhcmlhbnRzfVxcbiAgICAgICAgICAgICAgICB3aGlsZUhvdmVyPXt7IFxcbiAgICAgICAgICAgICAgICAgIHk6IC0xMCxcXG4gICAgICAgICAgICAgICAgICBzY2FsZTogMS4wMixcXG4gICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiB7IGR1cmF0aW9uOiAwLjMgfVxcbiAgICAgICAgICAgICAgICB9fVxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XFxcImdyb3VwIHJlbGF0aXZlXFxcIlxcbiAgICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwiYmctd2hpdGUgcm91bmRlZC0zeGwgcC04IGxnOnAtMTAgc2hhZG93LWxnIGhvdmVyOnNoYWRvdy0yeGwgdHJhbnNpdGlvbi1hbGwgZHVyYXRpb24tNTAwIGJvcmRlciBib3JkZXItW3ZhcigtLW5ldXRyYWwtMjAwKV0gaG92ZXI6Ym9yZGVyLVt2YXIoLS1wcmltYXJ5KV0vMjAgaC1mdWxsIHJlbGF0aXZlIG92ZXJmbG93LWhpZGRlblxcXCI+XFxuICAgICAgICAgICAgICAgICAgey8qIEJhY2tncm91bmQgR3JhZGllbnQgb24gSG92ZXIgKi99XFxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2BhYnNvbHV0ZSBpbnNldC0wIGJnLWdyYWRpZW50LXRvLWJyICR7c3RhdC5ncmFkaWVudH0gb3BhY2l0eS0wIGdyb3VwLWhvdmVyOm9wYWNpdHktNSB0cmFuc2l0aW9uLW9wYWNpdHkgZHVyYXRpb24tNTAwYH0gLz5cXG4gICAgICAgICAgICAgICAgICBcXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwicmVsYXRpdmUgei0xMCB0ZXh0LWNlbnRlclxcXCI+XFxuICAgICAgICAgICAgICAgICAgICB7LyogSWNvbiAqL31cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgXFxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cXFwidy0yMCBoLTIwIHJvdW5kZWQtMnhsIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIG1iLTYgbXgtYXV0byBncm91cC1ob3ZlcjpzY2FsZS0xMTAgdHJhbnNpdGlvbi1hbGwgZHVyYXRpb24tNTAwIHJlbGF0aXZlXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyBiYWNrZ3JvdW5kQ29sb3I6IGAke3N0YXQuY29sb3J9MTVgIH19XFxuICAgICAgICAgICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgICAgICAgIDxJY29uIFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cXFwidy0xMCBoLTEwIHRyYW5zaXRpb24tYWxsIGR1cmF0aW9uLTUwMCBncm91cC1ob3ZlcjpzY2FsZS0xMTBcXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgY29sb3I6IHN0YXQuY29sb3IgfX1cXG4gICAgICAgICAgICAgICAgICAgICAgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgXFxuICAgICAgICAgICAgICAgICAgICAgIHsvKiBJY29uIEdsb3cgRWZmZWN0ICovfVxcbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cXFwiYWJzb2x1dGUgaW5zZXQtMCByb3VuZGVkLTJ4bCBvcGFjaXR5LTAgZ3JvdXAtaG92ZXI6b3BhY2l0eS0zMCB0cmFuc2l0aW9uLW9wYWNpdHkgZHVyYXRpb24tNTAwXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogYHJhZGlhbC1ncmFkaWVudChjaXJjbGUsICR7c3RhdC5jb2xvcn0gMCUsIHRyYW5zcGFyZW50IDcwJSlgLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiAnYmx1cigxNXB4KSdcXG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxcbiAgICAgICAgICAgICAgICAgICAgICAvPlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuXFxuICAgICAgICAgICAgICAgICAgICB7LyogTnVtYmVyICovfVxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcIm1iLTRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XFxcInRleHQtNHhsIGxnOnRleHQtNXhsIGZvbnQtYm9sZCBiZy1ncmFkaWVudC10by1yIGZyb20tW3ZhcigtLXByaW1hcnkpXSB0by1bdmFyKC0tc2Vjb25kYXJ5KV0gYmctY2xpcC10ZXh0IHRleHQtdHJhbnNwYXJlbnRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxBbmltYXRlZENvdW50ZXIgdmFsdWU9e3N0YXQubnVtYmVyfSAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtzdGF0LnN1ZmZpeH1cXG4gICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuXFxuICAgICAgICAgICAgICAgICAgICB7LyogTGFiZWwgKi99XFxuICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3NOYW1lPVxcXCJ0ZXh0LXhsIGZvbnQtYm9sZCB0ZXh0LVt2YXIoLS1uZXV0cmFsLTkwMCldIG1iLTMgZ3JvdXAtaG92ZXI6dGV4dC1bdmFyKC0tcHJpbWFyeSldIHRyYW5zaXRpb24tY29sb3JzIGR1cmF0aW9uLTMwMFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgIHtzdGF0LmxhYmVsfVxcbiAgICAgICAgICAgICAgICAgICAgPC9oMz5cXG5cXG4gICAgICAgICAgICAgICAgICAgIHsvKiBEZXNjcmlwdGlvbiAqL31cXG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cXFwidGV4dC1bdmFyKC0tbmV1dHJhbC02MDApXSBsZWFkaW5nLXJlbGF4ZWQgZ3JvdXAtaG92ZXI6dGV4dC1bdmFyKC0tbmV1dHJhbC03MDApXSB0cmFuc2l0aW9uLWNvbG9ycyBkdXJhdGlvbi0zMDBcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICB7c3RhdC5kZXNjcmlwdGlvbn1cXG4gICAgICAgICAgICAgICAgICAgIDwvcD5cXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgICAgICAgICAgICB7LyogRGVjb3JhdGl2ZSBFbGVtZW50cyAqL31cXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwiYWJzb2x1dGUgdG9wLTQgcmlnaHQtNCB3LTggaC04IHJvdW5kZWQtZnVsbCBvcGFjaXR5LTEwIGdyb3VwLWhvdmVyOm9wYWNpdHktMjAgdHJhbnNpdGlvbi1vcGFjaXR5IGR1cmF0aW9uLTUwMFxcXCIgXFxuICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyBiYWNrZ3JvdW5kQ29sb3I6IHN0YXQuY29sb3IgfX0gLz5cXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwiYWJzb2x1dGUgYm90dG9tLTQgbGVmdC00IHctNiBoLTYgcm91bmRlZC1mdWxsIG9wYWNpdHktMTAgZ3JvdXAtaG92ZXI6b3BhY2l0eS0yMCB0cmFuc2l0aW9uLW9wYWNpdHkgZHVyYXRpb24tNTAwXFxcIiBcXG4gICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IGJhY2tncm91bmRDb2xvcjogc3RhdC5jb2xvciB9fSAvPlxcbiAgICAgICAgICAgICAgICAgIFxcbiAgICAgICAgICAgICAgICAgIHsvKiBQdWxzZSBFZmZlY3QgKi99XFxuICAgICAgICAgICAgICAgICAgPG1vdGlvbi5kaXZcXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cXFwiYWJzb2x1dGUgaW5zZXQtMCByb3VuZGVkLTN4bCBib3JkZXItMiBvcGFjaXR5LTAgZ3JvdXAtaG92ZXI6b3BhY2l0eS0yMFxcXCJcXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IGJvcmRlckNvbG9yOiBzdGF0LmNvbG9yIH19XFxuICAgICAgICAgICAgICAgICAgICBhbmltYXRlPXt7XFxuICAgICAgICAgICAgICAgICAgICAgIHNjYWxlOiBbMSwgMS4wNSwgMV0sXFxuICAgICAgICAgICAgICAgICAgICB9fVxcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbj17e1xcbiAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMixcXG4gICAgICAgICAgICAgICAgICAgICAgcmVwZWF0OiBJbmZpbml0eSxcXG4gICAgICAgICAgICAgICAgICAgICAgZWFzZTogXFxcImVhc2VJbk91dFxcXCIsXFxuICAgICAgICAgICAgICAgICAgICB9fVxcbiAgICAgICAgICAgICAgICAgIC8+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgPC9tb3Rpb24uZGl2PlxcbiAgICAgICAgICAgICk7XFxuICAgICAgICAgIH0pfVxcbiAgICAgICAgPC9tb3Rpb24uZGl2PlxcblxcbiAgICAgICAgey8qIEJvdHRvbSBDVEEgKi99XFxuICAgICAgICA8bW90aW9uLmRpdlxcbiAgICAgICAgICBpbml0aWFsPXt7IG9wYWNpdHk6IDAsIHk6IDMwIH19XFxuICAgICAgICAgIHdoaWxlSW5WaWV3PXt7IG9wYWNpdHk6IDEsIHk6IDAgfX1cXG4gICAgICAgICAgdmlld3BvcnQ9e3sgb25jZTogdHJ1ZSB9fVxcbiAgICAgICAgICB0cmFuc2l0aW9uPXt7IGR1cmF0aW9uOiAwLjgsIGRlbGF5OiAwLjUgfX1cXG4gICAgICAgICAgY2xhc3NOYW1lPVxcXCJ0ZXh0LWNlbnRlciBtdC0yMFxcXCJcXG4gICAgICAgID5cXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcImJnLWdyYWRpZW50LXRvLWJyIGZyb20tW3ZhcigtLXByaW1hcnkpXS81IHRvLVt2YXIoLS1zZWNvbmRhcnkpXS81IHJvdW5kZWQtM3hsIHAtOCBsZzpwLTEyIGJvcmRlciBib3JkZXItW3ZhcigtLW5ldXRyYWwtMjAwKV1cXFwiPlxcbiAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9XFxcInRleHQtMnhsIGxnOnRleHQtM3hsIGZvbnQtYm9sZCB0ZXh0LVt2YXIoLS1uZXV0cmFsLTkwMCldIG1iLTRcXFwiPlxcbiAgICAgICAgICAgICAgUmVhZHkgdG8gQWRkIFlvdXIgU3VjY2VzcyBTdG9yeT9cXG4gICAgICAgICAgICA8L2gzPlxcbiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cXFwidGV4dC1sZyB0ZXh0LVt2YXIoLS1uZXV0cmFsLTYwMCldIG1iLTYgbWF4LXctMnhsIG14LWF1dG9cXFwiPlxcbiAgICAgICAgICAgICAgSm9pbiBvdXIgZ3Jvd2luZyBsaXN0IG9mIHNhdGlzZmllZCBjbGllbnRzIGFuZCBsZXQncyBjcmVhdGUgc29tZXRoaW5nIGFtYXppbmcgdG9nZXRoZXIuXFxuICAgICAgICAgICAgPC9wPlxcbiAgICAgICAgICAgIDxtb3Rpb24uYVxcbiAgICAgICAgICAgICAgaHJlZj1cXFwiLyNjb250YWN0XFxcIlxcbiAgICAgICAgICAgICAgd2hpbGVIb3Zlcj17eyBzY2FsZTogMS4wNSB9fVxcbiAgICAgICAgICAgICAgd2hpbGVUYXA9e3sgc2NhbGU6IDAuOTUgfX1cXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cXFwiaW5saW5lLWZsZXggaXRlbXMtY2VudGVyIGJnLVt2YXIoLS1wcmltYXJ5KV0gdGV4dC13aGl0ZSBweC04IHB5LTQgcm91bmRlZC14bCBmb250LXNlbWlib2xkIGhvdmVyOmJnLVt2YXIoLS1wcmltYXJ5LWRhcmspXSB0cmFuc2l0aW9uLWNvbG9ycyBkdXJhdGlvbi0zMDAgc2hhZG93LWxnIGhvdmVyOnNoYWRvdy14bFxcXCJcXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICBTdGFydCBZb3VyIFByb2plY3RcXG4gICAgICAgICAgICA8L21vdGlvbi5hPlxcbiAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvbW90aW9uLmRpdj5cXG4gICAgICA8L2Rpdj5cXG4gICAgPC9zZWN0aW9uPlxcbiAgKTtcXG59XCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiRmlsZSBzYXZlZC4gIFNhdmVkIGZpbGUge3NyYy9jb21wb25lbnRzL3NlY3Rpb25zL2Fib3V0L1ZhbHVlcy50c3h9IiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMUFUTTFhdFpLSzI2VW5qeHBlRkpBUWgifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJDOi9Vc2Vycy9kYXRhbS9EZXNrdG9wL2FyYWJpdGVzIiwiZm9sZGVyUm9vdCI6IkM6L1VzZXJzL2RhdGFtL0Rlc2t0b3AvYXJhYml0ZXMifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTI3VDIxOjM0OjA0LjI0OFoiLCJyZXNwb25zZV90ZXh0IjoiIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjM3ZmJiMGNjLWJhOGMtNDQxOC04NTZkLWRhNjU1YTY0NTFhYyIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDFVRkFramZ5RTdaZ3lQYUZqa0dQZWY2IiwidG9vbF9uYW1lIjoic2F2ZS1maWxlIiwiaW5wdXRfanNvbiI6IntcImluc3RydWN0aW9uc19yZW1pbmRlclwiOiBcIkxJTUlUIFRIRSBGSUxFIENPTlRFTlQgVE8gQVQgTU9TVCAzMDAgTElORVMuIElGIE1PUkUgQ09OVEVOVCBORUVEUyBUTyBCRSBBRERFRCBVU0UgVEhFIHN0ci1yZXBsYWNlLWVkaXRvciBUT09MIFRPIEVESVQgVEhFIEZJTEUgQUZURVIgSVQgSEFTIEJFRU4gQ1JFQVRFRC5cIiwgXCJwYXRoXCI6IFwic3JjL2NvbXBvbmVudHMvc2VjdGlvbnMvYWJvdXQvVGVhbS50c3hcIiwgXCJmaWxlX2NvbnRlbnRcIjogXCJcXFwidXNlIGNsaWVudFxcXCI7XFxuXFxuaW1wb3J0IHsgbW90aW9uIH0gZnJvbSBcXFwiZnJhbWVyLW1vdGlvblxcXCI7XFxuaW1wb3J0IHsgTGlua2VkaW4sIEdpdGh1YiwgVHdpdHRlciwgTWFpbCB9IGZyb20gXFxcImx1Y2lkZS1yZWFjdFxcXCI7XFxuXFxuY29uc3QgdGVhbU1lbWJlcnMgPSBbXFxuICB7XFxuICAgIG5hbWU6IFxcXCJBaG1lZCBBbC1SYXNoaWRcXFwiLFxcbiAgICByb2xlOiBcXFwiRm91bmRlciAmIExlYWQgRGV2ZWxvcGVyXFxcIixcXG4gICAgYmlvOiBcXFwiRnVsbC1zdGFjayBkZXZlbG9wZXIgd2l0aCA4KyB5ZWFycyBvZiBleHBlcmllbmNlIGJ1aWxkaW5nIHNjYWxhYmxlIHdlYiBhcHBsaWNhdGlvbnMuIFBhc3Npb25hdGUgYWJvdXQgY3JlYXRpbmcgZGlnaXRhbCBzb2x1dGlvbnMgdGhhdCBkcml2ZSBidXNpbmVzcyBncm93dGguXFxcIixcXG4gICAgaW1hZ2U6IFxcXCIvdGVhbS9haG1lZC5qcGdcXFwiLCAvLyBQbGFjZWhvbGRlciAtIHdpbGwgYmUgcmVwbGFjZWRcXG4gICAgc2tpbGxzOiBbXFxcIlJlYWN0XFxcIiwgXFxcIk5vZGUuanNcXFwiLCBcXFwiVHlwZVNjcmlwdFxcXCIsIFxcXCJBV1NcXFwiXSxcXG4gICAgc29jaWFsOiB7XFxuICAgICAgbGlua2VkaW46IFxcXCJodHRwczovL2xpbmtlZGluLmNvbS9pbi9haG1lZC1hbHJhc2hpZFxcXCIsXFxuICAgICAgZ2l0aHViOiBcXFwiaHR0cHM6Ly9naXRodWIuY29tL2FobWVkLWFscmFzaGlkXFxcIixcXG4gICAgICBlbWFpbDogXFxcImFobWVkQGFyYWJpdGVzLmNvbVxcXCJcXG4gICAgfSxcXG4gICAgZ3JhZGllbnQ6IFxcXCJmcm9tLWJsdWUtNTAwIHRvLXB1cnBsZS02MDBcXFwiXFxuICB9LFxcbiAge1xcbiAgICBuYW1lOiBcXFwiU2FyYWggTWl0Y2hlbGxcXFwiLFxcbiAgICByb2xlOiBcXFwiVUkvVVggRGVzaWduIExlYWRcXFwiLFxcbiAgICBiaW86IFxcXCJDcmVhdGl2ZSBkZXNpZ25lciB3aXRoIGEga2VlbiBleWUgZm9yIHVzZXIgZXhwZXJpZW5jZSBhbmQgbW9kZXJuIGFlc3RoZXRpY3MuIFNwZWNpYWxpemVzIGluIGNyZWF0aW5nIGludHVpdGl2ZSBpbnRlcmZhY2VzIHRoYXQgdXNlcnMgbG92ZS5cXFwiLFxcbiAgICBpbWFnZTogXFxcIi90ZWFtL3NhcmFoLmpwZ1xcXCIsIC8vIFBsYWNlaG9sZGVyIC0gd2lsbCBiZSByZXBsYWNlZFxcbiAgICBza2lsbHM6IFtcXFwiRmlnbWFcXFwiLCBcXFwiQWRvYmUgQ3JlYXRpdmUgU3VpdGVcXFwiLCBcXFwiVXNlciBSZXNlYXJjaFxcXCIsIFxcXCJQcm90b3R5cGluZ1xcXCJdLFxcbiAgICBzb2NpYWw6IHtcXG4gICAgICBsaW5rZWRpbjogXFxcImh0dHBzOi8vbGlua2VkaW4uY29tL2luL3NhcmFoLW1pdGNoZWxsXFxcIixcXG4gICAgICB0d2l0dGVyOiBcXFwiaHR0cHM6Ly90d2l0dGVyLmNvbS9zYXJhaGRlc2lnbnNcXFwiLFxcbiAgICAgIGVtYWlsOiBcXFwic2FyYWhAYXJhYml0ZXMuY29tXFxcIlxcbiAgICB9LFxcbiAgICBncmFkaWVudDogXFxcImZyb20tcGluay01MDAgdG8tcm9zZS02MDBcXFwiXFxuICB9LFxcbiAge1xcbiAgICBuYW1lOiBcXFwiT21hciBIYXNzYW5cXFwiLFxcbiAgICByb2xlOiBcXFwiQmFja2VuZCBBcmNoaXRlY3RcXFwiLFxcbiAgICBiaW86IFxcXCJTeXN0ZW1zIGFyY2hpdGVjdCBmb2N1c2VkIG9uIGJ1aWxkaW5nIHJvYnVzdCwgc2NhbGFibGUgYmFja2VuZCBzb2x1dGlvbnMuIEV4cGVydCBpbiBjbG91ZCBpbmZyYXN0cnVjdHVyZSBhbmQgZGF0YWJhc2Ugb3B0aW1pemF0aW9uLlxcXCIsXFxuICAgIGltYWdlOiBcXFwiL3RlYW0vb21hci5qcGdcXFwiLCAvLyBQbGFjZWhvbGRlciAtIHdpbGwgYmUgcmVwbGFjZWRcXG4gICAgc2tpbGxzOiBbXFxcIlB5dGhvblxcXCIsIFxcXCJEb2NrZXJcXFwiLCBcXFwiUG9zdGdyZVNRTFxcXCIsIFxcXCJNaWNyb3NlcnZpY2VzXFxcIl0sXFxuICAgIHNvY2lhbDoge1xcbiAgICAgIGxpbmtlZGluOiBcXFwiaHR0cHM6Ly9saW5rZWRpbi5jb20vaW4vb21hci1oYXNzYW5cXFwiLFxcbiAgICAgIGdpdGh1YjogXFxcImh0dHBzOi8vZ2l0aHViLmNvbS9vbWFyLWhhc3NhblxcXCIsXFxuICAgICAgZW1haWw6IFxcXCJvbWFyQGFyYWJpdGVzLmNvbVxcXCJcXG4gICAgfSxcXG4gICAgZ3JhZGllbnQ6IFxcXCJmcm9tLWdyZWVuLTUwMCB0by10ZWFsLTYwMFxcXCJcXG4gIH1cXG5dO1xcblxcbmNvbnN0IGNvbnRhaW5lclZhcmlhbnRzID0ge1xcbiAgaGlkZGVuOiB7IG9wYWNpdHk6IDAgfSxcXG4gIHZpc2libGU6IHtcXG4gICAgb3BhY2l0eTogMSxcXG4gICAgdHJhbnNpdGlvbjoge1xcbiAgICAgIHN0YWdnZXJDaGlsZHJlbjogMC4yXFxuICAgIH1cXG4gIH1cXG59O1xcblxcbmNvbnN0IGl0ZW1WYXJpYW50cyA9IHtcXG4gIGhpZGRlbjogeyBvcGFjaXR5OiAwLCB5OiA1MCB9LFxcbiAgdmlzaWJsZToge1xcbiAgICBvcGFjaXR5OiAxLFxcbiAgICB5OiAwLFxcbiAgICB0cmFuc2l0aW9uOiB7XFxuICAgICAgZHVyYXRpb246IDAuOCxcXG4gICAgICBlYXNlOiBcXFwiZWFzZU91dFxcXCJcXG4gICAgfVxcbiAgfVxcbn07XFxuXFxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVGVhbSgpIHtcXG4gIHJldHVybiAoXFxuICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cXFwicHktMjAgbGc6cHktMzIgYmctZ3JhZGllbnQtdG8tYnIgZnJvbS1bdmFyKC0tbmV1dHJhbC01MCldIHRvLXdoaXRlXFxcIj5cXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwiY29udGFpbmVyIG14LWF1dG8gcHgtNCBzbTpweC02IGxnOnB4LThcXFwiPlxcbiAgICAgICAgey8qIFNlY3Rpb24gSGVhZGVyICovfVxcbiAgICAgICAgPG1vdGlvbi5kaXZcXG4gICAgICAgICAgaW5pdGlhbD17eyBvcGFjaXR5OiAwLCB5OiAzMCB9fVxcbiAgICAgICAgICB3aGlsZUluVmlldz17eyBvcGFjaXR5OiAxLCB5OiAwIH19XFxuICAgICAgICAgIHZpZXdwb3J0PXt7IG9uY2U6IHRydWUgfX1cXG4gICAgICAgICAgdHJhbnNpdGlvbj17eyBkdXJhdGlvbjogMC44IH19XFxuICAgICAgICAgIGNsYXNzTmFtZT1cXFwidGV4dC1jZW50ZXIgbWItMTZcXFwiXFxuICAgICAgICA+XFxuICAgICAgICAgIDxoMiBjbGFzc05hbWU9XFxcInRleHQtM3hsIHNtOnRleHQtNHhsIGxnOnRleHQtNXhsIGZvbnQtYm9sZCB0ZXh0LVt2YXIoLS1uZXV0cmFsLTkwMCldIG1iLTZcXFwiPlxcbiAgICAgICAgICAgIE1lZXQgT3VyXFxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVxcXCJibG9jayBiZy1ncmFkaWVudC10by1yIGZyb20tW3ZhcigtLXByaW1hcnkpXSB0by1bdmFyKC0tc2Vjb25kYXJ5KV0gYmctY2xpcC10ZXh0IHRleHQtdHJhbnNwYXJlbnRcXFwiPlxcbiAgICAgICAgICAgICAgRXhwZXJ0IFRlYW1cXG4gICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgIDwvaDI+XFxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cXFwidGV4dC1sZyBzbTp0ZXh0LXhsIHRleHQtW3ZhcigtLW5ldXRyYWwtNjAwKV0gbWF4LXctM3hsIG14LWF1dG8gbGVhZGluZy1yZWxheGVkXFxcIj5cXG4gICAgICAgICAgICBUaGUgcGFzc2lvbmF0ZSBwcm9mZXNzaW9uYWxzIGJlaGluZCBldmVyeSBzdWNjZXNzZnVsIHByb2plY3QuIEVhY2ggYnJpbmdpbmcgdW5pcXVlIGV4cGVydGlzZSBcXG4gICAgICAgICAgICBhbmQgYSBzaGFyZWQgY29tbWl0bWVudCB0byBleGNlbGxlbmNlLlxcbiAgICAgICAgICA8L3A+XFxuICAgICAgICA8L21vdGlvbi5kaXY+XFxuXFxuICAgICAgICB7LyogVGVhbSBHcmlkICovfVxcbiAgICAgICAgPG1vdGlvbi5kaXZcXG4gICAgICAgICAgdmFyaWFudHM9e2NvbnRhaW5lclZhcmlhbnRzfVxcbiAgICAgICAgICBpbml0aWFsPVxcXCJoaWRkZW5cXFwiXFxuICAgICAgICAgIHdoaWxlSW5WaWV3PVxcXCJ2aXNpYmxlXFxcIlxcbiAgICAgICAgICB2aWV3cG9ydD17eyBvbmNlOiB0cnVlIH19XFxuICAgICAgICAgIGNsYXNzTmFtZT1cXFwiZ3JpZCBncmlkLWNvbHMtMSBtZDpncmlkLWNvbHMtMiBsZzpncmlkLWNvbHMtMyBnYXAtOCBsZzpnYXAtMTAgbWItMTZcXFwiXFxuICAgICAgICA+XFxuICAgICAgICAgIHt0ZWFtTWVtYmVycy5tYXAoKG1lbWJlciwgaW5kZXgpID0+IChcXG4gICAgICAgICAgICA8bW90aW9uLmRpdlxcbiAgICAgICAgICAgICAga2V5PXttZW1iZXIubmFtZX1cXG4gICAgICAgICAgICAgIHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9XFxuICAgICAgICAgICAgICB3aGlsZUhvdmVyPXt7IFxcbiAgICAgICAgICAgICAgICB5OiAtMTAsXFxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IHsgZHVyYXRpb246IDAuMyB9XFxuICAgICAgICAgICAgICB9fVxcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVxcXCJncm91cCByZWxhdGl2ZVxcXCJcXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwiYmctd2hpdGUgcm91bmRlZC0zeGwgcC04IHNoYWRvdy1sZyBob3ZlcjpzaGFkb3ctMnhsIHRyYW5zaXRpb24tYWxsIGR1cmF0aW9uLTUwMCBib3JkZXIgYm9yZGVyLVt2YXIoLS1uZXV0cmFsLTIwMCldIGhvdmVyOmJvcmRlci1bdmFyKC0tcHJpbWFyeSldLzIwIGgtZnVsbCByZWxhdGl2ZSBvdmVyZmxvdy1oaWRkZW5cXFwiPlxcbiAgICAgICAgICAgICAgICB7LyogQmFja2dyb3VuZCBHcmFkaWVudCBvbiBIb3ZlciAqL31cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2BhYnNvbHV0ZSBpbnNldC0wIGJnLWdyYWRpZW50LXRvLWJyICR7bWVtYmVyLmdyYWRpZW50fSBvcGFjaXR5LTAgZ3JvdXAtaG92ZXI6b3BhY2l0eS01IHRyYW5zaXRpb24tb3BhY2l0eSBkdXJhdGlvbi01MDBgfSAvPlxcbiAgICAgICAgICAgICAgICBcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcInJlbGF0aXZlIHotMTAgdGV4dC1jZW50ZXJcXFwiPlxcbiAgICAgICAgICAgICAgICAgIHsvKiBQcm9maWxlIEltYWdlIFBsYWNlaG9sZGVyICovfVxcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJ3LTI0IGgtMjQgbXgtYXV0byBtYi02IHJlbGF0aXZlXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgdy1mdWxsIGgtZnVsbCByb3VuZGVkLWZ1bGwgYmctZ3JhZGllbnQtdG8tYnIgJHttZW1iZXIuZ3JhZGllbnR9IGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHRleHQtd2hpdGUgdGV4dC0yeGwgZm9udC1ib2xkIHNoYWRvdy1sZyBncm91cC1ob3ZlcjpzY2FsZS0xMTAgdHJhbnNpdGlvbi10cmFuc2Zvcm0gZHVyYXRpb24tMzAwYH0+XFxuICAgICAgICAgICAgICAgICAgICAgIHttZW1iZXIubmFtZS5zcGxpdCgnICcpLm1hcChuID0+IG5bMF0pLmpvaW4oJycpfVxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICBcXG4gICAgICAgICAgICAgICAgICAgIHsvKiBPbmxpbmUgU3RhdHVzIEluZGljYXRvciAqL31cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJhYnNvbHV0ZSBib3R0b20tMiByaWdodC0yIHctNiBoLTYgYmctZ3JlZW4tNTAwIHJvdW5kZWQtZnVsbCBib3JkZXItNCBib3JkZXItd2hpdGUgc2hhZG93LWxnXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcInctZnVsbCBoLWZ1bGwgYmctZ3JlZW4tNTAwIHJvdW5kZWQtZnVsbCBhbmltYXRlLXB1bHNlXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuXFxuICAgICAgICAgICAgICAgICAgey8qIE5hbWUgJiBSb2xlICovfVxcbiAgICAgICAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9XFxcInRleHQteGwgZm9udC1ib2xkIHRleHQtW3ZhcigtLW5ldXRyYWwtOTAwKV0gbWItMiBncm91cC1ob3Zlcjp0ZXh0LVt2YXIoLS1wcmltYXJ5KV0gdHJhbnNpdGlvbi1jb2xvcnMgZHVyYXRpb24tMzAwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIHttZW1iZXIubmFtZX1cXG4gICAgICAgICAgICAgICAgICA8L2gzPlxcbiAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cXFwidGV4dC1bdmFyKC0tcHJpbWFyeSldIGZvbnQtc2VtaWJvbGQgbWItNFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICB7bWVtYmVyLnJvbGV9XFxuICAgICAgICAgICAgICAgICAgPC9wPlxcblxcbiAgICAgICAgICAgICAgICAgIHsvKiBCaW8gKi99XFxuICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVxcXCJ0ZXh0LVt2YXIoLS1uZXV0cmFsLTYwMCldIGxlYWRpbmctcmVsYXhlZCBtYi02IGdyb3VwLWhvdmVyOnRleHQtW3ZhcigtLW5ldXRyYWwtNzAwKV0gdHJhbnNpdGlvbi1jb2xvcnMgZHVyYXRpb24tMzAwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIHttZW1iZXIuYmlvfVxcbiAgICAgICAgICAgICAgICAgIDwvcD5cXG5cXG4gICAgICAgICAgICAgICAgICB7LyogU2tpbGxzICovfVxcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJmbGV4IGZsZXgtd3JhcCBqdXN0aWZ5LWNlbnRlciBnYXAtMiBtYi02XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIHttZW1iZXIuc2tpbGxzLm1hcCgoc2tpbGwpID0+IChcXG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW5cXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk9e3NraWxsfVxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cXFwicHgtMyBweS0xIGJnLVt2YXIoLS1uZXV0cmFsLTEwMCldIHRleHQtW3ZhcigtLW5ldXRyYWwtNzAwKV0gcm91bmRlZC1mdWxsIHRleHQtc20gZm9udC1tZWRpdW0gZ3JvdXAtaG92ZXI6YmctW3ZhcigtLXByaW1hcnkpXS8xMCBncm91cC1ob3Zlcjp0ZXh0LVt2YXIoLS1wcmltYXJ5KV0gdHJhbnNpdGlvbi1jb2xvcnMgZHVyYXRpb24tMzAwXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgICAgICAgICAge3NraWxsfVxcbiAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICApKX1cXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgICAgICAgICAgICB7LyogU29jaWFsIExpbmtzICovfVxcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJmbGV4IGp1c3RpZnktY2VudGVyIHNwYWNlLXgtNFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICB7bWVtYmVyLnNvY2lhbC5saW5rZWRpbiAmJiAoXFxuICAgICAgICAgICAgICAgICAgICAgIDxtb3Rpb24uYVxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9e21lbWJlci5zb2NpYWwubGlua2VkaW59XFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlSG92ZXI9e3sgc2NhbGU6IDEuMSwgeTogLTIgfX1cXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZVRhcD17eyBzY2FsZTogMC45NSB9fVxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cXFwidy0xMCBoLTEwIGJnLVt2YXIoLS1uZXV0cmFsLTEwMCldIHJvdW5kZWQtbGcgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgaG92ZXI6YmctW3ZhcigtLXByaW1hcnkpXSBob3Zlcjp0ZXh0LXdoaXRlIHRyYW5zaXRpb24tY29sb3JzIGR1cmF0aW9uLTMwMFxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxMaW5rZWRpbiBjbGFzc05hbWU9XFxcInctNSBoLTVcXFwiIC8+XFxuICAgICAgICAgICAgICAgICAgICAgIDwvbW90aW9uLmE+XFxuICAgICAgICAgICAgICAgICAgICApfVxcbiAgICAgICAgICAgICAgICAgICAge21lbWJlci5zb2NpYWwuZ2l0aHViICYmIChcXG4gICAgICAgICAgICAgICAgICAgICAgPG1vdGlvbi5hXFxuICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj17bWVtYmVyLnNvY2lhbC5naXRodWJ9XFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlSG92ZXI9e3sgc2NhbGU6IDEuMSwgeTogLTIgfX1cXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZVRhcD17eyBzY2FsZTogMC45NSB9fVxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cXFwidy0xMCBoLTEwIGJnLVt2YXIoLS1uZXV0cmFsLTEwMCldIHJvdW5kZWQtbGcgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgaG92ZXI6YmctW3ZhcigtLW5ldXRyYWwtODAwKV0gaG92ZXI6dGV4dC13aGl0ZSB0cmFuc2l0aW9uLWNvbG9ycyBkdXJhdGlvbi0zMDBcXFwiXFxuICAgICAgICAgICAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8R2l0aHViIGNsYXNzTmFtZT1cXFwidy01IGgtNVxcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgPC9tb3Rpb24uYT5cXG4gICAgICAgICAgICAgICAgICAgICl9XFxuICAgICAgICAgICAgICAgICAgICB7bWVtYmVyLnNvY2lhbC50d2l0dGVyICYmIChcXG4gICAgICAgICAgICAgICAgICAgICAgPG1vdGlvbi5hXFxuICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj17bWVtYmVyLnNvY2lhbC50d2l0dGVyfVxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD1cXFwiX2JsYW5rXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZUhvdmVyPXt7IHNjYWxlOiAxLjEsIHk6IC0yIH19XFxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGVUYXA9e3sgc2NhbGU6IDAuOTUgfX1cXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XFxcInctMTAgaC0xMCBiZy1bdmFyKC0tbmV1dHJhbC0xMDApXSByb3VuZGVkLWxnIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIGhvdmVyOmJnLWJsdWUtNTAwIGhvdmVyOnRleHQtd2hpdGUgdHJhbnNpdGlvbi1jb2xvcnMgZHVyYXRpb24tMzAwXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPFR3aXR0ZXIgY2xhc3NOYW1lPVxcXCJ3LTUgaC01XFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICA8L21vdGlvbi5hPlxcbiAgICAgICAgICAgICAgICAgICAgKX1cXG4gICAgICAgICAgICAgICAgICAgIHttZW1iZXIuc29jaWFsLmVtYWlsICYmIChcXG4gICAgICAgICAgICAgICAgICAgICAgPG1vdGlvbi5hXFxuICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj17YG1haWx0bzoke21lbWJlci5zb2NpYWwuZW1haWx9YH1cXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZUhvdmVyPXt7IHNjYWxlOiAxLjEsIHk6IC0yIH19XFxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGVUYXA9e3sgc2NhbGU6IDAuOTUgfX1cXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XFxcInctMTAgaC0xMCBiZy1bdmFyKC0tbmV1dHJhbC0xMDApXSByb3VuZGVkLWxnIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIGhvdmVyOmJnLVt2YXIoLS1zZWNvbmRhcnkpXSBob3Zlcjp0ZXh0LXdoaXRlIHRyYW5zaXRpb24tY29sb3JzIGR1cmF0aW9uLTMwMFxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxNYWlsIGNsYXNzTmFtZT1cXFwidy01IGgtNVxcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgPC9tb3Rpb24uYT5cXG4gICAgICAgICAgICAgICAgICAgICl9XFxuICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgICAgICAgICB7LyogRGVjb3JhdGl2ZSBFbGVtZW50cyAqL31cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcImFic29sdXRlIHRvcC00IHJpZ2h0LTQgdy04IGgtOCByb3VuZGVkLWZ1bGwgb3BhY2l0eS0xMCBncm91cC1ob3ZlcjpvcGFjaXR5LTIwIHRyYW5zaXRpb24tb3BhY2l0eSBkdXJhdGlvbi01MDAgYmctW3ZhcigtLXByaW1hcnkpXVxcXCIgLz5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcImFic29sdXRlIGJvdHRvbS00IGxlZnQtNCB3LTYgaC02IHJvdW5kZWQtZnVsbCBvcGFjaXR5LTEwIGdyb3VwLWhvdmVyOm9wYWNpdHktMjAgdHJhbnNpdGlvbi1vcGFjaXR5IGR1cmF0aW9uLTUwMCBiZy1bdmFyKC0tc2Vjb25kYXJ5KV1cXFwiIC8+XFxuICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L21vdGlvbi5kaXY+XFxuICAgICAgICAgICkpfVxcbiAgICAgICAgPC9tb3Rpb24uZGl2PlxcblxcbiAgICAgICAgey8qIEpvaW4gT3VyIFRlYW0gQ1RBICovfVxcbiAgICAgICAgPG1vdGlvbi5kaXZcXG4gICAgICAgICAgaW5pdGlhbD17eyBvcGFjaXR5OiAwLCB5OiAzMCB9fVxcbiAgICAgICAgICB3aGlsZUluVmlldz17eyBvcGFjaXR5OiAxLCB5OiAwIH19XFxuICAgICAgICAgIHZpZXdwb3J0PXt7IG9uY2U6IHRydWUgfX1cXG4gICAgICAgICAgdHJhbnNpdGlvbj17eyBkdXJhdGlvbjogMC44LCBkZWxheTogMC4zIH19XFxuICAgICAgICAgIGNsYXNzTmFtZT1cXFwidGV4dC1jZW50ZXJcXFwiXFxuICAgICAgICA+XFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJiZy1ncmFkaWVudC10by1iciBmcm9tLVt2YXIoLS1wcmltYXJ5KV0vNSB0by1bdmFyKC0tc2Vjb25kYXJ5KV0vNSByb3VuZGVkLTN4bCBwLTggbGc6cC0xMiBib3JkZXIgYm9yZGVyLVt2YXIoLS1uZXV0cmFsLTIwMCldXFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwidGV4dC00eGwgbWItNlxcXCI+XFx1ZDgzZFxcdWRlODA8L2Rpdj5cXG4gICAgICAgICAgICA8aDMgY2xhc3NOYW1lPVxcXCJ0ZXh0LTJ4bCBsZzp0ZXh0LTN4bCBmb250LWJvbGQgdGV4dC1bdmFyKC0tbmV1dHJhbC05MDApXSBtYi00XFxcIj5cXG4gICAgICAgICAgICAgIFdhbnQgdG8gSm9pbiBPdXIgVGVhbT9cXG4gICAgICAgICAgICA8L2gzPlxcbiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cXFwidGV4dC1sZyB0ZXh0LVt2YXIoLS1uZXV0cmFsLTYwMCldIG1iLTYgbWF4LXctMnhsIG14LWF1dG9cXFwiPlxcbiAgICAgICAgICAgICAgV2UncmUgYWx3YXlzIGxvb2tpbmcgZm9yIHRhbGVudGVkIGluZGl2aWR1YWxzIHdobyBzaGFyZSBvdXIgcGFzc2lvbiBmb3IgY3JlYXRpbmcgXFxuICAgICAgICAgICAgICBleGNlcHRpb25hbCBkaWdpdGFsIGV4cGVyaWVuY2VzLiBMZXQncyBidWlsZCB0aGUgZnV0dXJlIHRvZ2V0aGVyLlxcbiAgICAgICAgICAgIDwvcD5cXG4gICAgICAgICAgICA8bW90aW9uLmFcXG4gICAgICAgICAgICAgIGhyZWY9XFxcIm1haWx0bzpjYXJlZXJzQGFyYWJpdGVzLmNvbVxcXCJcXG4gICAgICAgICAgICAgIHdoaWxlSG92ZXI9e3sgc2NhbGU6IDEuMDUgfX1cXG4gICAgICAgICAgICAgIHdoaWxlVGFwPXt7IHNjYWxlOiAwLjk1IH19XFxuICAgICAgICAgICAgICBjbGFzc05hbWU9XFxcImlubGluZS1mbGV4IGl0ZW1zLWNlbnRlciBiZy1bdmFyKC0tcHJpbWFyeSldIHRleHQtd2hpdGUgcHgtOCBweS00IHJvdW5kZWQteGwgZm9udC1zZW1pYm9sZCBob3ZlcjpiZy1bdmFyKC0tcHJpbWFyeS1kYXJrKV0gdHJhbnNpdGlvbi1jb2xvcnMgZHVyYXRpb24tMzAwIHNoYWRvdy1sZyBob3ZlcjpzaGFkb3cteGxcXFwiXFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgPE1haWwgY2xhc3NOYW1lPVxcXCJtci0yIGgtNSB3LTVcXFwiIC8+XFxuICAgICAgICAgICAgICBHZXQgSW4gVG91Y2hcXG4gICAgICAgICAgICA8L21vdGlvbi5hPlxcbiAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvbW90aW9uLmRpdj5cXG4gICAgICA8L2Rpdj5cXG4gICAgPC9zZWN0aW9uPlxcbiAgKTtcXG59XCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiRmlsZSBzYXZlZC4gIFNhdmVkIGZpbGUge3NyYy9jb21wb25lbnRzL3NlY3Rpb25zL2Fib3V0L1N0YXRzLnRzeH0iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1XzAxTG9vdEdoSzF0bjNueVpUMjFITHJSdCJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkM6L1VzZXJzL2RhdGFtL0Rlc2t0b3AvYXJhYml0ZXMiLCJmb2xkZXJSb290IjoiQzovVXNlcnMvZGF0YW0vRGVza3RvcC9hcmFiaXRlcyJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMjdUMjE6MzQ6NDYuODYwWiIsInJlc3BvbnNlX3RleHQiOiIiLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiZGY4NDk2NzItNjYwOS00NTNmLTk4MmYtMjg0YmNkNjFlOTc2IiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV8wMUhiWWRYeTNKODFhU2MxZVlIMlRhQXkiLCJ0b29sX25hbWUiOiJzYXZlLWZpbGUiLCJpbnB1dF9qc29uIjoie1wiaW5zdHJ1Y3Rpb25zX3JlbWluZGVyXCI6IFwiTElNSVQgVEhFIEZJTEUgQ09OVEVOVCBUTyBBVCBNT1NUIDMwMCBMSU5FUy4gSUYgTU9SRSBDT05URU5UIE5FRURTIFRPIEJFIEFEREVEIFVTRSBUSEUgc3RyLXJlcGxhY2UtZWRpdG9yIFRPT0wgVE8gRURJVCBUSEUgRklMRSBBRlRFUiBJVCBIQVMgQkVFTiBDUkVBVEVELlwiLCBcInBhdGhcIjogXCJzcmMvY29tcG9uZW50cy9zZWN0aW9ucy9hYm91dC9XaHlXb3JrV2l0aFVzLnRzeFwiLCBcImZpbGVfY29udGVudFwiOiBcIlxcXCJ1c2UgY2xpZW50XFxcIjtcXG5cXG5pbXBvcnQgeyBtb3Rpb24gfSBmcm9tIFxcXCJmcmFtZXItbW90aW9uXFxcIjtcXG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tIFxcXCJAL2NvbXBvbmVudHMvdWkvQnV0dG9uXFxcIjtcXG5pbXBvcnQgeyBTdGFyLCBNZXNzYWdlQ2lyY2xlLCBBcnJvd1JpZ2h0LCBDaGVja0NpcmNsZSwgQ2xvY2ssIFNoaWVsZCwgWmFwIH0gZnJvbSBcXFwibHVjaWRlLXJlYWN0XFxcIjtcXG5cXG5jb25zdCBiZW5lZml0cyA9IFtcXG4gIHtcXG4gICAgaWNvbjogQ2hlY2tDaXJjbGUsXFxuICAgIHRpdGxlOiBcXFwiUHJvdmVuIFRyYWNrIFJlY29yZFxcXCIsXFxuICAgIGRlc2NyaXB0aW9uOiBcXFwiMTAwJSBwcm9qZWN0IHN1Y2Nlc3MgcmF0ZSB3aXRoIGNsaWVudHMgYWNyb3NzIER1YmFpJ3MgbW9zdCBjb21wZXRpdGl2ZSBpbmR1c3RyaWVzXFxcIlxcbiAgfSxcXG4gIHtcXG4gICAgaWNvbjogQ2xvY2ssXFxuICAgIHRpdGxlOiBcXFwiT24tVGltZSBEZWxpdmVyeVxcXCIsXFxuICAgIGRlc2NyaXB0aW9uOiBcXFwiV2UgcmVzcGVjdCB5b3VyIHRpbWVsaW5lIGFuZCBjb25zaXN0ZW50bHkgZGVsaXZlciBwcm9qZWN0cyB3aGVuIHByb21pc2VkXFxcIlxcbiAgfSxcXG4gIHtcXG4gICAgaWNvbjogU2hpZWxkLFxcbiAgICB0aXRsZTogXFxcIlRyYW5zcGFyZW50IFByb2Nlc3NcXFwiLFxcbiAgICBkZXNjcmlwdGlvbjogXFxcIkNsZWFyIGNvbW11bmljYXRpb24sIHJlZ3VsYXIgdXBkYXRlcywgYW5kIG5vIGhpZGRlbiBzdXJwcmlzZXNcXFwiXFxuICB9LFxcbiAge1xcbiAgICBpY29uOiBaYXAsXFxuICAgIHRpdGxlOiBcXFwiRnV0dXJlLVJlYWR5IFNvbHV0aW9uc1xcXCIsXFxuICAgIGRlc2NyaXB0aW9uOiBcXFwiQnVpbHQgd2l0aCBzY2FsYWJpbGl0eSBhbmQgZW1lcmdpbmcgdGVjaG5vbG9naWVzIGluIG1pbmRcXFwiXFxuICB9XFxuXTtcXG5cXG5jb25zdCB0ZXN0aW1vbmlhbHMgPSBbXFxuICB7XFxuICAgIHF1b3RlOiBcXFwiQXJhYml0ZXMgdHJhbnNmb3JtZWQgb3VyIHJlYWwgZXN0YXRlIHBsYXRmb3JtIGJleW9uZCBvdXIgZXhwZWN0YXRpb25zLiBUaGVpciBhdHRlbnRpb24gdG8gZGV0YWlsIGFuZCB1bmRlcnN0YW5kaW5nIG9mIHRoZSBEdWJhaSBtYXJrZXQgaXMgZXhjZXB0aW9uYWwuXFxcIixcXG4gICAgYXV0aG9yOiBcXFwiS2hhbGlkIEFsLU1hbnNvdXJpXFxcIixcXG4gICAgcm9sZTogXFxcIkNFTywgRHViYWkgUHJvcGVydGllcyBHcm91cFxcXCIsXFxuICAgIHJhdGluZzogNSxcXG4gICAgZ3JhZGllbnQ6IFxcXCJmcm9tLWJsdWUtNTAwIHRvLXB1cnBsZS02MDBcXFwiXFxuICB9LFxcbiAge1xcbiAgICBxdW90ZTogXFxcIlRoZSB0ZWFtJ3MgZXhwZXJ0aXNlIGluIGUtY29tbWVyY2Ugc29sdXRpb25zIGhlbHBlZCB1cyBpbmNyZWFzZSBvdXIgb25saW5lIHNhbGVzIGJ5IDMwMCUgd2l0aGluIHRoZSBmaXJzdCBxdWFydGVyLiBPdXRzdGFuZGluZyB3b3JrIVxcXCIsXFxuICAgIGF1dGhvcjogXFxcIkZhdGltYSBBbC1aYWhyYVxcXCIsXFxuICAgIHJvbGU6IFxcXCJGb3VuZGVyLCBMdXh1cnkgQm91dGlxdWUgRHViYWlcXFwiLFxcbiAgICByYXRpbmc6IDUsXFxuICAgIGdyYWRpZW50OiBcXFwiZnJvbS1waW5rLTUwMCB0by1yb3NlLTYwMFxcXCJcXG4gIH0sXFxuICB7XFxuICAgIHF1b3RlOiBcXFwiUHJvZmVzc2lvbmFsLCByZWxpYWJsZSwgYW5kIGlubm92YXRpdmUuIFRoZXkgZGVsaXZlcmVkIG91ciBmaW50ZWNoIHBsYXRmb3JtIG9uIHRpbWUgYW5kIGV4Y2VlZGVkIGFsbCBvdXIgdGVjaG5pY2FsIHJlcXVpcmVtZW50cy5cXFwiLFxcbiAgICBhdXRob3I6IFxcXCJKYW1lcyBSaWNoYXJkc29uXFxcIixcXG4gICAgcm9sZTogXFxcIkNUTywgRHViYWkgRmluYW5jaWFsIFNvbHV0aW9uc1xcXCIsXFxuICAgIHJhdGluZzogNSxcXG4gICAgZ3JhZGllbnQ6IFxcXCJmcm9tLWdyZWVuLTUwMCB0by10ZWFsLTYwMFxcXCJcXG4gIH1cXG5dO1xcblxcbmNvbnN0IGNvbnRhaW5lclZhcmlhbnRzID0ge1xcbiAgaGlkZGVuOiB7IG9wYWNpdHk6IDAgfSxcXG4gIHZpc2libGU6IHtcXG4gICAgb3BhY2l0eTogMSxcXG4gICAgdHJhbnNpdGlvbjoge1xcbiAgICAgIHN0YWdnZXJDaGlsZHJlbjogMC4yXFxuICAgIH1cXG4gIH1cXG59O1xcblxcbmNvbnN0IGl0ZW1WYXJpYW50cyA9IHtcXG4gIGhpZGRlbjogeyBvcGFjaXR5OiAwLCB5OiAzMCB9LFxcbiAgdmlzaWJsZToge1xcbiAgICBvcGFjaXR5OiAxLFxcbiAgICB5OiAwLFxcbiAgICB0cmFuc2l0aW9uOiB7XFxuICAgICAgZHVyYXRpb246IDAuNixcXG4gICAgICBlYXNlOiBcXFwiZWFzZU91dFxcXCJcXG4gICAgfVxcbiAgfVxcbn07XFxuXFxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gV2h5V29ya1dpdGhVcygpIHtcXG4gIHJldHVybiAoXFxuICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cXFwicHktMjAgbGc6cHktMzIgYmctd2hpdGUgcmVsYXRpdmUgb3ZlcmZsb3ctaGlkZGVuXFxcIj5cXG4gICAgICB7LyogQmFja2dyb3VuZCBQYXR0ZXJuICovfVxcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJhYnNvbHV0ZSBpbnNldC0wIG9wYWNpdHktNVxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwiYWJzb2x1dGUgaW5zZXQtMFxcXCIgc3R5bGU9e3tcXG4gICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgcmFkaWFsLWdyYWRpZW50KGNpcmNsZSBhdCAzMCUgNzAlLCB2YXIoLS1wcmltYXJ5KSAycHgsIHRyYW5zcGFyZW50IDJweCksXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFkaWFsLWdyYWRpZW50KGNpcmNsZSBhdCA3MCUgMzAlLCB2YXIoLS1zZWNvbmRhcnkpIDJweCwgdHJhbnNwYXJlbnQgMnB4KWAsXFxuICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnODBweCA4MHB4J1xcbiAgICAgICAgfX0gLz5cXG4gICAgICA8L2Rpdj5cXG5cXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwiY29udGFpbmVyIG14LWF1dG8gcHgtNCBzbTpweC02IGxnOnB4LTggcmVsYXRpdmUgei0xMFxcXCI+XFxuICAgICAgICB7LyogU2VjdGlvbiBIZWFkZXIgKi99XFxuICAgICAgICA8bW90aW9uLmRpdlxcbiAgICAgICAgICBpbml0aWFsPXt7IG9wYWNpdHk6IDAsIHk6IDMwIH19XFxuICAgICAgICAgIHdoaWxlSW5WaWV3PXt7IG9wYWNpdHk6IDEsIHk6IDAgfX1cXG4gICAgICAgICAgdmlld3BvcnQ9e3sgb25jZTogdHJ1ZSB9fVxcbiAgICAgICAgICB0cmFuc2l0aW9uPXt7IGR1cmF0aW9uOiAwLjggfX1cXG4gICAgICAgICAgY2xhc3NOYW1lPVxcXCJ0ZXh0LWNlbnRlciBtYi0xNlxcXCJcXG4gICAgICAgID5cXG4gICAgICAgICAgPGgyIGNsYXNzTmFtZT1cXFwidGV4dC0zeGwgc206dGV4dC00eGwgbGc6dGV4dC01eGwgZm9udC1ib2xkIHRleHQtW3ZhcigtLW5ldXRyYWwtOTAwKV0gbWItNlxcXCI+XFxuICAgICAgICAgICAgV2h5IENob29zZVxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cXFwiYmxvY2sgYmctZ3JhZGllbnQtdG8tciBmcm9tLVt2YXIoLS1wcmltYXJ5KV0gdG8tW3ZhcigtLXNlY29uZGFyeSldIGJnLWNsaXAtdGV4dCB0ZXh0LXRyYW5zcGFyZW50XFxcIj5cXG4gICAgICAgICAgICAgIEFyYWJpdGVzP1xcbiAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgPC9oMj5cXG4gICAgICAgICAgPHAgY2xhc3NOYW1lPVxcXCJ0ZXh0LWxnIHNtOnRleHQteGwgdGV4dC1bdmFyKC0tbmV1dHJhbC02MDApXSBtYXgtdy0zeGwgbXgtYXV0byBsZWFkaW5nLXJlbGF4ZWRcXFwiPlxcbiAgICAgICAgICAgIEJleW9uZCB0ZWNobmljYWwgZXhwZXJ0aXNlLCB3ZSBicmluZyBhIGRlZXAgdW5kZXJzdGFuZGluZyBvZiBEdWJhaSdzIGJ1c2luZXNzIGxhbmRzY2FwZSBcXG4gICAgICAgICAgICBhbmQgYSBjb21taXRtZW50IHRvIHlvdXIgc3VjY2VzcyB0aGF0IGdvZXMgZmFyIGJleW9uZCBwcm9qZWN0IGRlbGl2ZXJ5LlxcbiAgICAgICAgICA8L3A+XFxuICAgICAgICA8L21vdGlvbi5kaXY+XFxuXFxuICAgICAgICB7LyogQmVuZWZpdHMgR3JpZCAqL31cXG4gICAgICAgIDxtb3Rpb24uZGl2XFxuICAgICAgICAgIHZhcmlhbnRzPXtjb250YWluZXJWYXJpYW50c31cXG4gICAgICAgICAgaW5pdGlhbD1cXFwiaGlkZGVuXFxcIlxcbiAgICAgICAgICB3aGlsZUluVmlldz1cXFwidmlzaWJsZVxcXCJcXG4gICAgICAgICAgdmlld3BvcnQ9e3sgb25jZTogdHJ1ZSB9fVxcbiAgICAgICAgICBjbGFzc05hbWU9XFxcImdyaWQgZ3JpZC1jb2xzLTEgbWQ6Z3JpZC1jb2xzLTIgbGc6Z3JpZC1jb2xzLTQgZ2FwLTggbWItMjBcXFwiXFxuICAgICAgICA+XFxuICAgICAgICAgIHtiZW5lZml0cy5tYXAoKGJlbmVmaXQsIGluZGV4KSA9PiB7XFxuICAgICAgICAgICAgY29uc3QgSWNvbiA9IGJlbmVmaXQuaWNvbjtcXG4gICAgICAgICAgICByZXR1cm4gKFxcbiAgICAgICAgICAgICAgPG1vdGlvbi5kaXZcXG4gICAgICAgICAgICAgICAga2V5PXtiZW5lZml0LnRpdGxlfVxcbiAgICAgICAgICAgICAgICB2YXJpYW50cz17aXRlbVZhcmlhbnRzfVxcbiAgICAgICAgICAgICAgICB3aGlsZUhvdmVyPXt7IFxcbiAgICAgICAgICAgICAgICAgIHk6IC01LFxcbiAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IHsgZHVyYXRpb246IDAuMyB9XFxuICAgICAgICAgICAgICAgIH19XFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cXFwiZ3JvdXAgdGV4dC1jZW50ZXJcXFwiXFxuICAgICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJiZy13aGl0ZSByb3VuZGVkLTJ4bCBwLTYgc2hhZG93LWxnIGhvdmVyOnNoYWRvdy14bCB0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi0zMDAgYm9yZGVyIGJvcmRlci1bdmFyKC0tbmV1dHJhbC0yMDApXSBob3Zlcjpib3JkZXItW3ZhcigtLXByaW1hcnkpXS8yMCBoLWZ1bGxcXFwiPlxcbiAgICAgICAgICAgICAgICAgIHsvKiBJY29uICovfVxcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJ3LTE2IGgtMTYgYmctW3ZhcigtLXByaW1hcnkpXS8xMCByb3VuZGVkLXhsIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIG1iLTQgbXgtYXV0byBncm91cC1ob3ZlcjpzY2FsZS0xMTAgdHJhbnNpdGlvbi10cmFuc2Zvcm0gZHVyYXRpb24tMzAwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxJY29uIGNsYXNzTmFtZT1cXFwidy04IGgtOCB0ZXh0LVt2YXIoLS1wcmltYXJ5KV1cXFwiIC8+XFxuICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuXFxuICAgICAgICAgICAgICAgICAgey8qIENvbnRlbnQgKi99XFxuICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cXFwidGV4dC1sZyBmb250LWJvbGQgdGV4dC1bdmFyKC0tbmV1dHJhbC05MDApXSBtYi0zIGdyb3VwLWhvdmVyOnRleHQtW3ZhcigtLXByaW1hcnkpXSB0cmFuc2l0aW9uLWNvbG9ycyBkdXJhdGlvbi0zMDBcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAge2JlbmVmaXQudGl0bGV9XFxuICAgICAgICAgICAgICAgICAgPC9oMz5cXG4gICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XFxcInRleHQtW3ZhcigtLW5ldXRyYWwtNjAwKV0gbGVhZGluZy1yZWxheGVkXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIHtiZW5lZml0LmRlc2NyaXB0aW9ufVxcbiAgICAgICAgICAgICAgICAgIDwvcD5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICA8L21vdGlvbi5kaXY+XFxuICAgICAgICAgICAgKTtcXG4gICAgICAgICAgfSl9XFxuICAgICAgICA8L21vdGlvbi5kaXY+XFxuXFxuICAgICAgICB7LyogVGVzdGltb25pYWxzICovfVxcbiAgICAgICAgPG1vdGlvbi5kaXZcXG4gICAgICAgICAgaW5pdGlhbD17eyBvcGFjaXR5OiAwLCB5OiAzMCB9fVxcbiAgICAgICAgICB3aGlsZUluVmlldz17eyBvcGFjaXR5OiAxLCB5OiAwIH19XFxuICAgICAgICAgIHZpZXdwb3J0PXt7IG9uY2U6IHRydWUgfX1cXG4gICAgICAgICAgdHJhbnNpdGlvbj17eyBkdXJhdGlvbjogMC44IH19XFxuICAgICAgICAgIGNsYXNzTmFtZT1cXFwibWItMTZcXFwiXFxuICAgICAgICA+XFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJ0ZXh0LWNlbnRlciBtYi0xMlxcXCI+XFxuICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cXFwidGV4dC0yeGwgbGc6dGV4dC0zeGwgZm9udC1ib2xkIHRleHQtW3ZhcigtLW5ldXRyYWwtOTAwKV0gbWItNFxcXCI+XFxuICAgICAgICAgICAgICBXaGF0IE91ciBDbGllbnRzIFNheVxcbiAgICAgICAgICAgIDwvaDM+XFxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVxcXCJ0ZXh0LWxnIHRleHQtW3ZhcigtLW5ldXRyYWwtNjAwKV0gbWF4LXctMnhsIG14LWF1dG9cXFwiPlxcbiAgICAgICAgICAgICAgRG9uJ3QganVzdCB0YWtlIG91ciB3b3JkIGZvciBpdFxcdTIwMTRoZWFyIGZyb20gdGhlIGJ1c2luZXNzZXMgd2UndmUgaGVscGVkIHRyYW5zZm9ybS5cXG4gICAgICAgICAgICA8L3A+XFxuICAgICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwiZ3JpZCBncmlkLWNvbHMtMSBsZzpncmlkLWNvbHMtMyBnYXAtOFxcXCI+XFxuICAgICAgICAgICAge3Rlc3RpbW9uaWFscy5tYXAoKHRlc3RpbW9uaWFsLCBpbmRleCkgPT4gKFxcbiAgICAgICAgICAgICAgPG1vdGlvbi5kaXZcXG4gICAgICAgICAgICAgICAga2V5PXt0ZXN0aW1vbmlhbC5hdXRob3J9XFxuICAgICAgICAgICAgICAgIGluaXRpYWw9e3sgb3BhY2l0eTogMCwgeTogMzAgfX1cXG4gICAgICAgICAgICAgICAgd2hpbGVJblZpZXc9e3sgb3BhY2l0eTogMSwgeTogMCB9fVxcbiAgICAgICAgICAgICAgICB2aWV3cG9ydD17eyBvbmNlOiB0cnVlIH19XFxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb249e3sgZHVyYXRpb246IDAuNiwgZGVsYXk6IGluZGV4ICogMC4xIH19XFxuICAgICAgICAgICAgICAgIHdoaWxlSG92ZXI9e3sgXFxuICAgICAgICAgICAgICAgICAgeTogLTUsXFxuICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogeyBkdXJhdGlvbjogMC4zIH1cXG4gICAgICAgICAgICAgICAgfX1cXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVxcXCJncm91cFxcXCJcXG4gICAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcImJnLXdoaXRlIHJvdW5kZWQtM3hsIHAtOCBzaGFkb3ctbGcgaG92ZXI6c2hhZG93LXhsIHRyYW5zaXRpb24tYWxsIGR1cmF0aW9uLTMwMCBib3JkZXIgYm9yZGVyLVt2YXIoLS1uZXV0cmFsLTIwMCldIGhvdmVyOmJvcmRlci1bdmFyKC0tcHJpbWFyeSldLzIwIGgtZnVsbCByZWxhdGl2ZSBvdmVyZmxvdy1oaWRkZW5cXFwiPlxcbiAgICAgICAgICAgICAgICAgIHsvKiBCYWNrZ3JvdW5kIEdyYWRpZW50IG9uIEhvdmVyICovfVxcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgYWJzb2x1dGUgaW5zZXQtMCBiZy1ncmFkaWVudC10by1iciAke3Rlc3RpbW9uaWFsLmdyYWRpZW50fSBvcGFjaXR5LTAgZ3JvdXAtaG92ZXI6b3BhY2l0eS01IHRyYW5zaXRpb24tb3BhY2l0eSBkdXJhdGlvbi01MDBgfSAvPlxcbiAgICAgICAgICAgICAgICAgIFxcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJyZWxhdGl2ZSB6LTEwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIHsvKiBTdGFycyAqL31cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJmbGV4IGp1c3RpZnktY2VudGVyIG1iLTRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICB7Wy4uLkFycmF5KHRlc3RpbW9uaWFsLnJhdGluZyldLm1hcCgoXywgaSkgPT4gKFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxTdGFyIGtleT17aX0gY2xhc3NOYW1lPVxcXCJ3LTUgaC01IHRleHQtW3ZhcigtLXNlY29uZGFyeSldIGZpbGwtY3VycmVudFxcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgKSl9XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgICAgICAgICAgICAgIHsvKiBRdW90ZSAqL31cXG4gICAgICAgICAgICAgICAgICAgIDxibG9ja3F1b3RlIGNsYXNzTmFtZT1cXFwidGV4dC1bdmFyKC0tbmV1dHJhbC03MDApXSBsZWFkaW5nLXJlbGF4ZWQgbWItNiB0ZXh0LWNlbnRlciBpdGFsaWNcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICBcXFwie3Rlc3RpbW9uaWFsLnF1b3RlfVxcXCJcXG4gICAgICAgICAgICAgICAgICAgIDwvYmxvY2txdW90ZT5cXG5cXG4gICAgICAgICAgICAgICAgICAgIHsvKiBBdXRob3IgKi99XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwidGV4dC1jZW50ZXJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YHctMTIgaC0xMiBteC1hdXRvIG1iLTMgcm91bmRlZC1mdWxsIGJnLWdyYWRpZW50LXRvLWJyICR7dGVzdGltb25pYWwuZ3JhZGllbnR9IGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHRleHQtd2hpdGUgZm9udC1ib2xkYH0+XFxuICAgICAgICAgICAgICAgICAgICAgICAge3Rlc3RpbW9uaWFsLmF1dGhvci5zcGxpdCgnICcpLm1hcChuID0+IG5bMF0pLmpvaW4oJycpfVxcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVxcXCJmb250LXNlbWlib2xkIHRleHQtW3ZhcigtLW5ldXRyYWwtOTAwKV1cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIHt0ZXN0aW1vbmlhbC5hdXRob3J9XFxuICAgICAgICAgICAgICAgICAgICAgIDwvcD5cXG4gICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVxcXCJ0ZXh0LXNtIHRleHQtW3ZhcigtLW5ldXRyYWwtNjAwKV1cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIHt0ZXN0aW1vbmlhbC5yb2xlfVxcbiAgICAgICAgICAgICAgICAgICAgICA8L3A+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICA8L21vdGlvbi5kaXY+XFxuICAgICAgICAgICAgKSl9XFxuICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9tb3Rpb24uZGl2PlxcblxcbiAgICAgICAgey8qIEZpbmFsIENUQSAqL31cXG4gICAgICAgIDxtb3Rpb24uZGl2XFxuICAgICAgICAgIGluaXRpYWw9e3sgb3BhY2l0eTogMCwgeTogMzAgfX1cXG4gICAgICAgICAgd2hpbGVJblZpZXc9e3sgb3BhY2l0eTogMSwgeTogMCB9fVxcbiAgICAgICAgICB2aWV3cG9ydD17eyBvbmNlOiB0cnVlIH19XFxuICAgICAgICAgIHRyYW5zaXRpb249e3sgZHVyYXRpb246IDAuOCB9fVxcbiAgICAgICAgICBjbGFzc05hbWU9XFxcInRleHQtY2VudGVyXFxcIlxcbiAgICAgICAgPlxcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwiYmctZ3JhZGllbnQtdG8tYnIgZnJvbS1bdmFyKC0tcHJpbWFyeSldIHZpYS1bdmFyKC0tYWNjZW50KV0gdG8tW3ZhcigtLXNlY29uZGFyeSldIHJvdW5kZWQtM3hsIHAtMTIgbGc6cC0xNiB0ZXh0LXdoaXRlIHJlbGF0aXZlIG92ZXJmbG93LWhpZGRlblxcXCI+XFxuICAgICAgICAgICAgey8qIEJhY2tncm91bmQgUGF0dGVybiAqL31cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwiYWJzb2x1dGUgaW5zZXQtMCBvcGFjaXR5LTEwXFxcIj5cXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJhYnNvbHV0ZSBpbnNldC0wXFxcIiBzdHlsZT17e1xcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGByYWRpYWwtZ3JhZGllbnQoY2lyY2xlIGF0IDIwJSA4MCUsIHdoaXRlIDJweCwgdHJhbnNwYXJlbnQgMnB4KSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWRpYWwtZ3JhZGllbnQoY2lyY2xlIGF0IDgwJSAyMCUsIHdoaXRlIDJweCwgdHJhbnNwYXJlbnQgMnB4KWAsXFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnNjBweCA2MHB4J1xcbiAgICAgICAgICAgICAgfX0gLz5cXG4gICAgICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwicmVsYXRpdmUgei0xMFxcXCI+XFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwidGV4dC01eGwgbWItNlxcXCI+XFx1ZDgzZFxcdWRlODA8L2Rpdj5cXG4gICAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9XFxcInRleHQtM3hsIGxnOnRleHQtNHhsIGZvbnQtYm9sZCBtYi02XFxcIj5cXG4gICAgICAgICAgICAgICAgUmVhZHkgdG8gVHJhbnNmb3JtIFlvdXIgRGlnaXRhbCBQcmVzZW5jZT9cXG4gICAgICAgICAgICAgIDwvaDM+XFxuICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XFxcInRleHQteGwgbWItOCBtYXgtdy0zeGwgbXgtYXV0byBvcGFjaXR5LTkwXFxcIj5cXG4gICAgICAgICAgICAgICAgSm9pbiB0aGUgZ3Jvd2luZyBsaXN0IG9mIHN1Y2Nlc3NmdWwgRHViYWkgYnVzaW5lc3NlcyB0aGF0IHRydXN0IEFyYWJpdGVzIFxcbiAgICAgICAgICAgICAgICB0byBicmluZyB0aGVpciBkaWdpdGFsIHZpc2lvbnMgdG8gbGlmZS5cXG4gICAgICAgICAgICAgIDwvcD5cXG5cXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJmbGV4IGZsZXgtY29sIHNtOmZsZXgtcm93IGdhcC00IGp1c3RpZnktY2VudGVyIGl0ZW1zLWNlbnRlclxcXCI+XFxuICAgICAgICAgICAgICAgIDxCdXR0b25cXG4gICAgICAgICAgICAgICAgICBzaXplPVxcXCJsZ1xcXCJcXG4gICAgICAgICAgICAgICAgICBocmVmPVxcXCJodHRwczovL3dhLm1lLzk3MTUwMTIzNDU2Nz90ZXh0PUhpJTIwQXJhYml0ZXMhJTIwSSdtJTIwaW50ZXJlc3RlZCUyMGluJTIwZGlzY3Vzc2luZyUyMGElMjBwcm9qZWN0LlxcXCJcXG4gICAgICAgICAgICAgICAgICBleHRlcm5hbFxcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cXFwiZ3JvdXAgYmctd2hpdGUgdGV4dC1bdmFyKC0tcHJpbWFyeSldIGhvdmVyOmJnLVt2YXIoLS1uZXV0cmFsLTEwMCldIHNoYWRvdy14bCBob3ZlcjpzaGFkb3ctMnhsXFxcIlxcbiAgICAgICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgICAgPE1lc3NhZ2VDaXJjbGUgY2xhc3NOYW1lPVxcXCJtci0yIGgtNSB3LTVcXFwiIC8+XFxuICAgICAgICAgICAgICAgICAgU3RhcnQgWW91ciBQcm9qZWN0XFxuICAgICAgICAgICAgICAgICAgPEFycm93UmlnaHQgY2xhc3NOYW1lPVxcXCJtbC0yIGgtNSB3LTUgdHJhbnNpdGlvbi10cmFuc2Zvcm0gZ3JvdXAtaG92ZXI6dHJhbnNsYXRlLXgtMVxcXCIgLz5cXG4gICAgICAgICAgICAgICAgPC9CdXR0b24+XFxuICAgICAgICAgICAgICAgIFxcbiAgICAgICAgICAgICAgICA8QnV0dG9uXFxuICAgICAgICAgICAgICAgICAgc2l6ZT1cXFwibGdcXFwiXFxuICAgICAgICAgICAgICAgICAgaHJlZj1cXFwiLyNjb250YWN0XFxcIlxcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cXFwiZ3JvdXAgYmctdHJhbnNwYXJlbnQgYm9yZGVyLTIgYm9yZGVyLXdoaXRlIHRleHQtd2hpdGUgaG92ZXI6Ymctd2hpdGUgaG92ZXI6dGV4dC1bdmFyKC0tcHJpbWFyeSldXFxcIlxcbiAgICAgICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgICAgQm9vayBGcmVlIENvbnN1bHRhdGlvblxcbiAgICAgICAgICAgICAgICAgIDxBcnJvd1JpZ2h0IGNsYXNzTmFtZT1cXFwibWwtMiBoLTUgdy01IHRyYW5zaXRpb24tdHJhbnNmb3JtIGdyb3VwLWhvdmVyOnRyYW5zbGF0ZS14LTFcXFwiIC8+XFxuICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxcbiAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9tb3Rpb24uZGl2PlxcbiAgICAgIDwvZGl2PlxcbiAgICA8L3NlY3Rpb24+XFxuICApO1xcbn1cIn0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiIifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJGaWxlIHNhdmVkLiAgU2F2ZWQgZmlsZSB7c3JjL2NvbXBvbmVudHMvc2VjdGlvbnMvYWJvdXQvVGVhbS50c3h9IiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMVVGQWtqZnlFN1pneVBhRmprR1BlZjYifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJDOi9Vc2Vycy9kYXRhbS9EZXNrdG9wL2FyYWJpdGVzIiwiZm9sZGVyUm9vdCI6IkM6L1VzZXJzL2RhdGFtL0Rlc2t0b3AvYXJhYml0ZXMifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTI3VDIxOjM1OjM0LjU1OVoiLCJyZXNwb25zZV90ZXh0IjoiIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImQ3ZDkzMjUzLWY4NDEtNGJkMi04MDNlLTM3MzFhMTVhOTExMCIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDFGbm9DOG54dEZyQ2J4emh1b2lYVGpjIiwidG9vbF9uYW1lIjoic2F2ZS1maWxlIiwiaW5wdXRfanNvbiI6IntcImluc3RydWN0aW9uc19yZW1pbmRlclwiOiBcIkxJTUlUIFRIRSBGSUxFIENPTlRFTlQgVE8gQVQgTU9TVCAzMDAgTElORVMuIElGIE1PUkUgQ09OVEVOVCBORUVEUyBUTyBCRSBBRERFRCBVU0UgVEhFIHN0ci1yZXBsYWNlLWVkaXRvciBUT09MIFRPIEVESVQgVEhFIEZJTEUgQUZURVIgSVQgSEFTIEJFRU4gQ1JFQVRFRC5cIiwgXCJwYXRoXCI6IFwic3JjL2NvbXBvbmVudHMvdWkvTmF2aWdhdGlvbi50c3hcIiwgXCJmaWxlX2NvbnRlbnRcIjogXCJcXFwidXNlIGNsaWVudFxcXCI7XFxuXFxuaW1wb3J0IHsgbW90aW9uIH0gZnJvbSBcXFwiZnJhbWVyLW1vdGlvblxcXCI7XFxuaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gXFxcInJlYWN0XFxcIjtcXG5pbXBvcnQgeyBNZW51LCBYLCBBcnJvd1JpZ2h0IH0gZnJvbSBcXFwibHVjaWRlLXJlYWN0XFxcIjtcXG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tIFxcXCJAL2NvbXBvbmVudHMvdWkvQnV0dG9uXFxcIjtcXG5cXG5jb25zdCBuYXZMaW5rcyA9IFtcXG4gIHsgbmFtZTogXFxcIkhvbWVcXFwiLCBocmVmOiBcXFwiL1xcXCIgfSxcXG4gIHsgbmFtZTogXFxcIkFib3V0XFxcIiwgaHJlZjogXFxcIi9hYm91dFxcXCIgfSxcXG4gIHsgbmFtZTogXFxcIlNlcnZpY2VzXFxcIiwgaHJlZjogXFxcIi8jc2VydmljZXNcXFwiIH0sXFxuICB7IG5hbWU6IFxcXCJQb3J0Zm9saW9cXFwiLCBocmVmOiBcXFwiLyNwb3J0Zm9saW9cXFwiIH0sXFxuICB7IG5hbWU6IFxcXCJDb250YWN0XFxcIiwgaHJlZjogXFxcIi8jY29udGFjdFxcXCIgfSxcXG5dO1xcblxcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE5hdmlnYXRpb24oKSB7XFxuICBjb25zdCBbaXNPcGVuLCBzZXRJc09wZW5dID0gdXNlU3RhdGUoZmFsc2UpO1xcbiAgY29uc3QgW3Njcm9sbGVkLCBzZXRTY3JvbGxlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XFxuXFxuICB1c2VFZmZlY3QoKCkgPT4ge1xcbiAgICBjb25zdCBoYW5kbGVTY3JvbGwgPSAoKSA9PiB7XFxuICAgICAgc2V0U2Nyb2xsZWQod2luZG93LnNjcm9sbFkgPiA1MCk7XFxuICAgIH07XFxuXFxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFxcXCJzY3JvbGxcXFwiLCBoYW5kbGVTY3JvbGwpO1xcbiAgICByZXR1cm4gKCkgPT4gd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXFxcInNjcm9sbFxcXCIsIGhhbmRsZVNjcm9sbCk7XFxuICB9LCBbXSk7XFxuXFxuICByZXR1cm4gKFxcbiAgICA8bW90aW9uLm5hdlxcbiAgICAgIGluaXRpYWw9e3sgeTogLTEwMCB9fVxcbiAgICAgIGFuaW1hdGU9e3sgeTogMCB9fVxcbiAgICAgIHRyYW5zaXRpb249e3sgZHVyYXRpb246IDAuNiB9fVxcbiAgICAgIGNsYXNzTmFtZT17YGZpeGVkIHRvcC0wIGxlZnQtMCByaWdodC0wIHotNTAgdHJhbnNpdGlvbi1hbGwgZHVyYXRpb24tMzAwICR7XFxuICAgICAgICBzY3JvbGxlZCBcXG4gICAgICAgICAgPyBcXFwiYmctd2hpdGUvOTUgYmFja2Ryb3AtYmx1ci1tZCBzaGFkb3ctbGcgYm9yZGVyLWIgYm9yZGVyLVt2YXIoLS1uZXV0cmFsLTIwMCldXFxcIiBcXG4gICAgICAgICAgOiBcXFwiYmctdHJhbnNwYXJlbnRcXFwiXFxuICAgICAgfWB9XFxuICAgID5cXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwiY29udGFpbmVyIG14LWF1dG8gcHgtNCBzbTpweC02IGxnOnB4LThcXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktYmV0d2VlbiBoLTE2IGxnOmgtMjBcXFwiPlxcbiAgICAgICAgICB7LyogTG9nbyAqL31cXG4gICAgICAgICAgPG1vdGlvbi5hXFxuICAgICAgICAgICAgaHJlZj1cXFwiL1xcXCJcXG4gICAgICAgICAgICB3aGlsZUhvdmVyPXt7IHNjYWxlOiAxLjA1IH19XFxuICAgICAgICAgICAgd2hpbGVUYXA9e3sgc2NhbGU6IDAuOTUgfX1cXG4gICAgICAgICAgICBjbGFzc05hbWU9XFxcImZsZXggaXRlbXMtY2VudGVyIHNwYWNlLXgtMlxcXCJcXG4gICAgICAgICAgPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJ3LTggaC04IGJnLWdyYWRpZW50LXRvLWJyIGZyb20tW3ZhcigtLXByaW1hcnkpXSB0by1bdmFyKC0tc2Vjb25kYXJ5KV0gcm91bmRlZC1sZyBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlclxcXCI+XFxuICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XFxcInRleHQtd2hpdGUgZm9udC1ib2xkIHRleHQtc21cXFwiPkE8L3NwYW4+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVxcXCJ0ZXh0LXhsIGZvbnQtYm9sZCBiZy1ncmFkaWVudC10by1yIGZyb20tW3ZhcigtLXByaW1hcnkpXSB0by1bdmFyKC0tc2Vjb25kYXJ5KV0gYmctY2xpcC10ZXh0IHRleHQtdHJhbnNwYXJlbnRcXFwiPlxcbiAgICAgICAgICAgICAgQXJhYml0ZXNcXG4gICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgIDwvbW90aW9uLmE+XFxuXFxuICAgICAgICAgIHsvKiBEZXNrdG9wIE5hdmlnYXRpb24gKi99XFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJoaWRkZW4gbGc6ZmxleCBpdGVtcy1jZW50ZXIgc3BhY2UteC04XFxcIj5cXG4gICAgICAgICAgICB7bmF2TGlua3MubWFwKChsaW5rKSA9PiAoXFxuICAgICAgICAgICAgICA8bW90aW9uLmFcXG4gICAgICAgICAgICAgICAga2V5PXtsaW5rLm5hbWV9XFxuICAgICAgICAgICAgICAgIGhyZWY9e2xpbmsuaHJlZn1cXG4gICAgICAgICAgICAgICAgd2hpbGVIb3Zlcj17eyB5OiAtMiB9fVxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2Bmb250LW1lZGl1bSB0cmFuc2l0aW9uLWNvbG9ycyBkdXJhdGlvbi0yMDAgJHtcXG4gICAgICAgICAgICAgICAgICBzY3JvbGxlZCBcXG4gICAgICAgICAgICAgICAgICAgID8gXFxcInRleHQtW3ZhcigtLW5ldXRyYWwtNzAwKV0gaG92ZXI6dGV4dC1bdmFyKC0tcHJpbWFyeSldXFxcIiBcXG4gICAgICAgICAgICAgICAgICAgIDogXFxcInRleHQtW3ZhcigtLW5ldXRyYWwtODAwKV0gaG92ZXI6dGV4dC1bdmFyKC0tcHJpbWFyeSldXFxcIlxcbiAgICAgICAgICAgICAgICB9YH1cXG4gICAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAge2xpbmsubmFtZX1cXG4gICAgICAgICAgICAgIDwvbW90aW9uLmE+XFxuICAgICAgICAgICAgKSl9XFxuICAgICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgICB7LyogQ1RBIEJ1dHRvbiAqL31cXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcImhpZGRlbiBsZzpibG9ja1xcXCI+XFxuICAgICAgICAgICAgPEJ1dHRvblxcbiAgICAgICAgICAgICAgc2l6ZT1cXFwibWRcXFwiXFxuICAgICAgICAgICAgICB2YXJpYW50PVxcXCJwcmltYXJ5XFxcIlxcbiAgICAgICAgICAgICAgaHJlZj1cXFwiLyNjb250YWN0XFxcIlxcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVxcXCJncm91cFxcXCJcXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICBHZXQgU3RhcnRlZFxcbiAgICAgICAgICAgICAgPEFycm93UmlnaHQgY2xhc3NOYW1lPVxcXCJtbC0yIGgtNCB3LTQgdHJhbnNpdGlvbi10cmFuc2Zvcm0gZ3JvdXAtaG92ZXI6dHJhbnNsYXRlLXgtMVxcXCIgLz5cXG4gICAgICAgICAgICA8L0J1dHRvbj5cXG4gICAgICAgICAgPC9kaXY+XFxuXFxuICAgICAgICAgIHsvKiBNb2JpbGUgTWVudSBCdXR0b24gKi99XFxuICAgICAgICAgIDxtb3Rpb24uYnV0dG9uXFxuICAgICAgICAgICAgd2hpbGVUYXA9e3sgc2NhbGU6IDAuOTUgfX1cXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRJc09wZW4oIWlzT3Blbil9XFxuICAgICAgICAgICAgY2xhc3NOYW1lPVxcXCJsZzpoaWRkZW4gcC0yIHJvdW5kZWQtbGcgaG92ZXI6YmctW3ZhcigtLW5ldXRyYWwtMTAwKV0gdHJhbnNpdGlvbi1jb2xvcnMgZHVyYXRpb24tMjAwXFxcIlxcbiAgICAgICAgICA+XFxuICAgICAgICAgICAge2lzT3BlbiA/IChcXG4gICAgICAgICAgICAgIDxYIGNsYXNzTmFtZT1cXFwidy02IGgtNiB0ZXh0LVt2YXIoLS1uZXV0cmFsLTcwMCldXFxcIiAvPlxcbiAgICAgICAgICAgICkgOiAoXFxuICAgICAgICAgICAgICA8TWVudSBjbGFzc05hbWU9XFxcInctNiBoLTYgdGV4dC1bdmFyKC0tbmV1dHJhbC03MDApXVxcXCIgLz5cXG4gICAgICAgICAgICApfVxcbiAgICAgICAgICA8L21vdGlvbi5idXR0b24+XFxuICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgIHsvKiBNb2JpbGUgTmF2aWdhdGlvbiAqL31cXG4gICAgICAgIDxtb3Rpb24uZGl2XFxuICAgICAgICAgIGluaXRpYWw9e2ZhbHNlfVxcbiAgICAgICAgICBhbmltYXRlPXt7XFxuICAgICAgICAgICAgaGVpZ2h0OiBpc09wZW4gPyBcXFwiYXV0b1xcXCIgOiAwLFxcbiAgICAgICAgICAgIG9wYWNpdHk6IGlzT3BlbiA/IDEgOiAwLFxcbiAgICAgICAgICB9fVxcbiAgICAgICAgICB0cmFuc2l0aW9uPXt7IGR1cmF0aW9uOiAwLjMgfX1cXG4gICAgICAgICAgY2xhc3NOYW1lPVxcXCJsZzpoaWRkZW4gb3ZlcmZsb3ctaGlkZGVuXFxcIlxcbiAgICAgICAgPlxcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwicHktNCBzcGFjZS15LTQgYm9yZGVyLXQgYm9yZGVyLVt2YXIoLS1uZXV0cmFsLTIwMCldXFxcIj5cXG4gICAgICAgICAgICB7bmF2TGlua3MubWFwKChsaW5rLCBpbmRleCkgPT4gKFxcbiAgICAgICAgICAgICAgPG1vdGlvbi5hXFxuICAgICAgICAgICAgICAgIGtleT17bGluay5uYW1lfVxcbiAgICAgICAgICAgICAgICBocmVmPXtsaW5rLmhyZWZ9XFxuICAgICAgICAgICAgICAgIGluaXRpYWw9e3sgb3BhY2l0eTogMCwgeDogLTIwIH19XFxuICAgICAgICAgICAgICAgIGFuaW1hdGU9e3sgXFxuICAgICAgICAgICAgICAgICAgb3BhY2l0eTogaXNPcGVuID8gMSA6IDAsIFxcbiAgICAgICAgICAgICAgICAgIHg6IGlzT3BlbiA/IDAgOiAtMjAgXFxuICAgICAgICAgICAgICAgIH19XFxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb249e3sgZGVsYXk6IGluZGV4ICogMC4xIH19XFxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldElzT3BlbihmYWxzZSl9XFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cXFwiYmxvY2sgcHktMiB0ZXh0LVt2YXIoLS1uZXV0cmFsLTcwMCldIGhvdmVyOnRleHQtW3ZhcigtLXByaW1hcnkpXSBmb250LW1lZGl1bSB0cmFuc2l0aW9uLWNvbG9ycyBkdXJhdGlvbi0yMDBcXFwiXFxuICAgICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIHtsaW5rLm5hbWV9XFxuICAgICAgICAgICAgICA8L21vdGlvbi5hPlxcbiAgICAgICAgICAgICkpfVxcbiAgICAgICAgICAgIDxtb3Rpb24uZGl2XFxuICAgICAgICAgICAgICBpbml0aWFsPXt7IG9wYWNpdHk6IDAsIHg6IC0yMCB9fVxcbiAgICAgICAgICAgICAgYW5pbWF0ZT17eyBcXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogaXNPcGVuID8gMSA6IDAsIFxcbiAgICAgICAgICAgICAgICB4OiBpc09wZW4gPyAwIDogLTIwIFxcbiAgICAgICAgICAgICAgfX1cXG4gICAgICAgICAgICAgIHRyYW5zaXRpb249e3sgZGVsYXk6IG5hdkxpbmtzLmxlbmd0aCAqIDAuMSB9fVxcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVxcXCJwdC00XFxcIlxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgIDxCdXR0b25cXG4gICAgICAgICAgICAgICAgc2l6ZT1cXFwibWRcXFwiXFxuICAgICAgICAgICAgICAgIHZhcmlhbnQ9XFxcInByaW1hcnlcXFwiXFxuICAgICAgICAgICAgICAgIGhyZWY9XFxcIi8jY29udGFjdFxcXCJcXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVxcXCJ3LWZ1bGwgZ3JvdXBcXFwiXFxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldElzT3BlbihmYWxzZSl9XFxuICAgICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIEdldCBTdGFydGVkXFxuICAgICAgICAgICAgICAgIDxBcnJvd1JpZ2h0IGNsYXNzTmFtZT1cXFwibWwtMiBoLTQgdy00IHRyYW5zaXRpb24tdHJhbnNmb3JtIGdyb3VwLWhvdmVyOnRyYW5zbGF0ZS14LTFcXFwiIC8+XFxuICAgICAgICAgICAgICA8L0J1dHRvbj5cXG4gICAgICAgICAgICA8L21vdGlvbi5kaXY+XFxuICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9tb3Rpb24uZGl2PlxcbiAgICAgIDwvZGl2PlxcbiAgICA8L21vdGlvbi5uYXY+XFxuICApO1xcbn1cIn0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJOb3cgbGV0IG1lIGNyZWF0ZSBhIHNpbXBsZSBuYXZpZ2F0aW9uIGNvbXBvbmVudCB0byBoZWxwIHVzZXJzIG5hdmlnYXRlIGJldHdlZW4gcGFnZXM6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJGaWxlIHNhdmVkLiAgU2F2ZWQgZmlsZSB7c3JjL2NvbXBvbmVudHMvc2VjdGlvbnMvYWJvdXQvV2h5V29ya1dpdGhVcy50c3h9IiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMUhiWWRYeTNKODFhU2MxZVlIMlRhQXkifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJDOi9Vc2Vycy9kYXRhbS9EZXNrdG9wL2FyYWJpdGVzIiwiZm9sZGVyUm9vdCI6IkM6L1VzZXJzL2RhdGFtL0Rlc2t0b3AvYXJhYml0ZXMifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTI3VDIxOjM2OjI4Ljg3M1oiLCJyZXNwb25zZV90ZXh0IjoiTm93IGxldCBtZSBjcmVhdGUgYSBzaW1wbGUgbmF2aWdhdGlvbiBjb21wb25lbnQgdG8gaGVscCB1c2VycyBuYXZpZ2F0ZSBiZXR3ZWVuIHBhZ2VzOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjRiODQ4NDFjLTY1Y2YtNDJjYy1iMWMwLTVhYzk2MTNjNGVlZCIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IiJ9LHsiaWQiOjEsInR5cGUiOjIsImNvbnRlbnQiOiJcblxuLS0tXG5cbipZb3VyIGFjY291bnQgY29udGFjdEBpbmNjZXB0YWkuY29tIGhhcyBiZWVuIHN1c3BlbmRlZCBiZWNhdXNlIHdlIGJlbGlldmUgeW91IG1heSBiZSB1c2luZyBtdWx0aXBsZSBmcmVlIHRyaWFscy4gUGxlYXNlIGNvbnRhY3Qgc3VwcG9ydCBbaGVyZV0oaHR0cHM6Ly9kb2NzLmF1Z21lbnRjb2RlLmNvbS90cm91Ymxlc2hvb3Rpbmcvc3VwcG9ydCkgZm9yIG1vcmUgaW5mb3JtYXRpb24uKiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJGaWxlIHNhdmVkLiAgU2F2ZWQgZmlsZSB7c3JjL2NvbXBvbmVudHMvdWkvTmF2aWdhdGlvbi50c3h9IiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMUZub0M4bnh0RnJDYnh6aHVvaVhUamMifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJDOi9Vc2Vycy9kYXRhbS9EZXNrdG9wL2FyYWJpdGVzIiwiZm9sZGVyUm9vdCI6IkM6L1VzZXJzL2RhdGFtL0Rlc2t0b3AvYXJhYml0ZXMifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTI3VDIxOjM2OjU2Ljk4MVoiLCJyZXNwb25zZV90ZXh0IjoiXG5cbi0tLVxuXG4qWW91ciBhY2NvdW50IGNvbnRhY3RAaW5jY2VwdGFpLmNvbSBoYXMgYmVlbiBzdXNwZW5kZWQgYmVjYXVzZSB3ZSBiZWxpZXZlIHlvdSBtYXkgYmUgdXNpbmcgbXVsdGlwbGUgZnJlZSB0cmlhbHMuIFBsZWFzZSBjb250YWN0IHN1cHBvcnQgW2hlcmVdKGh0dHBzOi8vZG9jcy5hdWdtZW50Y29kZS5jb20vdHJvdWJsZXNob290aW5nL3N1cHBvcnQpIGZvciBtb3JlIGluZm9ybWF0aW9uLioiLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InJlcXVlc3RfaWQiOiI2MDBmZGQyMS0zNjFjLTQ3ZWEtODZlOC0wZWQ4MmRhOGI3MzEiLCJ1dWlkIjoiM2RjNTk0ZjUtMzg0Ni00NjIzLTlhZTEtMmIyMzljZGQxZTFjIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy1jaGVja3BvaW50LWRlbGltaXRlciIsInN0YXR1cyI6InN1Y2Nlc3MiLCJmcm9tVGltZXN0YW1wIjoxNzQ4MzgxMzQ1ODA1LCJ0b1RpbWVzdGFtcCI6MTc0ODM4MTgyMTI3Niwic2Vlbl9zdGF0ZSI6InNlZW4ifV0sImZlZWRiYWNrU3RhdGVzIjp7InRlbXAtZmUtMzU4NjU2OWItNGUwZC00MTNmLWIwY2UtOWFkZTQ0ZjMwNDYyIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS00NWFjN2RjZi0xNzc1LTQ2N2ItOTMyYy03NmNjM2MzYWMwNDIiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWM2NDdlYjJlLThiYTUtNGZlZC04ZDc4LTkwMjQ4YzdkYWNlZCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtNWRiMTA5MjQtZTlhMi00OTI1LWE4ZGMtNmU2YzViYmUyYTY0Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS03NDZiOGFkZi0yM2ZjLTRjMzgtYjdhYS0yMmFmNGRhZGI4NDAiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTViZTZhNDBmLWMwNDItNGYxMC05ODBjLTk2MmFlZWRmYTA1MiI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtNzkyZTJiYjUtN2E3NS00MWExLThkOWEtZGE4ZTMyMDg0NGU4Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS1iNWQyMTZjOC05NGJmLTQyNzctYWU1Yy03OTFmZmYyYTE1NzUiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTlkMmQ5MTg4LWExNGEtNGI4Zi04NWFjLWUyM2MzNzIzMGUyZCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtOTMyMGNlYWItM2FlMy00MzUyLTllMTgtMzk2OTM5MjZhOGE1Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS00YTI3Zjg1OC1hYTM3LTQ3OTctYmEyYy1jN2Y1OGRjNmY0ZDMiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9fSwidG9vbFVzZVN0YXRlcyI6eyI3YjYzYmM0MC1iYmVmLTRiNmEtOWYzYi1lMjk3M2YzYTFmMzk7dG9vbHVfMDE5SkNHOHZQaUpCUnFiTTVqQWJZVTdzIjp7InJlcXVlc3RJZCI6IjdiNjNiYzQwLWJiZWYtNGI2YS05ZjNiLWUyOTczZjNhMWYzOSIsInRvb2xVc2VJZCI6InRvb2x1XzAxOUpDRzh2UGlKQlJxYk01akFiWVU3cyIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IHNyYy9hcHAvbGF5b3V0LnRzeFxuICAgICAxXHRpbXBvcnQgdHlwZSB7IE1ldGFkYXRhIH0gZnJvbSBcIm5leHRcIjtcbiAgICAgMlx0aW1wb3J0IHsgSW50ZXIsIFBsYXlmYWlyX0Rpc3BsYXkgfSBmcm9tIFwibmV4dC9mb250L2dvb2dsZVwiO1xuICAgICAzXHRpbXBvcnQgeyBBbmFseXRpY3MgfSBmcm9tIFwiQHZlcmNlbC9hbmFseXRpY3MvcmVhY3RcIjtcbiAgICAgNFx0aW1wb3J0IFwiLi9nbG9iYWxzLmNzc1wiO1xuICAgICA1XHRcbiAgICAgNlx0Y29uc3QgaW50ZXIgPSBJbnRlcih7XG4gICAgIDdcdCAgdmFyaWFibGU6IFwiLS1mb250LWludGVyXCIsXG4gICAgIDhcdCAgc3Vic2V0czogW1wibGF0aW5cIl0sXG4gICAgIDlcdCAgZGlzcGxheTogXCJzd2FwXCIsXG4gICAgMTBcdH0pO1xuICAgIDExXHRcbiAgICAxMlx0Y29uc3QgcGxheWZhaXIgPSBQbGF5ZmFpcl9EaXNwbGF5KHtcbiAgICAxM1x0ICB2YXJpYWJsZTogXCItLWZvbnQtcGxheWZhaXJcIixcbiAgICAxNFx0ICBzdWJzZXRzOiBbXCJsYXRpblwiXSxcbiAgICAxNVx0ICBkaXNwbGF5OiBcInN3YXBcIixcbiAgICAxNlx0fSk7XG4gICAgMTdcdFxuICAgIDE4XHRleHBvcnQgY29uc3QgbWV0YWRhdGE6IE1ldGFkYXRhID0ge1xuICAgIDE5XHQgIHRpdGxlOiBcIkFyYWJpdGVzIERpZ2l0YWwgQWdlbmN5IHwgQ3VzdG9tIFdlYnNpdGVzICYgU29mdHdhcmUgU29sdXRpb25zIGluIER1YmFpXCIsXG4gICAgMjBcdCAgZGVzY3JpcHRpb246IFwiTGVhZGluZyBkaWdpdGFsIGFnZW5jeSBpbiBEdWJhaSBzcGVjaWFsaXppbmcgaW4gY3VzdG9tIHdlYnNpdGVzLCBsYW5kaW5nIHBhZ2VzLCBhbmQgc29mdHdhcmUgc29sdXRpb25zIGZvciByZWFsIGVzdGF0ZSwgZS1jb21tZXJjZSwgd2VsbG5lc3MsIHRvdXJpc20sIGFuZCBmaW50ZWNoIGJ1c2luZXNzZXMuXCIsXG4gICAgMjFcdCAga2V5d29yZHM6IFwiRHViYWkgZGlnaXRhbCBhZ2VuY3ksIGN1c3RvbSB3ZWJzaXRlcyBEdWJhaSwgbGFuZGluZyBwYWdlcyBEdWJhaSwgc29mdHdhcmUgZGV2ZWxvcG1lbnQgRHViYWksIHJlYWwgZXN0YXRlIHdlYnNpdGVzLCBlLWNvbW1lcmNlIHNvbHV0aW9uc1wiLFxuICAgIDIyXHQgIGF1dGhvcnM6IFt7IG5hbWU6IFwiQXJhYml0ZXMgRGlnaXRhbCBBZ2VuY3lcIiB9XSxcbiAgICAyM1x0ICBjcmVhdG9yOiBcIkFyYWJpdGVzIERpZ2l0YWwgQWdlbmN5XCIsXG4gICAgMjRcdCAgcHVibGlzaGVyOiBcIkFyYWJpdGVzIERpZ2l0YWwgQWdlbmN5XCIsXG4gICAgMjVcdCAgbWV0YWRhdGFCYXNlOiBuZXcgVVJMKFwiaHR0cHM6Ly9hcmFiaXRlcy5jb21cIiksXG4gICAgMjZcdCAgb3BlbkdyYXBoOiB7XG4gICAgMjdcdCAgICB0eXBlOiBcIndlYnNpdGVcIixcbiAgICAyOFx0ICAgIGxvY2FsZTogXCJlbl9VU1wiLFxuICAgIDI5XHQgICAgdXJsOiBcImh0dHBzOi8vYXJhYml0ZXMuY29tXCIsXG4gICAgMzBcdCAgICB0aXRsZTogXCJBcmFiaXRlcyBEaWdpdGFsIEFnZW5jeSB8IEN1c3RvbSBXZWJzaXRlcyAmIFNvZnR3YXJlIFNvbHV0aW9ucyBpbiBEdWJhaVwiLFxuICAgIDMxXHQgICAgZGVzY3JpcHRpb246IFwiTGVhZGluZyBkaWdpdGFsIGFnZW5jeSBpbiBEdWJhaSBzcGVjaWFsaXppbmcgaW4gY3VzdG9tIHdlYnNpdGVzLCBsYW5kaW5nIHBhZ2VzLCBhbmQgc29mdHdhcmUgc29sdXRpb25zIGZvciByZWFsIGVzdGF0ZSwgZS1jb21tZXJjZSwgd2VsbG5lc3MsIHRvdXJpc20sIGFuZCBmaW50ZWNoIGJ1c2luZXNzZXMuXCIsXG4gICAgMzJcdCAgICBzaXRlTmFtZTogXCJBcmFiaXRlcyBEaWdpdGFsIEFnZW5jeVwiLFxuICAgIDMzXHQgICAgaW1hZ2VzOiBbXG4gICAgMzRcdCAgICAgIHtcbiAgICAzNVx0ICAgICAgICB1cmw6IFwiL29nLWltYWdlLmpwZ1wiLFxuICAgIDM2XHQgICAgICAgIHdpZHRoOiAxMjAwLFxuICAgIDM3XHQgICAgICAgIGhlaWdodDogNjMwLFxuICAgIDM4XHQgICAgICAgIGFsdDogXCJBcmFiaXRlcyBEaWdpdGFsIEFnZW5jeSAtIER1YmFpJ3MgUHJlbWllciBXZWIgRGV2ZWxvcG1lbnQgQ29tcGFueVwiLFxuICAgIDM5XHQgICAgICB9LFxuICAgIDQwXHQgICAgXSxcbiAgICA0MVx0ICB9LFxuLi4uXG4gICAgNjBcdFxuICAgIDYxXHRleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBSb290TGF5b3V0KHtcbiAgICA2Mlx0ICBjaGlsZHJlbixcbiAgICA2M1x0fTogUmVhZG9ubHk8e1xuICAgIDY0XHQgIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGU7XG4gICAgNjVcdH0+KSB7XG4gICAgNjZcdCAgcmV0dXJuIChcbiAgICA2N1x0ICAgIDxodG1sIGxhbmc9XCJlblwiIGNsYXNzTmFtZT1cInNjcm9sbC1zbW9vdGhcIj5cbiAgICA2OFx0ICAgICAgPGJvZHlcbiAgICA2OVx0ICAgICAgICBjbGFzc05hbWU9e2Ake2ludGVyLnZhcmlhYmxlfSAke3BsYXlmYWlyLnZhcmlhYmxlfSBmb250LXNhbnMgYW50aWFsaWFzZWQgYmctd2hpdGUgdGV4dC1ncmF5LTkwMGB9XG4gICAgNzBcdCAgICAgID5cbiAgICA3MVx0ICAgICAgICB7Y2hpbGRyZW59XG4gICAgNzJcdCAgICAgICAgPEFuYWx5dGljcyAvPlxuICAgIDczXHQgICAgICA8L2JvZHk+XG4gICAgNzRcdCAgICA8L2h0bWw+XG4gICAgNzVcdCAgKTtcbiAgICA3Nlx0fVxuLi4uXG5QYXRoOiBzcmMvYXBwL2dsb2JhbHMuY3NzXG4gICAgIDFcdEBpbXBvcnQgXCJ0YWlsd2luZGNzc1wiO1xuICAgICAyXHRcbiAgICAgM1x0OnJvb3Qge1xuICAgICA0XHQgIC8qIER1YmFpLWluc3BpcmVkIHByb2Zlc3Npb25hbCBjb2xvciBwYWxldHRlICovXG4gICAgIDVcdCAgLS1wcmltYXJ5OiAjMWU0MGFmOyAvKiBEZWVwIGJsdWUgLSB0cnVzdCBhbmQgcHJvZmVzc2lvbmFsaXNtICovXG4gICAgIDZcdCAgLS1wcmltYXJ5LWRhcms6ICMxZTNhOGE7XG4gICAgIDdcdCAgLS1zZWNvbmRhcnk6ICNmNTllMGI7IC8qIEdvbGQgLSBsdXh1cnkgYW5kIHN1Y2Nlc3MgKi9cbiAgICAgOFx0ICAtLXNlY29uZGFyeS1kYXJrOiAjZDk3NzA2O1xuICAgICA5XHQgIC0tYWNjZW50OiAjMDZiNmQ0OyAvKiBDeWFuIC0gaW5ub3ZhdGlvbiBhbmQgdGVjaG5vbG9neSAqL1xuICAgIDEwXHQgIC0tbmV1dHJhbC01MDogI2Y4ZmFmYztcbiAgICAxMVx0ICAtLW5ldXRyYWwtMTAwOiAjZjFmNWY5O1xuICAgIDEyXHQgIC0tbmV1dHJhbC0yMDA6ICNlMmU4ZjA7XG4gICAgMTNcdCAgLS1uZXV0cmFsLTMwMDogI2NiZDVlMTtcbiAgICAxNFx0ICAtLW5ldXRyYWwtNDAwOiAjOTRhM2I4O1xuICAgIDE1XHQgIC0tbmV1dHJhbC01MDA6ICM2NDc0OGI7XG4gICAgMTZcdCAgLS1uZXV0cmFsLTYwMDogIzQ3NTU2OTtcbiAgICAxN1x0ICAtLW5ldXRyYWwtNzAwOiAjMzM0MTU1O1xuICAgIDE4XHQgIC0tbmV1dHJhbC04MDA6ICMxZTI5M2I7XG4gICAgMTlcdCAgLS1uZXV0cmFsLTkwMDogIzBmMTcyYTtcbiAgICAyMFx0fVxuICAgIDIxXHRcbiAgICAyMlx0QHRoZW1lIGlubGluZSB7XG4gICAgMjNcdCAgLS1mb250LXNhbnM6IHZhcigtLWZvbnQtaW50ZXIpO1xuICAgIDI0XHQgIC0tZm9udC1zZXJpZjogdmFyKC0tZm9udC1wbGF5ZmFpcik7XG4gICAgMjVcdFxuICAgIDI2XHQgIC8qIEN1c3RvbSBjb2xvciB0b2tlbnMgKi9cbiAgICAyN1x0ICAtLWNvbG9yLXByaW1hcnk6IHZhcigtLXByaW1hcnkpO1xuICAgIDI4XHQgIC0tY29sb3ItcHJpbWFyeS1kYXJrOiB2YXIoLS1wcmltYXJ5LWRhcmspO1xuICAgIDI5XHQgIC0tY29sb3Itc2Vjb25kYXJ5OiB2YXIoLS1zZWNvbmRhcnkpO1xuICAgIDMwXHQgIC0tY29sb3Itc2Vjb25kYXJ5LWRhcms6IHZhcigtLXNlY29uZGFyeS1kYXJrKTtcbiAgICAzMVx0ICAtLWNvbG9yLWFjY2VudDogdmFyKC0tYWNjZW50KTtcbiAgICAzMlx0XG4gICAgMzNcdCAgLyogTmV1dHJhbCBzY2FsZSAqL1xuICAgIDM0XHQgIC0tY29sb3ItbmV1dHJhbC01MDogdmFyKC0tbmV1dHJhbC01MCk7XG4gICAgMzVcdCAgLS1jb2xvci1uZXV0cmFsLTEwMDogdmFyKC0tbmV1dHJhbC0xMDApO1xuICAgIDM2XHQgIC0tY29sb3ItbmV1dHJhbC0yMDA6IHZhcigtLW5ldXRyYWwtMjAwKTtcbiAgICAzN1x0ICAtLWNvbG9yLW5ldXRyYWwtMzAwOiB2YXIoLS1uZXV0cmFsLTMwMCk7XG4gICAgMzhcdCAgLS1jb2xvci1uZXV0cmFsLTQwMDogdmFyKC0tbmV1dHJhbC00MDApO1xuICAgIDM5XHQgIC0tY29sb3ItbmV1dHJhbC01MDA6IHZhcigtLW5ldXRyYWwtNTAwKTtcbiAgICA0MFx0ICAtLWNvbG9yLW5ldXRyYWwtNjAwOiB2YXIoLS1uZXV0cmFsLTYwMCk7XG4gICAgNDFcdCAgLS1jb2xvci1uZXV0cmFsLTcwMDogdmFyKC0tbmV1dHJhbC03MDApO1xuICAgIDQyXHQgIC0tY29sb3ItbmV1dHJhbC04MDA6IHZhcigtLW5ldXRyYWwtODAwKTtcbiAgICA0M1x0ICAtLWNvbG9yLW5ldXRyYWwtOTAwOiB2YXIoLS1uZXV0cmFsLTkwMCk7XG4gICAgNDRcdH1cbiAgICA0NVx0XG4gICAgNDZcdC8qIFNtb290aCBzY3JvbGxpbmcgYW5kIGJhc2Ugc3R5bGVzICovXG4gICAgNDdcdGh0bWwge1xuICAgIDQ4XHQgIHNjcm9sbC1iZWhhdmlvcjogc21vb3RoO1xuICAgIDQ5XHR9XG4gICAgNTBcdFxuICAgIDUxXHRib2R5IHtcbiAgICA1Mlx0ICBmb250LWZhbWlseTogdmFyKC0tZm9udC1pbnRlciksIHN5c3RlbS11aSwgc2Fucy1zZXJpZjtcbiAgICA1M1x0ICBsaW5lLWhlaWdodDogMS42O1xuICAgIDU0XHQgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xuICAgIDU1XHQgIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XG4gICAgNTZcdH1cbiAgICA1N1x0XG4gICAgNThcdC8qIEN1c3RvbSBzY3JvbGxiYXIgKi9cbiAgICA1OVx0Ojotd2Via2l0LXNjcm9sbGJhciB7XG4gICAgNjBcdCAgd2lkdGg6IDhweDtcbiAgICA2MVx0fVxuICAgIDYyXHRcbiAgICA2M1x0Ojotd2Via2l0LXNjcm9sbGJhci10cmFjayB7XG4gICAgNjRcdCAgYmFja2dyb3VuZDogdmFyKC0tbmV1dHJhbC0xMDApO1xuICAgIDY1XHR9XG4gICAgNjZcdFxuICAgIDY3XHQ6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iIHtcbiAgICA2OFx0ICBiYWNrZ3JvdW5kOiB2YXIoLS1uZXV0cmFsLTQwMCk7XG4gICAgNjlcdCAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgIDcwXHR9XG4gICAgNzFcdFxuICAgIDcyXHQ6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iOmhvdmVyIHtcbiAgICA3M1x0ICBiYWNrZ3JvdW5kOiB2YXIoLS1uZXV0cmFsLTUwMCk7XG4gICAgNzRcdH1cbiAgICA3NVx0XG4gICAgNzZcdC8qIEZvY3VzIHN0eWxlcyBmb3IgYWNjZXNzaWJpbGl0eSAqL1xuICAgIDc3XHQuZm9jdXMtdmlzaWJsZSB7XG4gICAgNzhcdCAgb3V0bGluZTogMnB4IHNvbGlkIHZhcigtLXByaW1hcnkpO1xuICAgIDc5XHQgIG91dGxpbmUtb2Zmc2V0OiAycHg7XG4gICAgODBcdH1cbiAgICA4MVx0XG4gICAgODJcdC8qIEdyYWRpZW50IGJhY2tncm91bmRzICovXG4gICAgODNcdC5ncmFkaWVudC1wcmltYXJ5IHtcbiAgICA4NFx0ICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTM1ZGVnLCB2YXIoLS1wcmltYXJ5KSAwJSwgdmFyKC0tcHJpbWFyeS1kYXJrKSAxMDAlKTtcbiAgICA4NVx0fVxuLi4uXG5QYXRoOiBzcmMvY29tcG9uZW50cy9zZWN0aW9ucy9IZXJvLnRzeFxuICAgICAxXHRcInVzZSBjbGllbnRcIjtcbiAgICAgMlx0XG4gICAgIDNcdGltcG9ydCB7IG1vdGlvbiB9IGZyb20gXCJmcmFtZXItbW90aW9uXCI7XG4gICAgIDRcdGltcG9ydCB7IEJ1dHRvbiB9IGZyb20gXCJAL2NvbXBvbmVudHMvdWkvQnV0dG9uXCI7XG4gICAgIDVcdGltcG9ydCB7IEFycm93UmlnaHQsIFBsYXkgfSBmcm9tIFwibHVjaWRlLXJlYWN0XCI7XG4gICAgIDZcdFxuICAgICA3XHRleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBIZXJvKCkge1xuICAgICA4XHQgIHJldHVybiAoXG4gICAgIDlcdCAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJyZWxhdGl2ZSBtaW4taC1zY3JlZW4gZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgb3ZlcmZsb3ctaGlkZGVuIGJnLWdyYWRpZW50LXRvLWJyIGZyb20tW3ZhcigtLW5ldXRyYWwtNTApXSB2aWEtd2hpdGUgdG8tW3ZhcigtLW5ldXRyYWwtMTAwKV1cIj5cbiAgICAxMFx0ICAgICAgey8qIEJhY2tncm91bmQgUGF0dGVybiAqL31cbiAgICAxMVx0ICAgICAgPGRpdiBjbGFzc05hbWU9XCJhYnNvbHV0ZSBpbnNldC0wIG9wYWNpdHktNVwiPlxuICAgIDEyXHQgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWJzb2x1dGUgaW5zZXQtMFwiIHN0eWxlPXt7XG4gICAgMTNcdCAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGByYWRpYWwtZ3JhZGllbnQoY2lyY2xlIGF0IDI1JSAyNSUsIHZhcigtLXByaW1hcnkpIDJweCwgdHJhbnNwYXJlbnQgMnB4KSxcbiAgICAxNFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFkaWFsLWdyYWRpZW50KGNpcmNsZSBhdCA3NSUgNzUlLCB2YXIoLS1zZWNvbmRhcnkpIDJweCwgdHJhbnNwYXJlbnQgMnB4KWAsXG4gICAgMTVcdCAgICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogJzYwcHggNjBweCdcbiAgICAxNlx0ICAgICAgICB9fSAvPlxuICAgIDE3XHQgICAgICA8L2Rpdj5cbi4uLlxuICAgIDgyXHRcbiAgICA4M1x0ICAgICAgICAgIHsvKiBDVEEgQnV0dG9ucyAqL31cbiAgICA4NFx0ICAgICAgICAgIDxtb3Rpb24uZGl2XG4gICAgODVcdCAgICAgICAgICAgIGluaXRpYWw9e3sgb3BhY2l0eTogMCwgeTogMzAgfX1cbiAgICA4Nlx0ICAgICAgICAgICAgYW5pbWF0ZT17eyBvcGFjaXR5OiAxLCB5OiAwIH19XG4gICAgODdcdCAgICAgICAgICAgIHRyYW5zaXRpb249e3sgZHVyYXRpb246IDAuOCwgZGVsYXk6IDAuNiB9fVxuICAgIDg4XHQgICAgICAgICAgICBjbGFzc05hbWU9XCJmbGV4IGZsZXgtY29sIHNtOmZsZXgtcm93IGdhcC00IGp1c3RpZnktY2VudGVyIGl0ZW1zLWNlbnRlclwiXG4gICAgODlcdCAgICAgICAgICA+XG4gICAgOTBcdCAgICAgICAgICAgIDxCdXR0b25cbiAgICA5MVx0ICAgICAgICAgICAgICBzaXplPVwibGdcIlxuICAgIDkyXHQgICAgICAgICAgICAgIHZhcmlhbnQ9XCJwcmltYXJ5XCJcbiAgICA5M1x0ICAgICAgICAgICAgICBocmVmPVwiI2NvbnRhY3RcIlxuICAgIDk0XHQgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImdyb3VwXCJcbiAgICA5NVx0ICAgICAgICAgICAgPlxuICAgIDk2XHQgICAgICAgICAgICAgIEJvb2sgRnJlZSBDb25zdWx0YXRpb25cbiAgICA5N1x0ICAgICAgICAgICAgICA8QXJyb3dSaWdodCBjbGFzc05hbWU9XCJtbC0yIGgtNSB3LTUgdHJhbnNpdGlvbi10cmFuc2Zvcm0gZ3JvdXAtaG92ZXI6dHJhbnNsYXRlLXgtMVwiIC8+XG4gICAgOThcdCAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgIDk5XHQgICAgICAgICAgICBcbiAgIDEwMFx0ICAgICAgICAgICAgPEJ1dHRvblxuICAgMTAxXHQgICAgICAgICAgICAgIHNpemU9XCJsZ1wiXG4gICAxMDJcdCAgICAgICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVcIlxuICAgMTAzXHQgICAgICAgICAgICAgIGhyZWY9XCIjcG9ydGZvbGlvXCJcbiAgIDEwNFx0ICAgICAgICAgICAgICBjbGFzc05hbWU9XCJncm91cFwiXG4gICAxMDVcdCAgICAgICAgICAgID5cbiAgIDEwNlx0ICAgICAgICAgICAgICA8UGxheSBjbGFzc05hbWU9XCJtci0yIGgtNSB3LTVcIiAvPlxuICAgMTA3XHQgICAgICAgICAgICAgIFNlZSBPdXIgV29ya1xuICAgMTA4XHQgICAgICAgICAgICA8L0J1dHRvbj5cbiAgIDEwOVx0ICAgICAgICAgIDwvbW90aW9uLmRpdj5cbi4uLlxuUGF0aDogUkVBRE1FLm1kXG4gICAgIDFcdFRoaXMgaXMgYSBbTmV4dC5qc10oaHR0cHM6Ly9uZXh0anMub3JnKSBwcm9qZWN0IGJvb3RzdHJhcHBlZCB3aXRoIFtgY3JlYXRlLW5leHQtYXBwYF0oaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBwL2FwaS1yZWZlcmVuY2UvY2xpL2NyZWF0ZS1uZXh0LWFwcCkuXG4gICAgIDJcdFxuICAgICAzXHQjIyBHZXR0aW5nIFN0YXJ0ZWRcbiAgICAgNFx0XG4gICAgIDVcdEZpcnN0LCBydW4gdGhlIGRldmVsb3BtZW50IHNlcnZlcjpcbiAgICAgNlx0XG4gICAgIDdcdGBgYGJhc2hcbiAgICAgOFx0bnBtIHJ1biBkZXZcbiAgICAgOVx0IyBvclxuICAgIDEwXHR5YXJuIGRldlxuICAgIDExXHQjIG9yXG4gICAgMTJcdHBucG0gZGV2XG4gICAgMTNcdCMgb3JcbiAgICAxNFx0YnVuIGRldlxuICAgIDE1XHRgYGBcbiAgICAxNlx0XG4gICAgMTdcdE9wZW4gW2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMF0oaHR0cDovL2xvY2FsaG9zdDozMDAwKSB3aXRoIHlvdXIgYnJvd3NlciB0byBzZWUgdGhlIHJlc3VsdC5cbiAgICAxOFx0XG4gICAgMTlcdFlvdSBjYW4gc3RhcnQgZWRpdGluZyB0aGUgcGFnZSBieSBtb2RpZnlpbmcgYGFwcC9wYWdlLnRzeGAuIFRoZSBwYWdlIGF1dG8tdXBkYXRlcyBhcyB5b3UgZWRpdCB0aGUgZmlsZS5cbiAgICAyMFx0XG4gICAgMjFcdFRoaXMgcHJvamVjdCB1c2VzIFtgbmV4dC9mb250YF0oaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBwL2J1aWxkaW5nLXlvdXItYXBwbGljYXRpb24vb3B0aW1pemluZy9mb250cykgdG8gYXV0b21hdGljYWxseSBvcHRpbWl6ZSBhbmQgbG9hZCBbR2Vpc3RdKGh0dHBzOi8vdmVyY2VsLmNvbS9mb250KSwgYSBuZXcgZm9udCBmYW1pbHkgZm9yIFZlcmNlbC5cbiAgICAyMlx0XG4gICAgMjNcdCMjIExlYXJuIE1vcmVcbiAgICAyNFx0XG4gICAgMjVcdFRvIGxlYXJuIG1vcmUgYWJvdXQgTmV4dC5qcywgdGFrZSBhIGxvb2sgYXQgdGhlIGZvbGxvd2luZyByZXNvdXJjZXM6XG4uLi5cblBhdGg6IHNyYy9jb21wb25lbnRzL3NlY3Rpb25zL0NUQS50c3hcbi4uLlxuICAgICA2XHRcbiAgICAgN1x0ZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ1RBKCkge1xuICAgICA4XHQgIHJldHVybiAoXG4gICAgIDlcdCAgICA8c2VjdGlvbiBpZD1cImNvbnRhY3RcIiBjbGFzc05hbWU9XCJweS0yMCBsZzpweS0zMiBiZy1ncmFkaWVudC10by1iciBmcm9tLVt2YXIoLS1wcmltYXJ5KV0gdmlhLVt2YXIoLS1hY2NlbnQpXSB0by1bdmFyKC0tc2Vjb25kYXJ5KV0gcmVsYXRpdmUgb3ZlcmZsb3ctaGlkZGVuXCI+XG4gICAgMTBcdCAgICAgIHsvKiBCYWNrZ3JvdW5kIFBhdHRlcm4gKi99XG4gICAgMTFcdCAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWJzb2x1dGUgaW5zZXQtMCBvcGFjaXR5LTEwXCI+XG4gICAgMTJcdCAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhYnNvbHV0ZSBpbnNldC0wXCIgc3R5bGU9e3tcbiAgICAxM1x0ICAgICAgICAgIGJhY2tncm91bmRJbWFnZTogYHJhZGlhbC1ncmFkaWVudChjaXJjbGUgYXQgMjAlIDgwJSwgd2hpdGUgMnB4LCB0cmFuc3BhcmVudCAycHgpLFxuICAgIDE0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICByYWRpYWwtZ3JhZGllbnQoY2lyY2xlIGF0IDgwJSAyMCUsIHdoaXRlIDJweCwgdHJhbnNwYXJlbnQgMnB4KSxcbiAgICAxNVx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFkaWFsLWdyYWRpZW50KGNpcmNsZSBhdCA0MCUgNDAlLCB3aGl0ZSAxcHgsIHRyYW5zcGFyZW50IDFweClgLFxuICAgIDE2XHQgICAgICAgICAgYmFja2dyb3VuZFNpemU6ICcxMDBweCAxMDBweCwgODBweCA4MHB4LCA0MHB4IDQwcHgnXG4gICAgMTdcdCAgICAgICAgfX0gLz5cbiAgICAxOFx0ICAgICAgPC9kaXY+XG4uLi5cbiAgICA2NVx0XG4gICAgNjZcdCAgICAgICAgICB7LyogQ1RBIEJ1dHRvbnMgKi99XG4gICAgNjdcdCAgICAgICAgICA8bW90aW9uLmRpdlxuICAgIDY4XHQgICAgICAgICAgICBpbml0aWFsPXt7IG9wYWNpdHk6IDAsIHk6IDMwIH19XG4gICAgNjlcdCAgICAgICAgICAgIHdoaWxlSW5WaWV3PXt7IG9wYWNpdHk6IDEsIHk6IDAgfX1cbiAgICA3MFx0ICAgICAgICAgICAgdmlld3BvcnQ9e3sgb25jZTogdHJ1ZSB9fVxuICAgIDcxXHQgICAgICAgICAgICB0cmFuc2l0aW9uPXt7IGR1cmF0aW9uOiAwLjgsIGRlbGF5OiAwLjIgfX1cbiAgICA3Mlx0ICAgICAgICAgICAgY2xhc3NOYW1lPVwiZmxleCBmbGV4LWNvbCBzbTpmbGV4LXJvdyBnYXAtNCBqdXN0aWZ5LWNlbnRlciBpdGVtcy1jZW50ZXIgbWItMTZcIlxuICAgIDczXHQgICAgICAgICAgPlxuICAgIDc0XHQgICAgICAgICAgICA8QnV0dG9uXG4gICAgNzVcdCAgICAgICAgICAgICAgc2l6ZT1cImxnXCJcbiAgICA3Nlx0ICAgICAgICAgICAgICBocmVmPVwiaHR0cHM6Ly93YS5tZS85NzE1MDEyMzQ1Njc/dGV4dD1IaSUyMEFyYWJpdGVzISUyMEknbSUyMGludGVyZXN0ZWQlMjBpbiUyMGRpc2N1c3NpbmclMjBhJTIwcHJvamVjdC5cIlxuICAgIDc3XHQgICAgICAgICAgICAgIGV4dGVybmFsXG4gICAgNzhcdCAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZ3JvdXAgYmctd2hpdGUgdGV4dC1bdmFyKC0tcHJpbWFyeSldIGhvdmVyOmJnLVt2YXIoLS1uZXV0cmFsLTEwMCldIHNoYWRvdy14bCBob3ZlcjpzaGFkb3ctMnhsXCJcbiAgICA3OVx0ICAgICAgICAgICAgPlxuICAgIDgwXHQgICAgICAgICAgICAgIDxNZXNzYWdlQ2lyY2xlIGNsYXNzTmFtZT1cIm1yLTIgaC01IHctNVwiIC8+XG4gICAgODFcdCAgICAgICAgICAgICAgV2hhdHNBcHAgVXMgTm93XG4gICAgODJcdCAgICAgICAgICAgICAgPEFycm93UmlnaHQgY2xhc3NOYW1lPVwibWwtMiBoLTUgdy01IHRyYW5zaXRpb24tdHJhbnNmb3JtIGdyb3VwLWhvdmVyOnRyYW5zbGF0ZS14LTFcIiAvPlxuICAgIDgzXHQgICAgICAgICAgICA8L0J1dHRvbj5cbi4uLlxuUGF0aDogc3JjL2NvbXBvbmVudHMvc2VjdGlvbnMvU2VydmljZXMudHN4XG4uLi5cbiAgICAgNVx0XG4gICAgIDZcdGNvbnN0IHNlcnZpY2VzID0gW1xuICAgICA3XHQgIHtcbiAgICAgOFx0ICAgIGljb246IEdsb2JlLFxuICAgICA5XHQgICAgdGl0bGU6IFwiQ3VzdG9tIFdlYnNpdGVzXCIsXG4gICAgMTBcdCAgICBkZXNjcmlwdGlvbjogXCJCZXNwb2tlIHdlYnNpdGVzIHRoYXQgcmVmbGVjdCB5b3VyIGJyYW5kIGFuZCBjb252ZXJ0IHZpc2l0b3JzIGludG8gY3VzdG9tZXJzXCIsXG4gICAgMTFcdCAgICBmZWF0dXJlczogW1wiUmVzcG9uc2l2ZSBEZXNpZ25cIiwgXCJTRU8gT3B0aW1pemVkXCIsIFwiRmFzdCBMb2FkaW5nXCIsIFwiQ01TIEludGVncmF0aW9uXCJdLFxuICAgIDEyXHQgICAgY29sb3I6IFwidmFyKC0tcHJpbWFyeSlcIlxuICAgIDEzXHQgIH0sXG4gICAgMTRcdCAge1xuICAgIDE1XHQgICAgaWNvbjogWmFwLFxuICAgIDE2XHQgICAgdGl0bGU6IFwiTGFuZGluZyBQYWdlc1wiLFxuICAgIDE3XHQgICAgZGVzY3JpcHRpb246IFwiSGlnaC1jb252ZXJ0aW5nIGxhbmRpbmcgcGFnZXMgZGVzaWduZWQgdG8gbWF4aW1pemUgeW91ciBtYXJrZXRpbmcgUk9JXCIsXG4gICAgMThcdCAgICBmZWF0dXJlczogW1wiQS9CIFRlc3RpbmdcIiwgXCJBbmFseXRpY3MgU2V0dXBcIiwgXCJMZWFkIENhcHR1cmVcIiwgXCJNb2JpbGUgT3B0aW1pemVkXCJdLFxuICAgIDE5XHQgICAgY29sb3I6IFwidmFyKC0tc2Vjb25kYXJ5KVwiXG4gICAgMjBcdCAgfSxcbiAgICAyMVx0ICB7XG4gICAgMjJcdCAgICBpY29uOiBDb2RlLFxuICAgIDIzXHQgICAgdGl0bGU6IFwiU29mdHdhcmUgU29sdXRpb25zXCIsXG4gICAgMjRcdCAgICBkZXNjcmlwdGlvbjogXCJDdXN0b20gc29mdHdhcmUgYW5kIHdlYiBhcHBsaWNhdGlvbnMgdGFpbG9yZWQgdG8geW91ciBidXNpbmVzcyBuZWVkc1wiLFxuICAgIDI1XHQgICAgZmVhdHVyZXM6IFtcIkFQSSBEZXZlbG9wbWVudFwiLCBcIkRhdGFiYXNlIERlc2lnblwiLCBcIkNsb3VkIEhvc3RpbmdcIiwgXCJNYWludGVuYW5jZVwiXSxcbiAgICAyNlx0ICAgIGNvbG9yOiBcInZhcigtLWFjY2VudClcIlxuICAgIDI3XHQgIH0sXG4uLi5cblBhdGg6IHNyYy9hcHAvcGFnZS50c3hcbiAgICAgMVx0aW1wb3J0IEhlcm8gZnJvbSBcIkAvY29tcG9uZW50cy9zZWN0aW9ucy9IZXJvXCI7XG4gICAgIDJcdGltcG9ydCBJbmR1c3RyaWVzIGZyb20gXCJAL2NvbXBvbmVudHMvc2VjdGlvbnMvSW5kdXN0cmllc1wiO1xuICAgICAzXHRpbXBvcnQgU2VydmljZXMgZnJvbSBcIkAvY29tcG9uZW50cy9zZWN0aW9ucy9TZXJ2aWNlc1wiO1xuICAgICA0XHRpbXBvcnQgUG9ydGZvbGlvIGZyb20gXCJAL2NvbXBvbmVudHMvc2VjdGlvbnMvUG9ydGZvbGlvXCI7XG4gICAgIDVcdGltcG9ydCBBYm91dCBmcm9tIFwiQC9jb21wb25lbnRzL3NlY3Rpb25zL0Fib3V0XCI7XG4gICAgIDZcdGltcG9ydCBDVEEgZnJvbSBcIkAvY29tcG9uZW50cy9zZWN0aW9ucy9DVEFcIjtcbiAgICAgN1x0aW1wb3J0IEZvb3RlciBmcm9tIFwiQC9jb21wb25lbnRzL3NlY3Rpb25zL0Zvb3RlclwiO1xuICAgICA4XHRcbiAgICAgOVx0ZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSG9tZSgpIHtcbiAgICAxMFx0ICByZXR1cm4gKFxuICAgIDExXHQgICAgPG1haW4gY2xhc3NOYW1lPVwibWluLWgtc2NyZWVuXCI+XG4gICAgMTJcdCAgICAgIDxIZXJvIC8+XG4gICAgMTNcdCAgICAgIDxJbmR1c3RyaWVzIC8+XG4gICAgMTRcdCAgICAgIDxTZXJ2aWNlcyAvPlxuICAgIDE1XHQgICAgICA8UG9ydGZvbGlvIC8+XG4gICAgMTZcdCAgICAgIDxBYm91dCAvPlxuICAgIDE3XHQgICAgICA8Q1RBIC8+XG4gICAgMThcdCAgICAgIDxGb290ZXIgLz5cbiAgICAxOVx0ICAgIDwvbWFpbj5cbiAgICAyMFx0ICApO1xuICAgIDIxXHR9XG4uLi5cblBhdGg6IHNyYy9jb21wb25lbnRzL3VpL0J1dHRvbi50c3hcbiAgICAgMVx0XCJ1c2UgY2xpZW50XCI7XG4gICAgIDJcdFxuICAgICAzXHRpbXBvcnQgeyBtb3Rpb24gfSBmcm9tIFwiZnJhbWVyLW1vdGlvblwiO1xuICAgICA0XHRpbXBvcnQgeyBmb3J3YXJkUmVmIH0gZnJvbSBcInJlYWN0XCI7XG4gICAgIDVcdGltcG9ydCB7IGNuIH0gZnJvbSBcIkAvbGliL3V0aWxzXCI7XG4gICAgIDZcdFxuICAgICA3XHRpbnRlcmZhY2UgQnV0dG9uUHJvcHMgZXh0ZW5kcyBSZWFjdC5CdXR0b25IVE1MQXR0cmlidXRlczxIVE1MQnV0dG9uRWxlbWVudD4ge1xuICAgICA4XHQgIHZhcmlhbnQ/OiBcInByaW1hcnlcIiB8IFwic2Vjb25kYXJ5XCIgfCBcIm91dGxpbmVcIiB8IFwiZ2hvc3RcIjtcbiAgICAgOVx0ICBzaXplPzogXCJzbVwiIHwgXCJtZFwiIHwgXCJsZ1wiO1xuICAgIDEwXHQgIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGU7XG4gICAgMTFcdCAgaHJlZj86IHN0cmluZztcbiAgICAxMlx0ICBleHRlcm5hbD86IGJvb2xlYW47XG4gICAgMTNcdH1cbiAgICAxNFx0XG4gICAgMTVcdGNvbnN0IEJ1dHRvbiA9IGZvcndhcmRSZWY8SFRNTEJ1dHRvbkVsZW1lbnQsIEJ1dHRvblByb3BzPihcbiAgICAxNlx0ICAoeyBjbGFzc05hbWUsIHZhcmlhbnQgPSBcInByaW1hcnlcIiwgc2l6ZSA9IFwibWRcIiwgY2hpbGRyZW4sIGhyZWYsIGV4dGVybmFsLCAuLi5wcm9wcyB9LCByZWYpID0+IHtcbiAgICAxN1x0ICAgIGNvbnN0IGJhc2VDbGFzc2VzID0gXCJpbmxpbmUtZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgcm91bmRlZC1sZyBmb250LW1lZGl1bSB0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi0yMDAgZm9jdXMtdmlzaWJsZTpvdXRsaW5lLW5vbmUgZm9jdXMtdmlzaWJsZTpyaW5nLTIgZm9jdXMtdmlzaWJsZTpyaW5nLWJsdWUtNTAwIGZvY3VzLXZpc2libGU6cmluZy1vZmZzZXQtMiBkaXNhYmxlZDpwb2ludGVyLWV2ZW50cy1ub25lIGRpc2FibGVkOm9wYWNpdHktNTBcIjtcbiAgICAxOFx0XG4gICAgMTlcdCAgICBjb25zdCB2YXJpYW50cyA9IHtcbiAgICAyMFx0ICAgICAgcHJpbWFyeTogXCJiZy1bdmFyKC0tcHJpbWFyeSldIHRleHQtd2hpdGUgaG92ZXI6YmctW3ZhcigtLXByaW1hcnktZGFyayldIHNoYWRvdy1sZyBob3ZlcjpzaGFkb3cteGxcIixcbiAgICAyMVx0ICAgICAgc2Vjb25kYXJ5OiBcImJnLVt2YXIoLS1zZWNvbmRhcnkpXSB0ZXh0LXdoaXRlIGhvdmVyOmJnLVt2YXIoLS1zZWNvbmRhcnktZGFyayldIHNoYWRvdy1sZyBob3ZlcjpzaGFkb3cteGxcIixcbiAgICAyMlx0ICAgICAgb3V0bGluZTogXCJib3JkZXItMiBib3JkZXItW3ZhcigtLXByaW1hcnkpXSB0ZXh0LVt2YXIoLS1wcmltYXJ5KV0gaG92ZXI6YmctW3ZhcigtLXByaW1hcnkpXSBob3Zlcjp0ZXh0LXdoaXRlXCIsXG4gICAgMjNcdCAgICAgIGdob3N0OiBcInRleHQtW3ZhcigtLW5ldXRyYWwtNzAwKV0gaG92ZXI6YmctW3ZhcigtLW5ldXRyYWwtMTAwKV0gaG92ZXI6dGV4dC1bdmFyKC0tbmV1dHJhbC05MDApXVwiLFxuICAgIDI0XHQgICAgfTtcbiAgICAyNVx0XG4gICAgMjZcdCAgICBjb25zdCBzaXplcyA9IHtcbiAgICAyN1x0ICAgICAgc206IFwiaC05IHB4LTQgdGV4dC1zbVwiLFxuICAgIDI4XHQgICAgICBtZDogXCJoLTExIHB4LTYgdGV4dC1iYXNlXCIsXG4gICAgMjlcdCAgICAgIGxnOiBcImgtMTQgcHgtOCB0ZXh0LWxnXCIsXG4gICAgMzBcdCAgICB9O1xuICAgIDMxXHRcbiAgICAzMlx0ICAgIGNvbnN0IGNsYXNzZXMgPSBjbihiYXNlQ2xhc3NlcywgdmFyaWFudHNbdmFyaWFudF0sIHNpemVzW3NpemVdLCBjbGFzc05hbWUpO1xuICAgIDMzXHRcbiAgICAzNFx0ICAgIGNvbnN0IE1vdGlvbkJ1dHRvbiA9IG1vdGlvbi5idXR0b247XG4gICAgMzVcdFxuICAgIDM2XHQgICAgaWYgKGhyZWYpIHtcbiAgICAzN1x0ICAgICAgcmV0dXJuIChcbiAgICAzOFx0ICAgICAgICA8bW90aW9uLmFcbiAgICAzOVx0ICAgICAgICAgIGhyZWY9e2hyZWZ9XG4gICAgNDBcdCAgICAgICAgICB0YXJnZXQ9e2V4dGVybmFsID8gXCJfYmxhbmtcIiA6IHVuZGVmaW5lZH1cbiAgICA0MVx0ICAgICAgICAgIHJlbD17ZXh0ZXJuYWwgPyBcIm5vb3BlbmVyIG5vcmVmZXJyZXJcIiA6IHVuZGVmaW5lZH1cbiAgICA0Mlx0ICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlc31cbiAgICA0M1x0ICAgICAgICAgIHdoaWxlSG92ZXI9e3sgc2NhbGU6IDEuMDIgfX1cbiAgICA0NFx0ICAgICAgICAgIHdoaWxlVGFwPXt7IHNjYWxlOiAwLjk4IH19XG4gICAgNDVcdCAgICAgICAgICB0cmFuc2l0aW9uPXt7IHR5cGU6IFwic3ByaW5nXCIsIHN0aWZmbmVzczogNDAwLCBkYW1waW5nOiAxNyB9fVxuICAgIDQ2XHQgICAgICAgID5cbiAgICA0N1x0ICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICA0OFx0ICAgICAgICA8L21vdGlvbi5hPlxuICAgIDQ5XHQgICAgICApO1xuICAgIDUwXHQgICAgfVxuICAgIDUxXHRcbiAgICA1Mlx0ICAgIHJldHVybiAoXG4gICAgNTNcdCAgICAgIDxNb3Rpb25CdXR0b25cbiAgICA1NFx0ICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXN9XG4gICAgNTVcdCAgICAgICAgcmVmPXtyZWZ9XG4gICAgNTZcdCAgICAgICAgd2hpbGVIb3Zlcj17eyBzY2FsZTogMS4wMiB9fVxuICAgIDU3XHQgICAgICAgIHdoaWxlVGFwPXt7IHNjYWxlOiAwLjk4IH19XG4gICAgNThcdCAgICAgICAgdHJhbnNpdGlvbj17eyB0eXBlOiBcInNwcmluZ1wiLCBzdGlmZm5lc3M6IDQwMCwgZGFtcGluZzogMTcgfX1cbiAgICA1OVx0ICAgICAgICB7Li4ucHJvcHN9XG4gICAgNjBcdCAgICAgID5cbiAgICA2MVx0ICAgICAgICB7Y2hpbGRyZW59XG4gICAgNjJcdCAgICAgIDwvTW90aW9uQnV0dG9uPlxuICAgIDYzXHQgICAgKTtcbiAgICA2NFx0ICB9XG4gICAgNjVcdCk7XG4gICAgNjZcdFxuICAgIDY3XHRCdXR0b24uZGlzcGxheU5hbWUgPSBcIkJ1dHRvblwiO1xuICAgIDY4XHRcbiAgICA2OVx0ZXhwb3J0IHsgQnV0dG9uIH07XG4uLi5cblBhdGg6IHNyYy9saWIvdXRpbHMudHNcbiAgICAgMVx0aW1wb3J0IHsgdHlwZSBDbGFzc1ZhbHVlLCBjbHN4IH0gZnJvbSBcImNsc3hcIjtcbiAgICAgMlx0aW1wb3J0IHsgdHdNZXJnZSB9IGZyb20gXCJ0YWlsd2luZC1tZXJnZVwiO1xuICAgICAzXHRcbiAgICAgNFx0ZXhwb3J0IGZ1bmN0aW9uIGNuKC4uLmlucHV0czogQ2xhc3NWYWx1ZVtdKSB7XG4gICAgIDVcdCAgcmV0dXJuIHR3TWVyZ2UoY2xzeChpbnB1dHMpKTtcbiAgICAgNlx0fVxuLi4uXG5QYXRoOiBzcmMvY29tcG9uZW50cy9zZWN0aW9ucy9JbmR1c3RyaWVzLnRzeFxuLi4uXG4gICAgIDVcdFxuICAgICA2XHRjb25zdCBpbmR1c3RyaWVzID0gW1xuICAgICA3XHQgIHtcbiAgICAgOFx0ICAgIGljb246IEJ1aWxkaW5nMixcbiAgICAgOVx0ICAgIHRpdGxlOiBcIlJlYWwgRXN0YXRlXCIsXG4gICAgMTBcdCAgICBkZXNjcmlwdGlvbjogXCJTaG93Y2FzZSBwcm9wZXJ0aWVzIHdpdGggc3R1bm5pbmcgdmlzdWFscyBhbmQgbGVhZC1nZW5lcmF0aW5nIHdlYnNpdGVzXCIsXG4gICAgMTFcdCAgICBjb2xvcjogXCJ2YXIoLS1wcmltYXJ5KVwiXG4gICAgMTJcdCAgfSxcbiAgICAxM1x0ICB7XG4gICAgMTRcdCAgICBpY29uOiBTaG9wcGluZ0NhcnQsXG4gICAgMTVcdCAgICB0aXRsZTogXCJFLWNvbW1lcmNlXCIsXG4gICAgMTZcdCAgICBkZXNjcmlwdGlvbjogXCJDb252ZXJ0IHZpc2l0b3JzIGludG8gY3VzdG9tZXJzIHdpdGggb3B0aW1pemVkIG9ubGluZSBzdG9yZXNcIixcbiAgICAxN1x0ICAgIGNvbG9yOiBcInZhcigtLXNlY29uZGFyeSlcIlxuICAgIDE4XHQgIH0sXG4gICAgMTlcdCAge1xuICAgIDIwXHQgICAgaWNvbjogSGVhcnQsXG4gICAgMjFcdCAgICB0aXRsZTogXCJIZWFsdGggJiBXZWxsbmVzc1wiLFxuICAgIDIyXHQgICAgZGVzY3JpcHRpb246IFwiQnVpbGQgdHJ1c3QgYW5kIGF0dHJhY3QgY2xpZW50cyB3aXRoIHByb2Zlc3Npb25hbCBoZWFsdGhjYXJlIHdlYnNpdGVzXCIsXG4gICAgMjNcdCAgICBjb2xvcjogXCJ2YXIoLS1hY2NlbnQpXCJcbiAgICAyNFx0ICB9LFxuICAgIDI1XHQgIHtcbiAgICAyNlx0ICAgIGljb246IFBsYW5lLFxuICAgIDI3XHQgICAgdGl0bGU6IFwiVG91cmlzbVwiLFxuICAgIDI4XHQgICAgZGVzY3JpcHRpb246IFwiSW5zcGlyZSB0cmF2ZWxlcnMgd2l0aCBpbW1lcnNpdmUgYm9va2luZyBleHBlcmllbmNlc1wiLFxuICAgIDI5XHQgICAgY29sb3I6IFwidmFyKC0tcHJpbWFyeSlcIlxuICAgIDMwXHQgIH0sXG4gICAgMzFcdCAge1xuICAgIDMyXHQgICAgaWNvbjogVHJlbmRpbmdVcCxcbiAgICAzM1x0ICAgIHRpdGxlOiBcIkZpbnRlY2hcIixcbiAgICAzNFx0ICAgIGRlc2NyaXB0aW9uOiBcIlNlY3VyZSwgY29tcGxpYW50IHBsYXRmb3JtcyB0aGF0IGJ1aWxkIGZpbmFuY2lhbCBjb25maWRlbmNlXCIsXG4gICAgMzVcdCAgICBjb2xvcjogXCJ2YXIoLS1zZWNvbmRhcnkpXCJcbiAgICAzNlx0ICB9XG4gICAgMzdcdF07XG4uLi5cbiAgICA2MFx0XG4gICAgNjFcdGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEluZHVzdHJpZXMoKSB7XG4gICAgNjJcdCAgcmV0dXJuIChcbiAgICA2M1x0ICAgIDxzZWN0aW9uIGlkPVwiaW5kdXN0cmllc1wiIGNsYXNzTmFtZT1cInB5LTIwIGxnOnB5LTMyIGJnLXdoaXRlXCI+XG4gICAgNjRcdCAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyIG14LWF1dG8gcHgtNCBzbTpweC02IGxnOnB4LThcIj5cbiAgICA2NVx0ICAgICAgICB7LyogU2VjdGlvbiBIZWFkZXIgKi99XG4gICAgNjZcdCAgICAgICAgPG1vdGlvbi5kaXZcbiAgICA2N1x0ICAgICAgICAgIGluaXRpYWw9e3sgb3BhY2l0eTogMCwgeTogMzAgfX1cbiAgICA2OFx0ICAgICAgICAgIHdoaWxlSW5WaWV3PXt7IG9wYWNpdHk6IDEsIHk6IDAgfX1cbiAgICA2OVx0ICAgICAgICAgIHZpZXdwb3J0PXt7IG9uY2U6IHRydWUgfX1cbiAgICA3MFx0ICAgICAgICAgIHRyYW5zaXRpb249e3sgZHVyYXRpb246IDAuOCB9fVxuICAgIDcxXHQgICAgICAgICAgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXIgbWItMTZcIlxuICAgIDcyXHQgICAgICAgID5cbiAgICA3M1x0ICAgICAgICAgIDxoMiBjbGFzc05hbWU9XCJ0ZXh0LTN4bCBzbTp0ZXh0LTR4bCBsZzp0ZXh0LTV4bCBmb250LWJvbGQgdGV4dC1bdmFyKC0tbmV1dHJhbC05MDApXSBtYi02XCI+XG4gICAgNzRcdCAgICAgICAgICAgIEluZHVzdHJpZXMgV2VcbiAgICA3NVx0ICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiYmxvY2sgYmctZ3JhZGllbnQtdG8tciBmcm9tLVt2YXIoLS1wcmltYXJ5KV0gdG8tW3ZhcigtLXNlY29uZGFyeSldIGJnLWNsaXAtdGV4dCB0ZXh0LXRyYW5zcGFyZW50XCI+XG4gICAgNzZcdCAgICAgICAgICAgICAgU3BlY2lhbGl6ZSBJblxuICAgIDc3XHQgICAgICAgICAgICA8L3NwYW4+XG4gICAgNzhcdCAgICAgICAgICA8L2gyPlxuICAgIDc5XHQgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1sZyBzbTp0ZXh0LXhsIHRleHQtW3ZhcigtLW5ldXRyYWwtNjAwKV0gbWF4LXctM3hsIG14LWF1dG9cIj5cbiAgICA4MFx0ICAgICAgICAgICAgV2UgdW5kZXJzdGFuZCB0aGUgdW5pcXVlIGNoYWxsZW5nZXMgYW5kIG9wcG9ydHVuaXRpZXMgaW4gRHViYWkncyBtb3N0IGR5bmFtaWMgc2VjdG9yc1xuICAgIDgxXHQgICAgICAgICAgPC9wPlxuICAgIDgyXHQgICAgICAgIDwvbW90aW9uLmRpdj5cbiAgICA4M1x0XG4gICAgODRcdCAgICAgICAgey8qIEluZHVzdHJpZXMgR3JpZCAqL31cbiAgICA4NVx0ICAgICAgICA8bW90aW9uLmRpdlxuICAgIDg2XHQgICAgICAgICAgdmFyaWFudHM9e2NvbnRhaW5lclZhcmlhbnRzfVxuICAgIDg3XHQgICAgICAgICAgaW5pdGlhbD1cImhpZGRlblwiXG4gICAgODhcdCAgICAgICAgICB3aGlsZUluVmlldz1cInZpc2libGVcIlxuICAgIDg5XHQgICAgICAgICAgdmlld3BvcnQ9e3sgb25jZTogdHJ1ZSB9fVxuICAgIDkwXHQgICAgICAgICAgY2xhc3NOYW1lPVwiZ3JpZCBncmlkLWNvbHMtMSBtZDpncmlkLWNvbHMtMiBsZzpncmlkLWNvbHMtMyB4bDpncmlkLWNvbHMtNSBnYXAtNiBsZzpnYXAtOFwiXG4gICAgOTFcdCAgICAgICAgPlxuICAgIDkyXHQgICAgICAgICAge2luZHVzdHJpZXMubWFwKChpbmR1c3RyeSwgaW5kZXgpID0+IHtcbiAgICA5M1x0ICAgICAgICAgICAgY29uc3QgSWNvbiA9IGluZHVzdHJ5Lmljb247XG4gICAgOTRcdCAgICAgICAgICAgIHJldHVybiAoXG4gICAgOTVcdCAgICAgICAgICAgICAgPG1vdGlvbi5kaXZcbiAgICA5Nlx0ICAgICAgICAgICAgICAgIGtleT17aW5kdXN0cnkudGl0bGV9XG4gICAgOTdcdCAgICAgICAgICAgICAgICB2YXJpYW50cz17aXRlbVZhcmlhbnRzfVxuICAgIDk4XHQgICAgICAgICAgICAgICAgd2hpbGVIb3Zlcj17eyBcbiAgICA5OVx0ICAgICAgICAgICAgICAgICAgeTogLTgsXG4gICAxMDBcdCAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IHsgZHVyYXRpb246IDAuMyB9XG4gICAxMDFcdCAgICAgICAgICAgICAgICB9fVxuICAgMTAyXHQgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZ3JvdXAgcmVsYXRpdmVcIlxuICAgMTAzXHQgICAgICAgICAgICAgID5cbiAgIDEwNFx0ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmctd2hpdGUgcm91bmRlZC0yeGwgcC02IGxnOnAtOCBzaGFkb3ctbGcgaG92ZXI6c2hhZG93LTJ4bCB0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi0zMDAgYm9yZGVyIGJvcmRlci1bdmFyKC0tbmV1dHJhbC0yMDApXSBob3Zlcjpib3JkZXItW3ZhcigtLXByaW1hcnkpXS8yMCBoLWZ1bGxcIj5cbiAgIDEwNVx0ICAgICAgICAgICAgICAgICAgey8qIEljb24gKi99XG4gICAxMDZcdCAgICAgICAgICAgICAgICAgIDxkaXYgXG4gICAxMDdcdCAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidy0xNiBoLTE2IHJvdW5kZWQteGwgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgbWItNiBncm91cC1ob3ZlcjpzY2FsZS0xMTAgdHJhbnNpdGlvbi10cmFuc2Zvcm0gZHVyYXRpb24tMzAwXCJcbiAgIDEwOFx0ICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyBiYWNrZ3JvdW5kQ29sb3I6IGAke2luZHVzdHJ5LmNvbG9yfTE1YCB9fVxuICAgMTA5XHQgICAgICAgICAgICAgICAgICA+XG4gICAxMTBcdCAgICAgICAgICAgICAgICAgICAgPEljb24gXG4gICAxMTFcdCAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ3LTggaC04IHRyYW5zaXRpb24tY29sb3JzIGR1cmF0aW9uLTMwMFwiXG4gICAxMTJcdCAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyBjb2xvcjogaW5kdXN0cnkuY29sb3IgfX1cbiAgIDExM1x0ICAgICAgICAgICAgICAgICAgICAvPlxuICAgMTE0XHQgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgIDExNVx0XG4gICAxMTZcdCAgICAgICAgICAgICAgICAgIHsvKiBDb250ZW50ICovfVxuICAgMTE3XHQgICAgICAgICAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwidGV4dC14bCBmb250LWJvbGQgdGV4dC1bdmFyKC0tbmV1dHJhbC05MDApXSBtYi0zIGdyb3VwLWhvdmVyOnRleHQtW3ZhcigtLXByaW1hcnkpXSB0cmFuc2l0aW9uLWNvbG9ycyBkdXJhdGlvbi0zMDBcIj5cbiAgIDExOFx0ICAgICAgICAgICAgICAgICAgICB7aW5kdXN0cnkudGl0bGV9XG4gICAxMTlcdCAgICAgICAgICAgICAgICAgIDwvaDM+XG4gICAxMjBcdCAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtW3ZhcigtLW5ldXRyYWwtNjAwKV0gbGVhZGluZy1yZWxheGVkXCI+XG4gICAxMjFcdCAgICAgICAgICAgICAgICAgICAge2luZHVzdHJ5LmRlc2NyaXB0aW9ufVxuICAgMTIyXHQgICAgICAgICAgICAgICAgICA8L3A+XG4uLi5cbiAgIDEzMVx0XG4gICAxMzJcdCAgICAgICAgey8qIEJvdHRvbSBDVEEgKi99XG4gICAxMzNcdCAgICAgICAgPG1vdGlvbi5kaXZcbiAgIDEzNFx0ICAgICAgICAgIGluaXRpYWw9e3sgb3BhY2l0eTogMCwgeTogMzAgfX1cbiAgIDEzNVx0ICAgICAgICAgIHdoaWxlSW5WaWV3PXt7IG9wYWNpdHk6IDEsIHk6IDAgfX1cbiAgIDEzNlx0ICAgICAgICAgIHZpZXdwb3J0PXt7IG9uY2U6IHRydWUgfX1cbiAgIDEzN1x0ICAgICAgICAgIHRyYW5zaXRpb249e3sgZHVyYXRpb246IDAuOCwgZGVsYXk6IDAuMyB9fVxuICAgMTM4XHQgICAgICAgICAgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXIgbXQtMTZcIlxuICAgMTM5XHQgICAgICAgID5cbiAgIDE0MFx0ICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtW3ZhcigtLW5ldXRyYWwtNjAwKV0gbWItNlwiPlxuICAgMTQxXHQgICAgICAgICAgICBEb24ndCBzZWUgeW91ciBpbmR1c3RyeT8gV2Ugd29yayB3aXRoIGJ1c2luZXNzZXMgYWNyb3NzIGFsbCBzZWN0b3JzLlxuICAgMTQyXHQgICAgICAgICAgPC9wPlxuICAgMTQzXHQgICAgICAgICAgPG1vdGlvbi5hXG4gICAxNDRcdCAgICAgICAgICAgIGhyZWY9XCIjY29udGFjdFwiXG4gICAxNDVcdCAgICAgICAgICAgIHdoaWxlSG92ZXI9e3sgc2NhbGU6IDEuMDUgfX1cbiAgIDE0Nlx0ICAgICAgICAgICAgd2hpbGVUYXA9e3sgc2NhbGU6IDAuOTUgfX1cbiAgIDE0N1x0ICAgICAgICAgICAgY2xhc3NOYW1lPVwiaW5saW5lLWZsZXggaXRlbXMtY2VudGVyIHRleHQtW3ZhcigtLXByaW1hcnkpXSBmb250LXNlbWlib2xkIGhvdmVyOnRleHQtWy4uLiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sImEzNDA3NTBkLTVmODUtNDUwMS04MjE4LTdmYTE2ZjFiODZkMTt0b29sdV8wMVNGN3F2ZWpDeEVGd1o3OWl0N05IOHoiOnsicmVxdWVzdElkIjoiYTM0MDc1MGQtNWY4NS00NTAxLTgyMTgtN2ZhMTZmMWI4NmQxIiwidG9vbFVzZUlkIjoidG9vbHVfMDFTRjdxdmVqQ3hFRndaNzlpdDdOSDh6IiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogc3JjL2NvbXBvbmVudHMvc2VjdGlvbnMvQWJvdXQudHN4XG4gICAgIDFcdFwidXNlIGNsaWVudFwiO1xuICAgICAyXHRcbiAgICAgM1x0aW1wb3J0IHsgbW90aW9uIH0gZnJvbSBcImZyYW1lci1tb3Rpb25cIjtcbiAgICAgNFx0aW1wb3J0IHsgQnV0dG9uIH0gZnJvbSBcIkAvY29tcG9uZW50cy91aS9CdXR0b25cIjtcbiAgICAgNVx0aW1wb3J0IHsgQXJyb3dSaWdodCwgVXNlcnMsIEF3YXJkLCBDbG9jaywgVGFyZ2V0IH0gZnJvbSBcImx1Y2lkZS1yZWFjdFwiO1xuICAgICA2XHRcbiAgICAgN1x0Y29uc3Qgc3RhdHMgPSBbXG4gICAgIDhcdCAge1xuICAgICA5XHQgICAgaWNvbjogVXNlcnMsXG4gICAgMTBcdCAgICBudW1iZXI6IFwiNTArXCIsXG4gICAgMTFcdCAgICBsYWJlbDogXCJQcm9qZWN0cyBEZWxpdmVyZWRcIixcbiAgICAxMlx0ICAgIGNvbG9yOiBcInZhcigtLXByaW1hcnkpXCJcbiAgICAxM1x0ICB9LFxuICAgIDE0XHQgIHtcbiAgICAxNVx0ICAgIGljb246IEF3YXJkLFxuICAgIDE2XHQgICAgbnVtYmVyOiBcIjEwMCVcIixcbiAgICAxN1x0ICAgIGxhYmVsOiBcIkNsaWVudCBTYXRpc2ZhY3Rpb25cIixcbiAgICAxOFx0ICAgIGNvbG9yOiBcInZhcigtLXNlY29uZGFyeSlcIlxuICAgIDE5XHQgIH0sXG4gICAgMjBcdCAge1xuICAgIDIxXHQgICAgaWNvbjogQ2xvY2ssXG4gICAgMjJcdCAgICBudW1iZXI6IFwiMjQvN1wiLFxuICAgIDIzXHQgICAgbGFiZWw6IFwiU3VwcG9ydCBBdmFpbGFibGVcIixcbiAgICAyNFx0ICAgIGNvbG9yOiBcInZhcigtLWFjY2VudClcIlxuICAgIDI1XHQgIH0sXG4gICAgMjZcdCAge1xuICAgIDI3XHQgICAgaWNvbjogVGFyZ2V0LFxuICAgIDI4XHQgICAgbnVtYmVyOiBcIjUrXCIsXG4gICAgMjlcdCAgICBsYWJlbDogXCJJbmR1c3RyaWVzIFNlcnZlZFwiLFxuICAgIDMwXHQgICAgY29sb3I6IFwidmFyKC0tcHJpbWFyeSlcIlxuICAgIDMxXHQgIH1cbiAgICAzMlx0XTtcbiAgICAzM1x0XG4gICAgMzRcdGNvbnN0IGNvbnRhaW5lclZhcmlhbnRzID0ge1xuICAgIDM1XHQgIGhpZGRlbjogeyBvcGFjaXR5OiAwIH0sXG4gICAgMzZcdCAgdmlzaWJsZToge1xuICAgIDM3XHQgICAgb3BhY2l0eTogMSxcbiAgICAzOFx0ICAgIHRyYW5zaXRpb246IHtcbiAgICAzOVx0ICAgICAgc3RhZ2dlckNoaWxkcmVuOiAwLjJcbiAgICA0MFx0ICAgIH1cbiAgICA0MVx0ICB9XG4gICAgNDJcdH07XG4uLi5cbiAgICA1NVx0XG4gICAgNTZcdGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEFib3V0KCkge1xuICAgIDU3XHQgIHJldHVybiAoXG4gICAgNThcdCAgICA8c2VjdGlvbiBpZD1cImFib3V0XCIgY2xhc3NOYW1lPVwicHktMjAgbGc6cHktMzIgYmctZ3JhZGllbnQtdG8tYnIgZnJvbS1bdmFyKC0tbmV1dHJhbC01MCldIHRvLXdoaXRlXCI+XG4gICAgNTlcdCAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyIG14LWF1dG8gcHgtNCBzbTpweC02IGxnOnB4LThcIj5cbiAgICA2MFx0ICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdyaWQgZ3JpZC1jb2xzLTEgbGc6Z3JpZC1jb2xzLTIgZ2FwLTEyIGxnOmdhcC0xNiBpdGVtcy1jZW50ZXJcIj5cbiAgICA2MVx0ICAgICAgICAgIHsvKiBDb250ZW50ICovfVxuICAgIDYyXHQgICAgICAgICAgPG1vdGlvbi5kaXZcbiAgICA2M1x0ICAgICAgICAgICAgaW5pdGlhbD17eyBvcGFjaXR5OiAwLCB4OiAtNTAgfX1cbiAgICA2NFx0ICAgICAgICAgICAgd2hpbGVJblZpZXc9e3sgb3BhY2l0eTogMSwgeDogMCB9fVxuICAgIDY1XHQgICAgICAgICAgICB2aWV3cG9ydD17eyBvbmNlOiB0cnVlIH19XG4gICAgNjZcdCAgICAgICAgICAgIHRyYW5zaXRpb249e3sgZHVyYXRpb246IDAuOCB9fVxuICAgIDY3XHQgICAgICAgICAgPlxuICAgIDY4XHQgICAgICAgICAgICA8aDIgY2xhc3NOYW1lPVwidGV4dC0zeGwgc206dGV4dC00eGwgbGc6dGV4dC01eGwgZm9udC1ib2xkIHRleHQtW3ZhcigtLW5ldXRyYWwtOTAwKV0gbWItNlwiPlxuICAgIDY5XHQgICAgICAgICAgICAgIEFib3V0XG4gICAgNzBcdCAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiYmxvY2sgYmctZ3JhZGllbnQtdG8tciBmcm9tLVt2YXIoLS1wcmltYXJ5KV0gdG8tW3ZhcigtLXNlY29uZGFyeSldIGJnLWNsaXAtdGV4dCB0ZXh0LXRyYW5zcGFyZW50XCI+XG4gICAgNzFcdCAgICAgICAgICAgICAgICBBcmFiaXRlcyBBZ2VuY3lcbiAgICA3Mlx0ICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgNzNcdCAgICAgICAgICAgIDwvaDI+XG4gICAgNzRcdCAgICAgICAgICAgIFxuICAgIDc1XHQgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNwYWNlLXktNiB0ZXh0LWxnIHRleHQtW3ZhcigtLW5ldXRyYWwtNjAwKV0gbGVhZGluZy1yZWxheGVkXCI+XG4gICAgNzZcdCAgICAgICAgICAgICAgPHA+XG4gICAgNzdcdCAgICAgICAgICAgICAgICBXZSdyZSBhIHBhc3Npb25hdGUgdGVhbSBvZiBkaWdpdGFsIGlubm92YXRvcnMgYmFzZWQgaW4gRHViYWksIGRlZGljYXRlZCB0byBoZWxwaW5nIFxuICAgIDc4XHQgICAgICAgICAgICAgICAgYnVzaW5lc3NlcyB0aHJpdmUgaW4gdGhlIGRpZ2l0YWwgbGFuZHNjYXBlLiBPdXIgZXhwZXJ0aXNlIHNwYW5zIGFjcm9zcyB3ZWIgZGV2ZWxvcG1lbnQsIFxuICAgIDc5XHQgICAgICAgICAgICAgICAgbW9iaWxlIGFwcGxpY2F0aW9ucywgYW5kIGN1c3RvbSBzb2Z0d2FyZSBzb2x1dGlvbnMuXG4gICAgODBcdCAgICAgICAgICAgICAgPC9wPlxuICAgIDgxXHQgICAgICAgICAgICAgIFxuICAgIDgyXHQgICAgICAgICAgICAgIDxwPlxuICAgIDgzXHQgICAgICAgICAgICAgICAgV2hhdCBzZXRzIHVzIGFwYXJ0IGlzIG91ciBkZWVwIHVuZGVyc3RhbmRpbmcgb2YgRHViYWkncyB1bmlxdWUgYnVzaW5lc3MgZW52aXJvbm1lbnQgXG4gICAgODRcdCAgICAgICAgICAgICAgICBhbmQgb3VyIGNvbW1pdG1lbnQgdG8gZGVsaXZlcmluZyBzb2x1dGlvbnMgdGhhdCBub3Qgb25seSBsb29rIHN0dW5uaW5nIGJ1dCBkcml2ZSBcbiAgICA4NVx0ICAgICAgICAgICAgICAgIHJlYWwgYnVzaW5lc3MgcmVzdWx0cy5cbiAgICA4Nlx0ICAgICAgICAgICAgICA8L3A+XG4gICAgODdcdCAgICAgICAgICAgICAgXG4gICAgODhcdCAgICAgICAgICAgICAgPHA+XG4gICAgODlcdCAgICAgICAgICAgICAgICBGcm9tIHN0YXJ0dXBzIHRvIGVzdGFibGlzaGVkIGVudGVycHJpc2VzLCB3ZSd2ZSBoZWxwZWQgYnVzaW5lc3NlcyBhY3Jvc3MgcmVhbCBlc3RhdGUsIFxuICAgIDkwXHQgICAgICAgICAgICAgICAgZS1jb21tZXJjZSwgd2VsbG5lc3MsIHRvdXJpc20sIGFuZCBmaW50ZWNoIHNlY3RvcnMgdHJhbnNmb3JtIHRoZWlyIGRpZ2l0YWwgcHJlc2VuY2UgXG4gICAgOTFcdCAgICAgICAgICAgICAgICBhbmQgYWNoaWV2ZSB0aGVpciBncm93dGggb2JqZWN0aXZlcy5cbiAgICA5Mlx0ICAgICAgICAgICAgICA8L3A+XG4gICAgOTNcdCAgICAgICAgICAgIDwvZGl2PlxuICAgIDk0XHRcbiAgICA5NVx0ICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtdC04XCI+XG4gICAgOTZcdCAgICAgICAgICAgICAgPEJ1dHRvblxuICAgIDk3XHQgICAgICAgICAgICAgICAgc2l6ZT1cImxnXCJcbiAgICA5OFx0ICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJwcmltYXJ5XCJcbiAgICA5OVx0ICAgICAgICAgICAgICAgIGhyZWY9XCIvYWJvdXRcIlxuICAgMTAwXHQgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZ3JvdXBcIlxuICAgMTAxXHQgICAgICAgICAgICAgID5cbiAgIDEwMlx0ICAgICAgICAgICAgICAgIExlYXJuIE1vcmUgQWJvdXQgVXNcbiAgIDEwM1x0ICAgICAgICAgICAgICAgIDxBcnJvd1JpZ2h0IGNsYXNzTmFtZT1cIm1sLTIgaC01IHctNSB0cmFuc2l0aW9uLXRyYW5zZm9ybSBncm91cC1ob3Zlcjp0cmFuc2xhdGUteC0xXCIgLz5cbiAgIDEwNFx0ICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgIDEwNVx0ICAgICAgICAgICAgPC9kaXY+XG4gICAxMDZcdCAgICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAxMDdcdFxuICAgMTA4XHQgICAgICAgICAgey8qIFN0YXRzIEdyaWQgKi99XG4gICAxMDlcdCAgICAgICAgICA8bW90aW9uLmRpdlxuICAgMTEwXHQgICAgICAgICAgICB2YXJpYW50cz17Y29udGFpbmVyVmFyaWFudHN9XG4gICAxMTFcdCAgICAgICAgICAgIGluaXRpYWw9XCJoaWRkZW5cIlxuICAgMTEyXHQgICAgICAgICAgICB3aGlsZUluVmlldz1cInZpc2libGVcIlxuICAgMTEzXHQgICAgICAgICAgICB2aWV3cG9ydD17eyBvbmNlOiB0cnVlIH19XG4gICAxMTRcdCAgICAgICAgICAgIGNsYXNzTmFtZT1cImdyaWQgZ3JpZC1jb2xzLTIgZ2FwLTZcIlxuICAgMTE1XHQgICAgICAgICAgPlxuICAgMTE2XHQgICAgICAgICAgICB7c3RhdHMubWFwKChzdGF0LCBpbmRleCkgPT4ge1xuICAgMTE3XHQgICAgICAgICAgICAgIGNvbnN0IEljb24gPSBzdGF0Lmljb247XG4gICAxMThcdCAgICAgICAgICAgICAgcmV0dXJuIChcbiAgIDExOVx0ICAgICAgICAgICAgICAgIDxtb3Rpb24uZGl2XG4gICAxMjBcdCAgICAgICAgICAgICAgICAgIGtleT17c3RhdC5sYWJlbH1cbiAgIDEyMVx0ICAgICAgICAgICAgICAgICAgdmFyaWFudHM9e2l0ZW1WYXJpYW50c31cbiAgIDEyMlx0ICAgICAgICAgICAgICAgICAgd2hpbGVIb3Zlcj17eyBcbiAgIDEyM1x0ICAgICAgICAgICAgICAgICAgICBzY2FsZTogMS4wNSxcbiAgIDEyNFx0ICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiB7IGR1cmF0aW9uOiAwLjIgfVxuICAgMTI1XHQgICAgICAgICAgICAgICAgICB9fVxuLi4uXG4gICAxNTJcdFxuICAgMTUzXHQgICAgICAgICAgICAgICAgICAgIHsvKiBIb3ZlciBFZmZlY3QgKi99XG4gICAxNTRcdCAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhYnNvbHV0ZSBpbnNldC0wIHJvdW5kZWQtMnhsIGJnLWdyYWRpZW50LXRvLWJyIGZyb20tW3ZhcigtLXByaW1hcnkpXS81IHRvLVt2YXIoLS1zZWNvbmRhcnkpXS81IG9wYWNpdHktMCBncm91cC1ob3ZlcjpvcGFjaXR5LTEwMCB0cmFuc2l0aW9uLW9wYWNpdHkgZHVyYXRpb24tMzAwIHBvaW50ZXItZXZlbnRzLW5vbmVcIiAvPlxuICAgMTU1XHQgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgIDE1Nlx0ICAgICAgICAgICAgICAgIDwvbW90aW9uLmRpdj5cbiAgIDE1N1x0ICAgICAgICAgICAgICApO1xuICAgMTU4XHQgICAgICAgICAgICB9KX1cbiAgIDE1OVx0ICAgICAgICAgIDwvbW90aW9uLmRpdj5cbiAgIDE2MFx0ICAgICAgICA8L2Rpdj5cbiAgIDE2MVx0XG4gICAxNjJcdCAgICAgICAgey8qIFZhbHVlcyBTZWN0aW9uICovfVxuICAgMTYzXHQgICAgICAgIDxtb3Rpb24uZGl2XG4gICAxNjRcdCAgICAgICAgICBpbml0aWFsPXt7IG9wYWNpdHk6IDAsIHk6IDUwIH19XG4gICAxNjVcdCAgICAgICAgICB3aGlsZUluVmlldz17eyBvcGFjaXR5OiAxLCB5OiAwIH19XG4gICAxNjZcdCAgICAgICAgICB2aWV3cG9ydD17eyBvbmNlOiB0cnVlIH19XG4gICAxNjdcdCAgICAgICAgICB0cmFuc2l0aW9uPXt7IGR1cmF0aW9uOiAwLjgsIGRlbGF5OiAwLjMgfX1cbiAgIDE2OFx0ICAgICAgICAgIGNsYXNzTmFtZT1cIm10LTIwIGxnOm10LTMyXCJcbiAgIDE2OVx0ICAgICAgICA+XG4gICAxNzBcdCAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtY2VudGVyIG1iLTEyXCI+XG4gICAxNzFcdCAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9XCJ0ZXh0LTJ4bCBsZzp0ZXh0LTN4bCBmb250LWJvbGQgdGV4dC1bdmFyKC0tbmV1dHJhbC05MDApXSBtYi00XCI+XG4gICAxNzJcdCAgICAgICAgICAgICAgT3VyIENvcmUgVmFsdWVzXG4gICAxNzNcdCAgICAgICAgICAgIDwvaDM+XG4gICAxNzRcdCAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtbGcgdGV4dC1bdmFyKC0tbmV1dHJhbC02MDApXSBtYXgtdy0yeGwgbXgtYXV0b1wiPlxuICAgMTc1XHQgICAgICAgICAgICAgIFRoZSBwcmluY2lwbGVzIHRoYXQgZ3VpZGUgZXZlcnl0aGluZyB3ZSBkb1xuICAgMTc2XHQgICAgICAgICAgICA8L3A+XG4gICAxNzdcdCAgICAgICAgICA8L2Rpdj5cbiAgIDE3OFx0XG4gICAxNzlcdCAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdyaWQgZ3JpZC1jb2xzLTEgbWQ6Z3JpZC1jb2xzLTMgZ2FwLThcIj5cbiAgIDE4MFx0ICAgICAgICAgICAge1tcbiAgIDE4MVx0ICAgICAgICAgICAgICB7XG4gICAxODJcdCAgICAgICAgICAgICAgICB0aXRsZTogXCJJbm5vdmF0aW9uXCIsXG4gICAxODNcdCAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJXZSBzdGF5IGFoZWFkIG9mIHRoZSBjdXJ2ZSB3aXRoIGN1dHRpbmctZWRnZSB0ZWNobm9sb2dpZXMgYW5kIGNyZWF0aXZlIHNvbHV0aW9ucy5cIixcbiAgIDE4NFx0ICAgICAgICAgICAgICAgIGVtb2ppOiBcIvCfmoBcIlxuICAgMTg1XHQgICAgICAgICAgICAgIH0sXG4gICAxODZcdCAgICAgICAgICAgICAge1xuICAgMTg3XHQgICAgICAgICAgICAgICAgdGl0bGU6IFwiUXVhbGl0eVwiLFxuICAgMTg4XHQgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiRXZlcnkgcHJvamVjdCByZWNlaXZlcyBvdXIgZnVsbCBhdHRlbnRpb24gdG8gZGV0YWlsIGFuZCBjb21taXRtZW50IHRvIGV4Y2VsbGVuY2UuXCIsXG4gICAxODlcdCAgICAgICAgICAgICAgICBlbW9qaTogXCLirZBcIlxuICAgMTkwXHQgICAgICAgICAgICAgIH0sXG4gICAxOTFcdCAgICAgICAgICAgICAge1xuICAgMTkyXHQgICAgICAgICAgICAgICAgdGl0bGU6IFwiUGFydG5lcnNoaXBcIixcbiAgIDE5M1x0ICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIldlIHdvcmsgY2xvc2VseSB3aXRoIG91ciBjbGllbnRzIGFzIHRydXN0ZWQgcGFydG5lcnMgaW4gdGhlaXIgc3VjY2VzcyBqb3VybmV5LlwiLFxuICAgMTk0XHQgICAgICAgICAgICAgICAgZW1vamk6IFwi8J+knVwiXG4gICAxOTVcdCAgICAgICAgICAgICAgfVxuICAgMTk2XHQgICAgICAgICAgICBdLm1hcCgodmFsdWUsIGluZGV4KSA9PiAoXG4gICAxOTdcdCAgICAgICAgICAgICAgPG1vdGlvbi5kaXZcbiAgIDE5OFx0ICAgICAgICAgICAgICAgIGtleT17dmFsdWUudGl0bGV9XG4gICAxOTlcdCAgICAgICAgICAgICAgICBpbml0aWFsPXt7IG9wYWNpdHk6IDAsIHk6IDMwIH19XG4gICAyMDBcdCAgICAgICAgICAgICAgICB3aGlsZUluVmlldz17eyBvcGFjaXR5OiAxLCB5OiAwIH19XG4gICAyMDFcdCAgICAgICAgICAgICAgICB2aWV3cG9ydD17eyBvbmNlOiB0cnVlIH19XG4gICAyMDJcdCAgICAgICAgICAgICAgICB0cmFuc2l0aW9uPXt7IGR1cmF0aW9uOiAwLjYsIGRlbGF5OiBpbmRleCAqIDAuMSB9fVxuICAgMjAzXHQgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXJcIlxuICAgMjA0XHQgICAgICAgICAgICAgID5cbiAgIDIwNVx0ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC00eGwgbWItNFwiPnt2YWx1ZS5lbW9qaX08L2Rpdj5cbiAgIDIwNlx0ICAgICAgICAgICAgICAgIDxoNCBjbGFzc05hbWU9XCJ0ZXh0LXhsIGZvbnQtYm9sZCB0ZXh0LVt2YXIoLS1uZXV0cmFsLTkwMCldIG1iLTNcIj5cbiAgIDIwN1x0ICAgICAgICAgICAgICAgICAge3ZhbHVlLnRpdGxlfVxuICAgMjA4XHQgICAgICAgICAgICAgICAgPC9oND5cbiAgIDIwOVx0ICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtW3ZhcigtLW5ldXRyYWwtNjAwKV0gbGVhZGluZy1yZWxheGVkXCI+XG4gICAyMTBcdCAgICAgICAgICAgICAgICAgIHt2YWx1ZS5kZXNjcmlwdGlvbn1cbiAgIDIxMVx0ICAgICAgICAgICAgICAgIDwvcD5cbiAgIDIxMlx0ICAgICAgICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAyMTNcdCAgICAgICAgICAgICkpfVxuICAgMjE0XHQgICAgICAgICAgPC9kaXY+XG4gICAyMTVcdCAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgMjE2XHQgICAgICA8L2Rpdj5cbiAgIDIxN1x0ICAgIDwvc2VjdGlvbj5cbiAgIDIxOFx0ICApO1xuICAgMjE5XHR9XG4uLi5cblBhdGg6IHNyYy9jb21wb25lbnRzL3NlY3Rpb25zL0NUQS50c3hcbiAgICAgMVx0XCJ1c2UgY2xpZW50XCI7XG4gICAgIDJcdFxuICAgICAzXHRpbXBvcnQgeyBtb3Rpb24gfSBmcm9tIFwiZnJhbWVyLW1vdGlvblwiO1xuICAgICA0XHRpbXBvcnQgeyBCdXR0b24gfSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL0J1dHRvblwiO1xuICAgICA1XHRpbXBvcnQgeyBNZXNzYWdlQ2lyY2xlLCBDYWxlbmRhciwgQXJyb3dSaWdodCwgUGhvbmUsIE1haWwgfSBmcm9tIFwibHVjaWRlLXJlYWN0XCI7XG4uLi5cblBhdGg6IHNyYy9jb21wb25lbnRzL3NlY3Rpb25zL0Zvb3Rlci50c3hcbi4uLlxuICAgIDc5XHRcbiAgICA4MFx0ICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXIgbXgtYXV0byBweC00IHNtOnB4LTYgbGc6cHgtOCByZWxhdGl2ZSB6LTEwXCI+XG4gICAgODFcdCAgICAgICAgey8qIE1haW4gRm9vdGVyIENvbnRlbnQgKi99XG4gICAgODJcdCAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJweS0xNiBsZzpweS0yMFwiPlxuICAgIDgzXHQgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJncmlkIGdyaWQtY29scy0xIGxnOmdyaWQtY29scy00IGdhcC0xMiBsZzpnYXAtOFwiPlxuICAgIDg0XHQgICAgICAgICAgICB7LyogQ29tcGFueSBJbmZvICovfVxuICAgIDg1XHQgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxnOmNvbC1zcGFuLTFcIj5cbiAgICA4Nlx0ICAgICAgICAgICAgICA8bW90aW9uLmRpdlxuICAgIDg3XHQgICAgICAgICAgICAgICAgaW5pdGlhbD17eyBvcGFjaXR5OiAwLCB5OiAzMCB9fVxuICAgIDg4XHQgICAgICAgICAgICAgICAgd2hpbGVJblZpZXc9e3sgb3BhY2l0eTogMSwgeTogMCB9fVxuICAgIDg5XHQgICAgICAgICAgICAgICAgdmlld3BvcnQ9e3sgb25jZTogdHJ1ZSB9fVxuICAgIDkwXHQgICAgICAgICAgICAgICAgdHJhbnNpdGlvbj17eyBkdXJhdGlvbjogMC42IH19XG4gICAgOTFcdCAgICAgICAgICAgICAgPlxuICAgIDkyXHQgICAgICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cInRleHQtMnhsIGZvbnQtYm9sZCBiZy1ncmFkaWVudC10by1yIGZyb20tW3ZhcigtLXByaW1hcnkpXSB0by1bdmFyKC0tc2Vjb25kYXJ5KV0gYmctY2xpcC10ZXh0IHRleHQtdHJhbnNwYXJlbnQgbWItNFwiPlxuICAgIDkzXHQgICAgICAgICAgICAgICAgICBBcmFiaXRlc1xuICAgIDk0XHQgICAgICAgICAgICAgICAgPC9oMz5cbiAgICA5NVx0ICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtW3ZhcigtLW5ldXRyYWwtNDAwKV0gbGVhZGluZy1yZWxheGVkIG1iLTZcIj5cbiAgICA5Nlx0ICAgICAgICAgICAgICAgICAgRHViYWkncyBwcmVtaWVyIGRpZ2l0YWwgYWdlbmN5LCB0cmFuc2Zvcm1pbmcgYnVzaW5lc3NlcyB0aHJvdWdoIGlubm92YXRpdmUgXG4gICAgOTdcdCAgICAgICAgICAgICAgICAgIHdlYiBzb2x1dGlvbnMgYW5kIGN1c3RvbSBzb2Z0d2FyZSBkZXZlbG9wbWVudC5cbiAgICA5OFx0ICAgICAgICAgICAgICAgIDwvcD5cbi4uLlxuICAgMTIxXHRcbiAgIDEyMlx0ICAgICAgICAgICAgey8qIExpbmtzIFNlY3Rpb25zICovfVxuICAgMTIzXHQgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxnOmNvbC1zcGFuLTJcIj5cbiAgIDEyNFx0ICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdyaWQgZ3JpZC1jb2xzLTIgbWQ6Z3JpZC1jb2xzLTQgZ2FwLThcIj5cbiAgIDEyNVx0ICAgICAgICAgICAgICAgIHtPYmplY3QuZW50cmllcyhmb290ZXJMaW5rcykubWFwKChbY2F0ZWdvcnksIGxpbmtzXSwgaW5kZXgpID0+IChcbiAgIDEyNlx0ICAgICAgICAgICAgICAgICAgPG1vdGlvbi5kaXZcbiAgIDEyN1x0ICAgICAgICAgICAgICAgICAgICBrZXk9e2NhdGVnb3J5fVxuICAgMTI4XHQgICAgICAgICAgICAgICAgICAgIGluaXRpYWw9e3sgb3BhY2l0eTogMCwgeTogMzAgfX1cbiAgIDEyOVx0ICAgICAgICAgICAgICAgICAgICB3aGlsZUluVmlldz17eyBvcGFjaXR5OiAxLCB5OiAwIH19XG4gICAxMzBcdCAgICAgICAgICAgICAgICAgICAgdmlld3BvcnQ9e3sgb25jZTogdHJ1ZSB9fVxuICAgMTMxXHQgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb249e3sgZHVyYXRpb246IDAuNiwgZGVsYXk6IGluZGV4ICogMC4xIH19XG4gICAxMzJcdCAgICAgICAgICAgICAgICAgID5cbiAgIDEzM1x0ICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3NOYW1lPVwidGV4dC13aGl0ZSBmb250LXNlbWlib2xkIG1iLTQgY2FwaXRhbGl6ZVwiPlxuICAgMTM0XHQgICAgICAgICAgICAgICAgICAgICAge2NhdGVnb3J5fVxuICAgMTM1XHQgICAgICAgICAgICAgICAgICAgIDwvaDQ+XG4gICAxMzZcdCAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cInNwYWNlLXktM1wiPlxuICAgMTM3XHQgICAgICAgICAgICAgICAgICAgICAge2xpbmtzLm1hcCgobGluaykgPT4gKFxuICAgMTM4XHQgICAgICAgICAgICAgICAgICAgICAgICA8bGkga2V5PXtsaW5rLm5hbWV9PlxuICAgMTM5XHQgICAgICAgICAgICAgICAgICAgICAgICAgIDxhXG4gICAxNDBcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPXtsaW5rLmhyZWZ9XG4gICAxNDFcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ0ZXh0LVt2YXIoLS1uZXV0cmFsLTQwMCldIGhvdmVyOnRleHQtd2hpdGUgdHJhbnNpdGlvbi1jb2xvcnMgZHVyYXRpb24tMjAwIHRleHQtc21cIlxuICAgMTQyXHQgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgIDE0M1x0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtsaW5rLm5hbWV9XG4gICAxNDRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxuICAgMTQ1XHQgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgMTQ2XHQgICAgICAgICAgICAgICAgICAgICAgKSl9XG4gICAxNDdcdCAgICAgICAgICAgICAgICAgICAgPC91bD5cbiAgIDE0OFx0ICAgICAgICAgICAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgMTQ5XHQgICAgICAgICAgICAgICAgKSl9XG4gICAxNTBcdCAgICAgICAgICAgICAgPC9kaXY+XG4gICAxNTFcdCAgICAgICAgICAgIDwvZGl2PlxuLi4uXG4gICAyMDFcdCAgICAgICAgICAgIFxuICAgMjAyXHQgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIHNwYWNlLXgtNlwiPlxuICAgMjAzXHQgICAgICAgICAgICAgIDxhXG4gICAyMDRcdCAgICAgICAgICAgICAgICBocmVmPVwiL3ByaXZhY3lcIlxuICAgMjA1XHQgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidGV4dC1bdmFyKC0tbmV1dHJhbC00MDApXSBob3Zlcjp0ZXh0LXdoaXRlIHRyYW5zaXRpb24tY29sb3JzIGR1cmF0aW9uLTIwMCB0ZXh0LXNtXCJcbiAgIDIwNlx0ICAgICAgICAgICAgICA+XG4gICAyMDdcdCAgICAgICAgICAgICAgICBQcml2YWN5IFBvbGljeVxuICAgMjA4XHQgICAgICAgICAgICAgIDwvYT5cbiAgIDIwOVx0ICAgICAgICAgICAgICA8YVxuICAgMjEwXHQgICAgICAgICAgICAgICAgaHJlZj1cIi90ZXJtc1wiXG4gICAyMTFcdCAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ0ZXh0LVt2YXIoLS1uZXV0cmFsLTQwMCldIGhvdmVyOnRleHQtd2hpdGUgdHJhbnNpdGlvbi1jb2xvcnMgZHVyYXRpb24tMjAwIHRleHQtc21cIlxuICAgMjEyXHQgICAgICAgICAgICAgID5cbiAgIDIxM1x0ICAgICAgICAgICAgICAgIFRlcm1zIG9mIFNlcnZpY2VcbiAgIDIxNFx0ICAgICAgICAgICAgICA8L2E+XG4gICAyMTVcdCAgICAgICAgICAgICAgXG4gICAyMTZcdCAgICAgICAgICAgICAgey8qIFNjcm9sbCB0byBUb3AgKi99XG4gICAyMTdcdCAgICAgICAgICAgICAgPG1vdGlvbi5idXR0b25cbiAgIDIxOFx0ICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3Njcm9sbFRvVG9wfVxuICAgMjE5XHQgICAgICAgICAgICAgICAgd2hpbGVIb3Zlcj17eyBzY2FsZTogMS4xLCB5OiAtMiB9fVxuICAgMjIwXHQgICAgICAgICAgICAgICAgd2hpbGVUYXA9e3sgc2NhbGU6IDAuOTUgfX1cbiAgIDIyMVx0ICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInctMTAgaC0xMCBiZy1bdmFyKC0tcHJpbWFyeSldIHJvdW5kZWQtbGcgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgaG92ZXI6YmctW3ZhcigtLXByaW1hcnktZGFyayldIHRyYW5zaXRpb24tY29sb3JzIGR1cmF0aW9uLTMwMFwiXG4gICAyMjJcdCAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPVwiU2Nyb2xsIHRvIHRvcFwiXG4gICAyMjNcdCAgICAgICAgICAgICAgPlxuICAgMjI0XHQgICAgICAgICAgICAgICAgPEFycm93VXAgY2xhc3NOYW1lPVwidy01IGgtNVwiIC8+XG4gICAyMjVcdCAgICAgICAgICAgICAgPC9tb3Rpb24uYnV0dG9uPlxuICAgMjI2XHQgICAgICAgICAgICA8L2Rpdj5cbiAgIDIyN1x0ICAgICAgICAgIDwvZGl2PlxuICAgMjI4XHQgICAgICAgIDwvbW90aW9uLmRpdj5cbiAgIDIyOVx0ICAgICAgPC9kaXY+XG4gICAyMzBcdCAgICA8L2Zvb3Rlcj5cbiAgIDIzMVx0ICApO1xuICAgMjMyXHR9XG4uLi5cblBhdGg6IHNyYy9hcHAvbGF5b3V0LnRzeFxuICAgICAxXHRpbXBvcnQgdHlwZSB7IE1ldGFkYXRhIH0gZnJvbSBcIm5leHRcIjtcbiAgICAgMlx0aW1wb3J0IHsgSW50ZXIsIFBsYXlmYWlyX0Rpc3BsYXkgfSBmcm9tIFwibmV4dC9mb250L2dvb2dsZVwiO1xuICAgICAzXHRpbXBvcnQgeyBBbmFseXRpY3MgfSBmcm9tIFwiQHZlcmNlbC9hbmFseXRpY3MvcmVhY3RcIjtcbiAgICAgNFx0aW1wb3J0IFwiLi9nbG9iYWxzLmNzc1wiO1xuICAgICA1XHRcbiAgICAgNlx0Y29uc3QgaW50ZXIgPSBJbnRlcih7XG4gICAgIDdcdCAgdmFyaWFibGU6IFwiLS1mb250LWludGVyXCIsXG4gICAgIDhcdCAgc3Vic2V0czogW1wibGF0aW5cIl0sXG4gICAgIDlcdCAgZGlzcGxheTogXCJzd2FwXCIsXG4gICAgMTBcdH0pO1xuICAgIDExXHRcbiAgICAxMlx0Y29uc3QgcGxheWZhaXIgPSBQbGF5ZmFpcl9EaXNwbGF5KHtcbiAgICAxM1x0ICB2YXJpYWJsZTogXCItLWZvbnQtcGxheWZhaXJcIixcbiAgICAxNFx0ICBzdWJzZXRzOiBbXCJsYXRpblwiXSxcbiAgICAxNVx0ICBkaXNwbGF5OiBcInN3YXBcIixcbiAgICAxNlx0fSk7XG4gICAgMTdcdFxuICAgIDE4XHRleHBvcnQgY29uc3QgbWV0YWRhdGE6IE1ldGFkYXRhID0ge1xuICAgIDE5XHQgIHRpdGxlOiBcIkFyYWJpdGVzIERpZ2l0YWwgQWdlbmN5IHwgQ3VzdG9tIFdlYnNpdGVzICYgU29mdHdhcmUgU29sdXRpb25zIGluIER1YmFpXCIsXG4gICAgMjBcdCAgZGVzY3JpcHRpb246IFwiTGVhZGluZyBkaWdpdGFsIGFnZW5jeSBpbiBEdWJhaSBzcGVjaWFsaXppbmcgaW4gY3VzdG9tIHdlYnNpdGVzLCBsYW5kaW5nIHBhZ2VzLCBhbmQgc29mdHdhcmUgc29sdXRpb25zIGZvciByZWFsIGVzdGF0ZSwgZS1jb21tZXJjZSwgd2VsbG5lc3MsIHRvdXJpc20sIGFuZCBmaW50ZWNoIGJ1c2luZXNzZXMuXCIsXG4gICAgMjFcdCAga2V5d29yZHM6IFwiRHViYWkgZGlnaXRhbCBhZ2VuY3ksIGN1c3RvbSB3ZWJzaXRlcyBEdWJhaSwgbGFuZGluZyBwYWdlcyBEdWJhaSwgc29mdHdhcmUgZGV2ZWxvcG1lbnQgRHViYWksIHJlYWwgZXN0YXRlIHdlYnNpdGVzLCBlLWNvbW1lcmNlIHNvbHV0aW9uc1wiLFxuICAgIDIyXHQgIGF1dGhvcnM6IFt7IG5hbWU6IFwiQXJhYml0ZXMgRGlnaXRhbCBBZ2VuY3lcIiB9XSxcbiAgICAyM1x0ICBjcmVhdG9yOiBcIkFyYWJpdGVzIERpZ2l0YWwgQWdlbmN5XCIsXG4gICAgMjRcdCAgcHVibGlzaGVyOiBcIkFyYWJpdGVzIERpZ2l0YWwgQWdlbmN5XCIsXG4gICAgMjVcdCAgbWV0YWRhdGFCYXNlOiBuZXcgVVJMKFwiaHR0cHM6Ly9hcmFiaXRlcy5jb21cIiksXG4gICAgMjZcdCAgb3BlbkdyYXBoOiB7XG4gICAgMjdcdCAgICB0eXBlOiBcIndlYnNpdGVcIixcbiAgICAyOFx0ICAgIGxvY2FsZTogXCJlbl9VU1wiLFxuICAgIDI5XHQgICAgdXJsOiBcImh0dHBzOi8vYXJhYml0ZXMuY29tXCIsXG4gICAgMzBcdCAgICB0aXRsZTogXCJBcmFiaXRlcyBEaWdpdGFsIEFnZW5jeSB8IEN1c3RvbSBXZWJzaXRlcyAmIFNvZnR3YXJlIFNvbHV0aW9ucyBpbiBEdWJhaVwiLFxuICAgIDMxXHQgICAgZGVzY3JpcHRpb246IFwiTGVhZGluZyBkaWdpdGFsIGFnZW5jeSBpbiBEdWJhaSBzcGVjaWFsaXppbmcgaW4gY3VzdG9tIHdlYnNpdGVzLCBsYW5kaW5nIHBhZ2VzLCBhbmQgc29mdHdhcmUgc29sdXRpb25zIGZvciByZWFsIGVzdGF0ZSwgZS1jb21tZXJjZSwgd2VsbG5lc3MsIHRvdXJpc20sIGFuZCBmaW50ZWNoIGJ1c2luZXNzZXMuXCIsXG4gICAgMzJcdCAgICBzaXRlTmFtZTogXCJBcmFiaXRlcyBEaWdpdGFsIEFnZW5jeVwiLFxuICAgIDMzXHQgICAgaW1hZ2VzOiBbXG4gICAgMzRcdCAgICAgIHtcbiAgICAzNVx0ICAgICAgICB1cmw6IFwiL29nLWltYWdlLmpwZ1wiLFxuICAgIDM2XHQgICAgICAgIHdpZHRoOiAxMjAwLFxuICAgIDM3XHQgICAgICAgIGhlaWdodDogNjMwLFxuICAgIDM4XHQgICAgICAgIGFsdDogXCJBcmFiaXRlcyBEaWdpdGFsIEFnZW5jeSAtIER1YmFpJ3MgUHJlbWllciBXZWIgRGV2ZWxvcG1lbnQgQ29tcGFueVwiLFxuICAgIDM5XHQgICAgICB9LFxuICAgIDQwXHQgICAgXSxcbiAgICA0MVx0ICB9LFxuICAgIDQyXHQgIHR3aXR0ZXI6IHtcbiAgICA0M1x0ICAgIGNhcmQ6IFwic3VtbWFyeV9sYXJnZV9pbWFnZVwiLFxuICAgIDQ0XHQgICAgdGl0bGU6IFwiQXJhYml0ZXMgRGlnaXRhbCBBZ2VuY3kgfCBDdXN0b20gV2Vic2l0ZXMgJiBTb2Z0d2FyZSBTb2x1dGlvbnMgaW4gRHViYWlcIixcbiAgICA0NVx0ICAgIGRlc2NyaXB0aW9uOiBcIkxlYWRpbmcgZGlnaXRhbCBhZ2VuY3kgaW4gRHViYWkgc3BlY2lhbGl6aW5nIGluIGN1c3RvbSB3ZWJzaXRlcywgbGFuZGluZyBwYWdlcywgYW5kIHNvZnR3YXJlIHNvbHV0aW9ucyBmb3IgcmVhbCBlc3RhdGUsIGUtY29tbWVyY2UsIHdlbGxuZXNzLCB0b3VyaXNtLCBhbmQgZmludGVjaCBidXNpbmVzc2VzLlwiLFxuICAgIDQ2XHQgICAgaW1hZ2VzOiBbXCIvb2ctaW1hZ2UuanBnXCJdLFxuICAgIDQ3XHQgIH0sXG4gICAgNDhcdCAgcm9ib3RzOiB7XG4gICAgNDlcdCAgICBpbmRleDogdHJ1ZSxcbiAgICA1MFx0ICAgIGZvbGxvdzogdHJ1ZSxcbiAgICA1MVx0ICAgIGdvb2dsZUJvdDoge1xuICAgIDUyXHQgICAgICBpbmRleDogdHJ1ZSxcbiAgICA1M1x0ICAgICAgZm9sbG93OiB0cnVlLFxuICAgIDU0XHQgICAgICBcIm1heC12aWRlby1wcmV2aWV3XCI6IC0xLFxuICAgIDU1XHQgICAgICBcIm1heC1pbWFnZS1wcmV2aWV3XCI6IFwibGFyZ2VcIixcbiAgICA1Nlx0ICAgICAgXCJtYXgtc25pcHBldFwiOiAtMSxcbiAgICA1N1x0ICAgIH0sXG4gICAgNThcdCAgfSxcbiAgICA1OVx0fTtcbiAgICA2MFx0XG4gICAgNjFcdGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFJvb3RMYXlvdXQoe1xuICAgIDYyXHQgIGNoaWxkcmVuLFxuICAgIDYzXHR9OiBSZWFkb25seTx7XG4gICAgNjRcdCAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZTtcbiAgICA2NVx0fT4pIHtcbiAgICA2Nlx0ICByZXR1cm4gKFxuICAgIDY3XHQgICAgPGh0bWwgbGFuZz1cImVuXCIgY2xhc3NOYW1lPVwic2Nyb2xsLXNtb290aFwiPlxuICAgIDY4XHQgICAgICA8Ym9keVxuICAgIDY5XHQgICAgICAgIGNsYXNzTmFtZT17YCR7aW50ZXIudmFyaWFibGV9ICR7cGxheWZhaXIudmFyaWFibGV9IGZvbnQtc2FucyBhbnRpYWxpYXNlZCBiZy13aGl0ZSB0ZXh0LWdyYXktOTAwYH1cbiAgICA3MFx0ICAgICAgPlxuICAgIDcxXHQgICAgICAgIHtjaGlsZHJlbn1cbiAgICA3Mlx0ICAgICAgICA8QW5hbHl0aWNzIC8+XG4gICAgNzNcdCAgICAgIDwvYm9keT5cbiAgICA3NFx0ICAgIDwvaHRtbD5cbiAgICA3NVx0ICApO1xuICAgIDc2XHR9XG4uLi5cblBhdGg6IHNyYy9saWIvdXRpbHMudHNcbiAgICAgMVx0aW1wb3J0IHsgdHlwZSBDbGFzc1ZhbHVlLCBjbHN4IH0gZnJvbSBcImNsc3hcIjtcbiAgICAgMlx0aW1wb3J0IHsgdHdNZXJnZSB9IGZyb20gXCJ0YWlsd2luZC1tZXJnZVwiO1xuICAgICAzXHRcbiAgICAgNFx0ZXhwb3J0IGZ1bmN0aW9uIGNuKC4uLmlucHV0czogQ2xhc3NWYWx1ZVtdKSB7XG4gICAgIDVcdCAgcmV0dXJuIHR3TWVyZ2UoY2xzeChpbnB1dHMpKTtcbiAgICAgNlx0fVxuLi4uXG5QYXRoOiBzcmMvY29tcG9uZW50cy9zZWN0aW9ucy9IZXJvLnRzeFxuICAgICAxXHRcInVzZSBjbGllbnRcIjtcbiAgICAgMlx0XG4gICAgIDNcdGltcG9ydCB7IG1vdGlvbiB9IGZyb20gXCJmcmFtZXItbW90aW9uXCI7XG4gICAgIDRcdGltcG9ydCB7IEJ1dHRvbiB9IGZyb20gXCJAL2NvbXBvbmVudHMvdWkvQnV0dG9uXCI7XG4gICAgIDVcdGltcG9ydCB7IEFycm93UmlnaHQsIFBsYXkgfSBmcm9tIFwibHVjaWRlLXJlYWN0XCI7XG4gICAgIDZcdFxuICAgICA3XHRleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBIZXJvKCkge1xuICAgICA4XHQgIHJldHVybiAoXG4gICAgIDlcdCAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJyZWxhdGl2ZSBtaW4taC1zY3JlZW4gZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgb3ZlcmZsb3ctaGlkZGVuIGJnLWdyYWRpZW50LXRvLWJyIGZyb20tW3ZhcigtLW5ldXRyYWwtNTApXSB2aWEtd2hpdGUgdG8tW3ZhcigtLW5ldXRyYWwtMTAwKV1cIj5cbiAgICAxMFx0ICAgICAgey8qIEJhY2tncm91bmQgUGF0dGVybiAqL31cbiAgICAxMVx0ICAgICAgPGRpdiBjbGFzc05hbWU9XCJhYnNvbHV0ZSBpbnNldC0wIG9wYWNpdHktNVwiPlxuICAgIDEyXHQgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWJzb2x1dGUgaW5zZXQtMFwiIHN0eWxlPXt7XG4gICAgMTNcdCAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGByYWRpYWwtZ3JhZGllbnQoY2lyY2xlIGF0IDI1JSAyNSUsIHZhcigtLXByaW1hcnkpIDJweCwgdHJhbnNwYXJlbnQgMnB4KSxcbiAgICAxNFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFkaWFsLWdyYWRpZW50KGNpcmNsZSBhdCA3NSUgNzUlLCB2YXIoLS1zZWNvbmRhcnkpIDJweCwgdHJhbnNwYXJlbnQgMnB4KWAsXG4gICAgMTVcdCAgICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogJzYwcHggNjBweCdcbiAgICAxNlx0ICAgICAgICB9fSAvPlxuICAgIDE3XHQgICAgICA8L2Rpdj5cbiAgICAxOFx0XG4gICAgMTlcdCAgICAgIHsvKiBGbG9hdGluZyBFbGVtZW50cyAqL31cbiAgICAyMFx0ICAgICAgPG1vdGlvbi5kaXZcbiAgICAyMVx0ICAgICAgICBjbGFzc05hbWU9XCJhYnNvbHV0ZSB0b3AtMjAgbGVmdC0xMCB3LTIwIGgtMjAgYmctW3ZhcigtLWFjY2VudCldIHJvdW5kZWQtZnVsbCBvcGFjaXR5LTEwXCJcbiAgICAyMlx0ICAgICAgICBhbmltYXRlPXt7XG4gICAgMjNcdCAgICAgICAgICB5OiBbMCwgLTIwLCAwXSxcbiAgICAyNFx0ICAgICAgICAgIHJvdGF0ZTogWzAsIDE4MCwgMzYwXSxcbiAgICAyNVx0ICAgICAgICB9fVxuICAgIDI2XHQgICAgICAgIHRyYW5zaXRpb249e3tcbiAgICAyN1x0ICAgICAgICAgIGR1cmF0aW9uOiA4LFxuICAgIDI4XHQgICAgICAgICAgcmVwZWF0OiBJbmZpbml0eSxcbiAgICAyOVx0ICAgICAgICAgIGVhc2U6IFwiZWFzZUluT3V0XCIsXG4gICAgMzBcdCAgICAgICAgfX1cbiAgICAzMVx0ICAgICAgLz5cbiAgICAzMlx0ICAgICAgPG1vdGlvbi5kaXZcbiAgICAzM1x0ICAgICAgICBjbGFzc05hbWU9XCJhYnNvbHV0ZSBib3R0b20tMjAgcmlnaHQtMTAgdy0xNiBoLTE2IGJnLVt2YXIoLS1zZWNvbmRhcnkpXSByb3VuZGVkLWZ1bGwgb3BhY2l0eS0xMFwiXG4gICAgMzRcdCAgICAgICAgYW5pbWF0ZT17e1xuICAgIDM1XHQgICAgICAgICAgeTogWzAsIDIwLCAwXSxcbiAgICAzNlx0ICAgICAgICAgIHJvdGF0ZTogWzM2MCwgMTgwLCAwXSxcbiAgICAzN1x0ICAgICAgICB9fVxuICAgIDM4XHQgICAgICAgIHRyYW5zaXRpb249e3tcbiAgICAzOVx0ICAgICAgICAgIGR1cmF0aW9uOiA2LFxuICAgIDQwXHQgICAgICAgICAgcmVwZWF0OiBJbmZpbml0eSxcbiAgICA0MVx0ICAgICAgICAgIGVhc2U6IFwiZWFzZUluT3V0XCIsXG4gICAgNDJcdCAgICAgICAgfX1cbiAgICA0M1x0ICAgICAgLz5cbi4uLlxuICAgIDgyXHRcbiAgICA4M1x0ICAgICAgICAgIHsvKiBDVEEgQnV0dG9ucyAqL31cbiAgICA4NFx0ICAgICAgICAgIDxtb3Rpb24uZGl2XG4gICAgODVcdCAgICAgICAgICAgIGluaXRpYWw9e3sgb3BhY2l0eTogMCwgeTogMzAgfX1cbiAgICA4Nlx0ICAgICAgICAgICAgYW5pbWF0ZT17eyBvcGFjaXR5OiAxLCB5OiAwIH19XG4gICAgODdcdCAgICAgICAgICAgIHRyYW5zaXRpb249e3sgZHVyYXRpb246IDAuOCwgZGVsYXk6IDAuNiB9fVxuICAgIDg4XHQgICAgICAgICAgICBjbGFzc05hbWU9XCJmbGV4IGZsZXgtY29sIHNtOmZsZXgtcm93IGdhcC00IGp1c3RpZnktY2VudGVyIGl0ZW1zLWNlbnRlclwiXG4gICAgODlcdCAgICAgICAgICA+XG4gICAgOTBcdCAgICAgICAgICAgIDxCdXR0b25cbiAgICA5MVx0ICAgICAgICAgICAgICBzaXplPVwibGdcIlxuICAgIDkyXHQgICAgICAgICAgICAgIHZhcmlhbnQ9XCJwcmltYXJ5XCJcbiAgICA5M1x0ICAgICAgICAgICAgICBocmVmPVwiI2NvbnRhY3RcIlxuICAgIDk0XHQgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImdyb3VwXCJcbiAgICA5NVx0ICAgICAgICAgICAgPlxuICAgIDk2XHQgICAgICAgICAgICAgIEJvb2sgRnJlZSBDb25zdWx0YXRpb25cbiAgICA5N1x0ICAgICAgICAgICAgICA8QXJyb3dSaWdodCBjbGFzc05hbWU9XCJtbC0yIGgtNSB3LTUgdHJhbnNpdGlvbi10cmFuc2Zvcm0gZ3JvdXAtaG92ZXI6dHJhbnNsYXRlLXgtMVwiIC8+XG4gICAgOThcdCAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgIDk5XHQgICAgICAgICAgICBcbiAgIDEwMFx0ICAgICAgICAgICAgPEJ1dHRvblxuICAgMTAxXHQgICAgICAgICAgICAgIHNpemU9XCJsZ1wiXG4gICAxMDJcdCAgICAgICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVcIlxuICAgMTAzXHQgICAgICAgICAgICAgIGhyZWY9XCIjcG9ydGZvbGlvXCJcbiAgIDEwNFx0ICAgICAgICAgICAgICBjbGFzc05hbWU9XCJncm91cFwiXG4gICAxMDVcdCAgICAgICAgICAgID5cbiAgIDEwNlx0ICAgICAgICAgICAgICA8UGxheSBjbGFzc05hbWU9XCJtci0yIGgtNSB3LTVcIiAvPlxuICAgMTA3XHQgICAgICAgICAgICAgIFNlZSBPdXIgV29ya1xuICAgMTA4XHQgICAgICAgICAgICA8L0J1dHRvbj5cbiAgIDEwOVx0ICAgICAgICAgIDwvbW90aW9uLmRpdj5cbi4uLlxuUGF0aDogc3JjL2NvbXBvbmVudHMvdWkvQnV0dG9uLnRzeFxuICAgICAxXHRcInVzZSBjbGllbnRcIjtcbiAgICAgMlx0XG4gICAgIDNcdGltcG9ydCB7IG1vdGlvbiB9IGZyb20gXCJmcmFtZXItbW90aW9uXCI7XG4gICAgIDRcdGltcG9ydCB7IGZvcndhcmRSZWYgfSBmcm9tIFwicmVhY3RcIjtcbiAgICAgNVx0aW1wb3J0IHsgY24gfSBmcm9tIFwiQC9saWIvdXRpbHNcIjtcbiAgICAgNlx0XG4gICAgIDdcdGludGVyZmFjZSBCdXR0b25Qcm9wcyBleHRlbmRzIFJlYWN0LkJ1dHRvbkhUTUxBdHRyaWJ1dGVzPEhUTUxCdXR0b25FbGVtZW50PiB7XG4gICAgIDhcdCAgdmFyaWFudD86IFwicHJpbWFyeVwiIHwgXCJzZWNvbmRhcnlcIiB8IFwib3V0bGluZVwiIHwgXCJnaG9zdFwiO1xuICAgICA5XHQgIHNpemU/OiBcInNtXCIgfCBcIm1kXCIgfCBcImxnXCI7XG4gICAgMTBcdCAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZTtcbiAgICAxMVx0ICBocmVmPzogc3RyaW5nO1xuICAgIDEyXHQgIGV4dGVybmFsPzogYm9vbGVhbjtcbiAgICAxM1x0fVxuLi4uXG4gICAgMzFcdFxuICAgIDMyXHQgICAgY29uc3QgY2xhc3NlcyA9IGNuKGJhc2VDbGFzc2VzLCB2YXJpYW50c1t2YXJpYW50XSwgc2l6ZXNbc2l6ZV0sIGNsYXNzTmFtZSk7XG4gICAgMzNcdFxuICAgIDM0XHQgICAgY29uc3QgTW90aW9uQnV0dG9uID0gbW90aW9uLmJ1dHRvbjtcbiAgICAzNVx0XG4gICAgMzZcdCAgICBpZiAoaHJlZikge1xuICAgIDM3XHQgICAgICByZXR1cm4gKFxuICAgIDM4XHQgICAgICAgIDxtb3Rpb24uYVxuICAgIDM5XHQgICAgICAgICAgaHJlZj17aHJlZn1cbiAgICA0MFx0ICAgICAgICAgIHRhcmdldD17ZXh0ZXJuYWwgPyBcIl9ibGFua1wiIDogdW5kZWZpbmVkfVxuICAgIDQxXHQgICAgICAgICAgcmVsPXtleHRlcm5hbCA/IFwibm9vcGVuZXIgbm9yZWZlcnJlclwiIDogdW5kZWZpbmVkfVxuICAgIDQyXHQgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzfVxuICAgIDQzXHQgICAgICAgICAgd2hpbGVIb3Zlcj17eyBzY2FsZTogMS4wMiB9fVxuICAgIDQ0XHQgICAgICAgICAgd2hpbGVUYXA9e3sgc2NhbGU6IDAuOTggfX1cbiAgICA0NVx0ICAgICAgICAgIHRyYW5zaXRpb249e3sgdHlwZTogXCJzcHJpbmdcIiwgc3RpZmZuZXNzOiA0MDAsIGRhbXBpbmc6IDE3IH19XG4gICAgNDZcdCAgICAgICAgPlxuICAgIDQ3XHQgICAgICAgICAge2NoaWxkcmVufVxuICAgIDQ4XHQgICAgICAgIDwvbW90aW9uLmE+XG4gICAgNDlcdCAgICAgICk7XG4gICAgNTBcdCAgICB9XG4gICAgNTFcdFxuICAgIDUyXHQgICAgcmV0dXJuIChcbiAgICA1M1x0ICAgICAgPE1vdGlvbkJ1dHRvblxuICAgIDU0XHQgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlc31cbiAgICA1NVx0ICAgICAgICByZWY9e3JlZn1cbiAgICA1Nlx0ICAgICAgICB3aGlsZUhvdmVyPXt7IHNjYWxlOiAxLjAyIH19XG4gICAgNTdcdCAgICAgICAgd2hpbGVUYXA9e3sgc2NhbGU6IDAuOTggfX1cbiAgICA1OFx0ICAgICAgICB0cmFuc2l0aW9uPXt7IHR5cGU6IFwic3ByaW5nXCIsIHN0aWZmbmVzczogNDAwLCBkYW1waW5nOiAxNyB9fVxuICAgIDU5XHQgICAgICAgIHsuLi5wcm9wc31cbiAgICA2MFx0ICAgICAgPlxuICAgIDYxXHQgICAgICAgIHtjaGlsZHJlbn1cbiAgICA2Mlx0ICAgICAgPC9Nb3Rpb25CdXR0b24+XG4gICAgNjNcdCAgICApO1xuICAgIDY0XHQgIH1cbiAgICA2NVx0KTtcbiAgICA2Nlx0XG4gICAgNjdcdEJ1dHRvbi5kaXNwbGF5TmFtZSA9IFwiQnV0dG9uXCI7XG4gICAgNjhcdFxuICAgIDY5XHRleHBvcnQgeyBCdXR0b24gfTtcbi4uLlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiODYwM2FkN2ItMDg0Zi00MDc1LWE1YWMtY2U1YjY5MmRhNzgwO3Rvb2x1XzAxTVl0Y2l6b2RKbXdLaURZaGZRZ3pjVyI6eyJyZXF1ZXN0SWQiOiI4NjAzYWQ3Yi0wODRmLTQwNzUtYTVhYy1jZTViNjkyZGE3ODAiLCJ0b29sVXNlSWQiOiJ0b29sdV8wMU1ZdGNpem9kSm13S2lEWWhmUWd6Y1ciLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJGaWxlIHNhdmVkLiAgU2F2ZWQgZmlsZSB7c3JjL2FwcC9hYm91dC9wYWdlLnRzeH0iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCI2ZTRkNjc0ZC02YWU3LTQ0MTMtODdmMS00YmI0ZWE3OTA5Nzg7dG9vbHVfMDFIeHRjMkIxSDNUQmlSSDhKVVpwaDRxIjp7InJlcXVlc3RJZCI6IjZlNGQ2NzRkLTZhZTctNDQxMy04N2YxLTRiYjRlYTc5MDk3OCIsInRvb2xVc2VJZCI6InRvb2x1XzAxSHh0YzJCMUgzVEJpUkg4SlVacGg0cSIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkZpbGUgc2F2ZWQuICBTYXZlZCBmaWxlIHtzcmMvY29tcG9uZW50cy9zZWN0aW9ucy9hYm91dC9BYm91dEhlcm8udHN4fSIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjE4Yzg3MjgxLThlNGEtNGU3ZC1hZjNhLTc3OTZlMjA3NzczNTt0b29sdV8wMTR2QWF0YXd3OWpiYml1ZnBOdjRQTjkiOnsicmVxdWVzdElkIjoiMThjODcyODEtOGU0YS00ZTdkLWFmM2EtNzc5NmUyMDc3NzM1IiwidG9vbFVzZUlkIjoidG9vbHVfMDE0dkFhdGF3dzlqYmJpdWZwTnY0UE45IiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiRmlsZSBzYXZlZC4gIFNhdmVkIGZpbGUge3NyYy9jb21wb25lbnRzL3NlY3Rpb25zL2Fib3V0L091clN0b3J5LnRzeH0iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJlMmVhNzYyZS0xY2RhLTRhOTMtYmQ1Ny1lNjFkYjI4YmVhOTI7dG9vbHVfMDFBVE0xYXRaS0syNlVuanhwZUZKQVFoIjp7InJlcXVlc3RJZCI6ImUyZWE3NjJlLTFjZGEtNGE5My1iZDU3LWU2MWRiMjhiZWE5MiIsInRvb2xVc2VJZCI6InRvb2x1XzAxQVRNMWF0WktLMjZVbmp4cGVGSkFRaCIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkZpbGUgc2F2ZWQuICBTYXZlZCBmaWxlIHtzcmMvY29tcG9uZW50cy9zZWN0aW9ucy9hYm91dC9WYWx1ZXMudHN4fSIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sImUwMjI0NjNkLTczNmUtNGIxMy1hNjVmLWYyMDI3MDRiMDNlZjt0b29sdV8wMUxvb3RHaEsxdG4zbnlaVDIxSExyUnQiOnsicmVxdWVzdElkIjoiZTAyMjQ2M2QtNzM2ZS00YjEzLWE2NWYtZjIwMjcwNGIwM2VmIiwidG9vbFVzZUlkIjoidG9vbHVfMDFMb290R2hLMXRuM255WlQyMUhMclJ0IiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiRmlsZSBzYXZlZC4gIFNhdmVkIGZpbGUge3NyYy9jb21wb25lbnRzL3NlY3Rpb25zL2Fib3V0L1N0YXRzLnRzeH0iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCIzN2ZiYjBjYy1iYThjLTQ0MTgtODU2ZC1kYTY1NWE2NDUxYWM7dG9vbHVfMDFVRkFramZ5RTdaZ3lQYUZqa0dQZWY2Ijp7InJlcXVlc3RJZCI6IjM3ZmJiMGNjLWJhOGMtNDQxOC04NTZkLWRhNjU1YTY0NTFhYyIsInRvb2xVc2VJZCI6InRvb2x1XzAxVUZBa2pmeUU3Wmd5UGFGamtHUGVmNiIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkZpbGUgc2F2ZWQuICBTYXZlZCBmaWxlIHtzcmMvY29tcG9uZW50cy9zZWN0aW9ucy9hYm91dC9UZWFtLnRzeH0iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJkZjg0OTY3Mi02NjA5LTQ1M2YtOTgyZi0yODRiY2Q2MWU5NzY7dG9vbHVfMDFIYllkWHkzSjgxYVNjMWVZSDJUYUF5Ijp7InJlcXVlc3RJZCI6ImRmODQ5NjcyLTY2MDktNDUzZi05ODJmLTI4NGJjZDYxZTk3NiIsInRvb2xVc2VJZCI6InRvb2x1XzAxSGJZZFh5M0o4MWFTYzFlWUgyVGFBeSIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkZpbGUgc2F2ZWQuICBTYXZlZCBmaWxlIHtzcmMvY29tcG9uZW50cy9zZWN0aW9ucy9hYm91dC9XaHlXb3JrV2l0aFVzLnRzeH0iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJkN2Q5MzI1My1mODQxLTRiZDItODAzZS0zNzMxYTE1YTkxMTA7dG9vbHVfMDFGbm9DOG54dEZyQ2J4emh1b2lYVGpjIjp7InJlcXVlc3RJZCI6ImQ3ZDkzMjUzLWY4NDEtNGJkMi04MDNlLTM3MzFhMTVhOTExMCIsInRvb2xVc2VJZCI6InRvb2x1XzAxRm5vQzhueHRGckNieHpodW9pWFRqYyIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkZpbGUgc2F2ZWQuICBTYXZlZCBmaWxlIHtzcmMvY29tcG9uZW50cy91aS9OYXZpZ2F0aW9uLnRzeH0iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19fSwiZHJhZnRFeGNoYW5nZSI6eyJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJyaWNoX3RleHRfanNvbl9yZXByIjp7InR5cGUiOiJkb2MiLCJjb250ZW50IjpbeyJ0eXBlIjoicGFyYWdyYXBoIn1dfSwic3RhdHVzIjoiZHJhZnQifSwicmVxdWVzdElkcyI6W10sImlzUGlubmVkIjpmYWxzZSwiaXNTaGFyZWFibGUiOnRydWUsImV4dHJhRGF0YSI6eyJpc0FnZW50Q29udmVyc2F0aW9uIjp0cnVlLCJoYXNEaXJ0eUVkaXRzIjp0cnVlfSwicGVyc29uYVR5cGUiOjAsInJvb3RUYXNrVXVpZCI6IjcxN2QwYjBlLWRkNzItNDE3OC05MjUzLTMyZTMzZmMwNjBkNSJ9fSwiYWdlbnRFeGVjdXRpb25Nb2RlIjoibWFudWFsIiwiaXNQYW5lbENvbGxhcHNlZCI6dHJ1ZX0=" />
      </map>
    </option>
  </component>
</project>